{
  
    
        "post0": {
            "title": "HasMaps and BigO",
            "content": "Hacks . Analyze the Big O complexity on Sorts. . Establish analytics including:time to sort, number of comparisons and number of swaps.- Average the results for each each Sort, run each at least 12 times and 5000 elements. You should throw out High and Low when doing analysis. | Make your final/judgement on best sort: Number of Comparisons, Number of Swaps, Big O complexity, and Total Time. | . Build your own Hashmap. Make a HashMap to correspond to a Data Structure using a Collection. . Be sure to have 5000 records | Perform analysis on Binary Search vs HashMap Lookup, try using random to search and find 100 keys in 5000 records. Perform 12 times and throw out high and low. | . Extra, Practical learning . Performing Iteration, Delete, and Add operations are another way to analyze Collection vs HashMap data structure. | A HashMap and a Collection can be used in a Class, POJO and API. | Make a Diagram on the Pros and Cons of Collection vs HashMap | . Analyze the Big O complexity on Sorts.(Bubble sort) . Results: | . time to sort number of comparisons number of swaps . 1.4s | 12497500 | 6368847 | . 0.7s | 12497500 | 6070443 | . 0.6s | 12497500 | 6280209 | . 0.5s | 12497500 | 6376832 | . 0.5s | 12497500 | 6242731 | . 0.5s | 12497500 | 6239241 | . 0.5s | 12497500 | 6183403 | . 0.5s | 12497500 | 6263490 | . 0.5s | 12497500 | 6212439 | . 0.4s | 12497500 | 6293301 | . 0.4s | 12497500 | 6263701 | . 0.5s | 12497500 | 6267669 | . Average Result ( throw out High and Low ) : | . time to sort number of comparisons number of swaps . 0.52s | 12497500 | 6262301.6 | . Big O complexity: $O(2n)$ | . import java.util.Random; public class BubbleSort{ private int numOfComparisons = 0; private int numberOfSwaps = 0; public void bubbleSort(int[] arr) { int temp = 0; for(int i=0; i &lt; arr.length; i++){ for(int j=1; j &lt; (arr.length-i); j++){ if(arr[j-1] &gt; arr[j]){ temp = arr[j-1]; arr[j-1] = arr[j]; arr[j] = temp; numberOfSwaps++; } numOfComparisons++; } } } public int getNumOfComparisons(){ return numOfComparisons; } public int getNumOfSwaps(){ return numberOfSwaps; } public static void main(String[] args) { BubbleSort test = new BubbleSort(); Random num = new Random(); int arr[] = new int[5000]; for (int i = 0; i &lt; arr.length; i++) { arr[i] = num.nextInt(); // storing random integers in an array } test.bubbleSort(arr); for(int i=0; i &lt; arr.length; i++){ System.out.print(arr[i] + &quot; &quot;); } System.out.println(); System.out.println(&quot;number of comparisons: &quot; + test.getNumOfComparisons()); System.out.println(&quot;number of Swaps: &quot; + test.getNumOfSwaps()); } } BubbleSort.main(null); . number of comparisons: 12497500 number of Swaps: 6258067 . Analyze the Big O complexity on Sorts.(Selection Sort) . Results: | . time to sort number of comparisons number of swaps . 0.6s | 12497500 | 4989 | . 0.5s | 12497500 | 4987 | . 0.6s | 12497500 | 4990 | . 0.5s | 12497500 | 4994 | . 0.6s | 12497500 | 4990 | . 0.5s | 12497500 | 4990 | . 0.6s | 12497500 | 4993 | . 0.6s | 12497500 | 4997 | . 0.5s | 12497500 | 4987 | . 0.5s | 12497500 | 4989 | . 0.5s | 12497500 | 4990 | . 0.6s | 12497500 | 4986 | . Average Result ( throw out High and Low ) : | . time to sort number of comparisons number of swaps . 0.55s | 12497500 | 4989.9 | . Big O complexity: $O(n^2)$ | . import java.util.Random; int numOfComparisons = 0; int numberOfSwaps = 0; private void swapItems(int firstIndex, int secondIndex, Object[] arrayOfStuff){ Object thirdHand = arrayOfStuff[firstIndex]; arrayOfStuff[firstIndex] = arrayOfStuff[secondIndex]; arrayOfStuff[secondIndex] = thirdHand; } Random num = new Random(); Integer[] Array = new Integer[5000]; for (int i = 0; i &lt; Array.length; i++) { Array[i] = num.nextInt(); // storing random integers in an array } for (int outerLoop = 0; outerLoop &lt; Array.length; outerLoop++){ int minIndex = outerLoop; for (int inner = outerLoop +1; inner &lt; Array.length; inner++){ if (Array[inner].compareTo(Array[minIndex]) &lt; 0){ minIndex = inner; } numOfComparisons++; } if (minIndex != outerLoop){ swapItems(minIndex, outerLoop, Array); numberOfSwaps++; } } for (int i = 0; i &lt; Array.length; i++){ System.out.print(Array[i] + &quot; &quot;); } System.out.println(); System.out.println(&quot;number of comparisons: &quot; + numOfComparisons); System.out.println(&quot;number of Swaps: &quot; + numberOfSwaps); . -2147196954 -2145943807 -2145653608 -2145173365 -2144849407 -2144611449 -2143500201 -2142965001 -2141977865 -2141083136 -2140625583 -2139043102 -2138254932 -2138151330 -2137950291 -2137901879 -2136477054 -2134677379 -2134113969 -2133933070 -2133822879 -2133698710 -2132833776 -2132663646 -2132513460 -2131256896 -2129721960 -2129316526 -2127952409 -2126367322 -2125541336 -2125354708 -2125041705 -2124235666 -2122996411 -2122502038 -2121869278 -2121010551 -2120182630 -2120105857 -2120016580 -2119442937 -2118870421 -2118549574 -2118456149 -2116901947 -2114715032 -2114588309 -2113772897 -2112993338 -2112638420 -2111430366 -2109853839 -2108503567 -2108096475 -2107405689 -2106673944 -2105327274 -2104817376 -2104379244 -2103684603 -2103543124 -2103042359 -2102539038 -2102163650 -2101902333 -2101169253 -2096707965 -2096028227 -2095272624 -2095234544 -2094577099 -2093016892 -2091692385 -2091470020 -2090356974 -2090179804 -2090111769 -2089990608 -2089474459 -2086969043 -2086766714 -2085072283 -2085013511 -2082989794 -2080748498 -2079530794 -2079530446 -2078851500 -2078085412 -2078043082 -2078016683 -2077718466 -2076884440 -2076154171 -2073347927 -2073010143 -2072828802 -2072694155 -2072646997 -2069869207 -2069701227 -2069123071 -2068101241 -2066075418 -2065824752 -2065553512 -2064614202 -2064063335 -2063750964 -2063218062 -2060923140 -2059602832 -2058837057 -2058351347 -2057934265 -2056261591 -2054274272 -2053268110 -2052850574 -2050796580 -2050673873 -2050138709 -2050038923 -2049695153 -2048926168 -2048599716 -2046300788 -2045513551 -2045497568 -2043954424 -2042481100 -2042297544 -2040851767 -2040788960 -2040539678 -2040522334 -2037291553 -2036703730 -2034593634 -2033670253 -2033668151 -2031858952 -2031172134 -2030605076 -2029470112 -2029467535 -2027388969 -2026408937 -2026086925 -2026019887 -2025650582 -2024337699 -2022797737 -2022756088 -2019867906 -2017200795 -2016996393 -2016675060 -2016407468 -2015922876 -2015640343 -2015387539 -2014782538 -2014675618 -2013728439 -2012743224 -2011958573 -2011932092 -2010534503 -2010223564 -2010222438 -2009808455 -2009476205 -2008418567 -2008357058 -2007876043 -2007591969 -2006507269 -2006038648 -2004407823 -2003860135 -2003416742 -2002676653 -2001108001 -2000178677 -2000106546 -2000094770 -1999789994 -1997542967 -1997155567 -1996742800 -1996668544 -1996084269 -1994450261 -1994268892 -1993780858 -1993137501 -1991574095 -1990093774 -1989194645 -1989002586 -1987061150 -1987014643 -1985876195 -1981702984 -1981021247 -1979544907 -1978871348 -1978019596 -1977516874 -1976672495 -1976574085 -1975646261 -1975380121 -1974457250 -1974203062 -1973587734 -1973243993 -1972851119 -1971055583 -1968774668 -1968160964 -1967600177 -1965275517 -1964570671 -1964489713 -1960686187 -1959874218 -1959165636 -1958991743 -1958797156 -1958192329 -1957832904 -1956863282 -1956055287 -1955299215 -1953551064 -1953488759 -1953229329 -1952920916 -1951788004 -1951462596 -1949194223 -1949070190 -1948351709 -1947565474 -1946973462 -1944328171 -1944016443 -1943777514 -1943763082 -1943175716 -1942362958 -1942108892 -1941599861 -1941446982 -1939886317 -1939397629 -1938913019 -1938864645 -1938670529 -1938314315 -1938010524 -1936706486 -1935456539 -1934010520 -1932694888 -1932596238 -1931366077 -1930692113 -1929771174 -1929329910 -1927834179 -1924840004 -1924668026 -1923583260 -1923462364 -1922242174 -1921062223 -1921019179 -1919515247 -1918603353 -1918084575 -1916985018 -1915731686 -1915595919 -1915578289 -1915372513 -1915089741 -1913343171 -1911246533 -1910672215 -1908588799 -1903024666 -1901487780 -1901286484 -1900965145 -1900686397 -1898417528 -1897573621 -1896537590 -1895998650 -1895700534 -1895427549 -1895244130 -1894548259 -1892833501 -1891705181 -1891522233 -1890973317 -1889154720 -1888876347 -1888696212 -1888525505 -1887213596 -1886934051 -1885610001 -1885385537 -1885060691 -1883887773 -1883057557 -1882886338 -1882839094 -1882724101 -1882085937 -1881780222 -1881339953 -1880043311 -1879906586 -1879579790 -1878343086 -1877209180 -1876739207 -1876382209 -1876012576 -1875324038 -1874323750 -1874310677 -1874247553 -1872699194 -1872166156 -1871928599 -1871094258 -1871021324 -1870936446 -1870182308 -1869615264 -1869316528 -1868103202 -1867823226 -1865444405 -1865179731 -1863940247 -1863120660 -1860630783 -1860551048 -1859355101 -1858771904 -1858056644 -1858015623 -1856960014 -1856078257 -1855846940 -1855593410 -1855179606 -1854607210 -1854078105 -1853505097 -1853103131 -1853000174 -1852103520 -1850747024 -1850569668 -1850406255 -1850350742 -1850025536 -1849944145 -1848940024 -1848726477 -1847554480 -1847503503 -1844920007 -1844279696 -1843739794 -1843340706 -1843163989 -1839042388 -1837973331 -1834647412 -1834145119 -1833335518 -1833220627 -1833168974 -1831919185 -1831682554 -1831454008 -1831003404 -1830476306 -1829948090 -1828968019 -1828962100 -1828762993 -1828647077 -1828543168 -1828425822 -1827974008 -1825856716 -1825622283 -1825489707 -1824730523 -1824582362 -1823141947 -1821696812 -1820960071 -1820701723 -1818100484 -1816082566 -1814180238 -1814111700 -1814093883 -1813868187 -1813722871 -1812931174 -1812232575 -1810039573 -1809452801 -1806311304 -1804622989 -1804528773 -1804140819 -1803041569 -1802287604 -1801327632 -1800740796 -1800570264 -1800297517 -1800136652 -1799565521 -1799562328 -1799168486 -1796366344 -1796139508 -1795809439 -1791709765 -1790903963 -1789472837 -1788537941 -1787550372 -1784733721 -1784359080 -1783120095 -1782714198 -1782515999 -1781771937 -1781401368 -1780823321 -1779396234 -1778480546 -1777332733 -1776910182 -1776294503 -1775580384 -1774777703 -1774283358 -1773637928 -1773027518 -1772938076 -1772205284 -1769893860 -1768576550 -1767796461 -1767397045 -1767274695 -1767227771 -1766946941 -1766840987 -1766236482 -1766002287 -1765082922 -1762345823 -1760522573 -1760383652 -1758970243 -1758295787 -1758266527 -1756085806 -1755329553 -1754539443 -1754480864 -1753627147 -1753378781 -1752619009 -1752347971 -1752148242 -1751174652 -1747576512 -1747461114 -1746641791 -1746172957 -1745542092 -1743714289 -1743591719 -1742325677 -1742108370 -1741306551 -1741091570 -1739488134 -1738537932 -1738433431 -1738076640 -1738001717 -1737565686 -1737398209 -1734801296 -1734646868 -1734307141 -1733155119 -1731547310 -1729856633 -1729651914 -1726419027 -1726378445 -1724203318 -1723565554 -1723520503 -1721918526 -1721615670 -1721278105 -1721029382 -1720767137 -1720635719 -1719636728 -1719566649 -1719102563 -1717044684 -1716966545 -1715927098 -1715857999 -1714688079 -1713124330 -1712478675 -1712349351 -1710193514 -1709809948 -1707006429 -1706608247 -1705279689 -1703570991 -1703534536 -1703466110 -1700867750 -1698836392 -1698545696 -1697009433 -1695222734 -1694105874 -1692817670 -1691414408 -1690787670 -1688692973 -1688614589 -1687841828 -1685408935 -1685264793 -1684948733 -1683796057 -1683095467 -1680744099 -1680709084 -1680089775 -1677235927 -1677184963 -1676937250 -1676649634 -1675034462 -1674545810 -1674217307 -1674206901 -1673415791 -1673321455 -1673144139 -1671966327 -1671913662 -1671827226 -1670320643 -1669488892 -1668600090 -1667277008 -1666542856 -1665883574 -1665430477 -1665124142 -1662369390 -1661641128 -1660758717 -1657140148 -1656777489 -1655382900 -1655082181 -1654278681 -1653658038 -1653588917 -1653386150 -1653364938 -1652247078 -1651096287 -1650855791 -1650651709 -1649998387 -1649584275 -1648649263 -1647371067 -1645728532 -1644877115 -1644373879 -1642932483 -1641674941 -1641434232 -1640929639 -1639488793 -1639105918 -1639059571 -1637703651 -1637041163 -1636910609 -1634002659 -1633510053 -1633285584 -1632512784 -1632431130 -1630192573 -1628501450 -1626959523 -1625816243 -1625028371 -1624041664 -1623344959 -1622941658 -1622477133 -1621812711 -1621805974 -1620590764 -1619935138 -1619390161 -1618833047 -1618727605 -1618255887 -1616368191 -1615560974 -1614246090 -1612730347 -1610773733 -1609435956 -1609213943 -1608753474 -1608392375 -1606715447 -1605948717 -1604325606 -1604066925 -1603970723 -1603928736 -1603708435 -1603652867 -1603539170 -1603476460 -1603017025 -1600590602 -1599968923 -1599509039 -1599376912 -1597418846 -1597227386 -1596488645 -1596394585 -1596347474 -1595905991 -1595188954 -1593666525 -1593615822 -1593139653 -1590845494 -1590797635 -1590422967 -1590300552 -1589201108 -1588892583 -1588867956 -1588639093 -1588402083 -1587924098 -1587326201 -1586850965 -1585986562 -1584992311 -1584264301 -1583914478 -1582890376 -1582884234 -1582329089 -1581223801 -1580316702 -1578750443 -1578691065 -1577812069 -1576819679 -1576629194 -1574979159 -1574882281 -1572982610 -1570331063 -1569661130 -1569422489 -1568205713 -1567104588 -1566063324 -1565330881 -1564170294 -1563787188 -1562918501 -1562357227 -1562096314 -1561864013 -1561718988 -1560701019 -1560619927 -1560331643 -1558879525 -1558385968 -1558177132 -1557804913 -1553335969 -1552970764 -1552884313 -1550160275 -1549497850 -1549468524 -1549223195 -1549142287 -1548518775 -1547430198 -1545736539 -1545729642 -1545253659 -1544895071 -1542442767 -1539333827 -1539065748 -1538771687 -1538300144 -1536619303 -1536563470 -1536379017 -1535631320 -1534874178 -1534850272 -1532855957 -1532472149 -1531819850 -1531347388 -1529626961 -1529026034 -1528944049 -1528894085 -1528394995 -1528352135 -1527156808 -1524704764 -1524233805 -1522568862 -1522563678 -1520885206 -1520347556 -1519627470 -1518991539 -1518767258 -1518707018 -1518429711 -1518144215 -1516764452 -1516362625 -1516039236 -1514896150 -1513814332 -1512567406 -1511205227 -1510729364 -1510648016 -1510498236 -1510293559 -1510048645 -1508201034 -1507115364 -1506755237 -1506311494 -1506124838 -1505681318 -1503230572 -1501037720 -1499576724 -1498619200 -1498613236 -1497027819 -1496394890 -1496244798 -1495782395 -1495351028 -1492526510 -1491075043 -1490850763 -1489931021 -1489648616 -1489413256 -1488503027 -1487451325 -1486695261 -1486544775 -1486441998 -1486419927 -1485968136 -1484234076 -1482642319 -1480960044 -1478448611 -1477010100 -1476871223 -1476827915 -1476196052 -1476088724 -1474279778 -1473944791 -1473860203 -1471344094 -1469029747 -1468998637 -1468395499 -1467279928 -1466491842 -1466304839 -1465763305 -1465530985 -1465465432 -1465122610 -1464825417 -1463899357 -1463678281 -1462921447 -1462661063 -1461532792 -1459039839 -1458152954 -1453974178 -1453217838 -1450546811 -1449638774 -1448890979 -1448772544 -1448629073 -1445978067 -1445776505 -1445115717 -1445001943 -1444279297 -1442692483 -1442104062 -1441947866 -1441630348 -1441022094 -1440112281 -1439545160 -1438590200 -1437082622 -1436887707 -1433622303 -1432525446 -1431651207 -1431469714 -1430154184 -1429882321 -1429030375 -1428464254 -1428336319 -1427560137 -1426681729 -1425316982 -1425110042 -1424904778 -1424467290 -1421209196 -1419953235 -1419370783 -1418998560 -1418376300 -1418169417 -1417687759 -1416528675 -1415850402 -1415800685 -1415578894 -1415407984 -1415402300 -1414407164 -1414026756 -1413705186 -1413456182 -1411276427 -1410874526 -1410625960 -1410213240 -1409701205 -1409352485 -1408222441 -1406051478 -1404994119 -1404991738 -1404840429 -1403928773 -1403913493 -1403278285 -1401756965 -1401168897 -1400556309 -1400535470 -1397602406 -1397491384 -1396974256 -1396967149 -1396896987 -1396654616 -1394352928 -1394198923 -1394126886 -1393452651 -1393417910 -1392460339 -1391537344 -1390607248 -1389979307 -1389972548 -1388436712 -1385862852 -1385612088 -1385535607 -1384272961 -1383718432 -1383346176 -1383196075 -1382501295 -1382280646 -1381045937 -1381025479 -1379976537 -1379647418 -1379053720 -1377699046 -1375169787 -1374842992 -1374685371 -1373590873 -1373139533 -1371832533 -1371234542 -1370268804 -1369956192 -1369442411 -1369405096 -1367455377 -1366808235 -1366583875 -1366578447 -1366464592 -1365920222 -1365877986 -1365758603 -1364523836 -1364285541 -1363583940 -1363135380 -1362272300 -1360172061 -1358791444 -1358690736 -1358251009 -1356052718 -1355973951 -1355633671 -1351099436 -1350330793 -1349730283 -1347835055 -1347022056 -1345035092 -1344034388 -1343698064 -1343209876 -1341753539 -1340635383 -1339145055 -1339034519 -1338863183 -1337607026 -1337191480 -1335638317 -1332090520 -1330590522 -1328881275 -1328659147 -1327189698 -1327114666 -1326448496 -1325461933 -1325131469 -1324030395 -1323823895 -1321930322 -1321208771 -1320719788 -1320391422 -1317742333 -1315935909 -1315122953 -1314772889 -1314747656 -1312227625 -1312089259 -1310861760 -1309997552 -1309714511 -1308443659 -1307566875 -1306963537 -1304310608 -1303374525 -1302803500 -1302210788 -1301428225 -1301396095 -1299750242 -1299068074 -1298678996 -1297284719 -1297215663 -1296825294 -1296462888 -1296166163 -1295279828 -1294844453 -1293281541 -1291296586 -1290565888 -1289956451 -1289798198 -1288773542 -1287335092 -1286944139 -1286904179 -1286900179 -1286835816 -1286413196 -1285232291 -1285128598 -1285002993 -1283025477 -1281745997 -1281012082 -1280664177 -1279725889 -1279018653 -1277833031 -1277361444 -1276950233 -1275570633 -1275072257 -1274639512 -1274371981 -1274146519 -1273239138 -1273026424 -1272839479 -1272581363 -1272266657 -1272112966 -1270890577 -1270118928 -1267499989 -1267211418 -1266711029 -1266379913 -1265748297 -1265675551 -1265590487 -1265396346 -1265289249 -1264992806 -1262859167 -1261885521 -1261425648 -1260082858 -1259457162 -1259173773 -1258578879 -1257069998 -1255832206 -1255068619 -1250469045 -1250415910 -1249220620 -1248424290 -1246736227 -1246513254 -1246301108 -1245905958 -1244822225 -1244703059 -1244425473 -1243760790 -1242889670 -1242731174 -1239643263 -1239247983 -1238569516 -1237018348 -1236536052 -1235983016 -1235956763 -1233766379 -1232343023 -1231824751 -1231433475 -1229531470 -1229050629 -1228958392 -1227345801 -1227055734 -1226873690 -1226331330 -1225116787 -1224208072 -1223389490 -1222946974 -1221885056 -1221826443 -1220515488 -1220512777 -1219503954 -1218521918 -1218438943 -1217922205 -1217629655 -1217483307 -1217439039 -1216634224 -1215964347 -1213591744 -1211316806 -1208948669 -1207382070 -1206051110 -1205582995 -1204707472 -1203892832 -1200278336 -1200135969 -1199324085 -1198735706 -1196346604 -1196046011 -1195512683 -1194517748 -1192425250 -1191714173 -1186931923 -1186859145 -1186663643 -1184979773 -1182860205 -1181751376 -1181332377 -1180782135 -1180359983 -1179485971 -1179459071 -1179087669 -1178376374 -1175308189 -1174683002 -1169645293 -1169458403 -1168097854 -1167319807 -1166515225 -1166131206 -1165030993 -1164357128 -1164048354 -1163991511 -1163610082 -1161891189 -1161668643 -1157556781 -1156758082 -1156695984 -1154928635 -1154348533 -1153777868 -1152761873 -1152162083 -1152051980 -1151397813 -1151291388 -1150655896 -1150442935 -1149526975 -1147820103 -1143284749 -1143282362 -1142543758 -1142362504 -1141509989 -1140866389 -1137877988 -1136028491 -1134929968 -1134095686 -1133603265 -1133403888 -1133391319 -1132961029 -1132130424 -1132088269 -1131474804 -1131306271 -1130202288 -1129293668 -1129020693 -1128027312 -1126816319 -1125776140 -1125171401 -1125040447 -1124724520 -1124066616 -1123961503 -1122835958 -1121789721 -1120237411 -1119284671 -1116607697 -1115536925 -1114246855 -1113532237 -1113414620 -1112868389 -1110979923 -1110125639 -1109588250 -1108023562 -1107501793 -1107189056 -1107139838 -1106927752 -1106230767 -1106209787 -1105971575 -1105716430 -1105427667 -1105275403 -1104757590 -1104630084 -1104397463 -1097570474 -1097508232 -1097458938 -1097004224 -1096582942 -1095959696 -1095866950 -1095380308 -1095174933 -1094520531 -1094396317 -1093854903 -1093434067 -1092307642 -1092160805 -1091930080 -1091746851 -1090082637 -1088250546 -1087750355 -1087283214 -1084224197 -1083550572 -1082788132 -1080918299 -1079758980 -1079478510 -1077922682 -1077850934 -1076457653 -1075497604 -1073159815 -1073029502 -1073027801 -1071552703 -1070944930 -1070637780 -1069966233 -1069775016 -1069734495 -1069500310 -1067610620 -1067319264 -1065208422 -1063532688 -1063247525 -1061821754 -1061755702 -1060034729 -1059151679 -1058892720 -1057360910 -1053583346 -1050975236 -1050851955 -1050638353 -1050546874 -1046626266 -1046333809 -1046159162 -1045745238 -1040802390 -1040339224 -1040088485 -1039703201 -1037698494 -1037506071 -1036986184 -1036748091 -1036663764 -1036473637 -1035032990 -1033609552 -1032552269 -1032129844 -1030642807 -1027583353 -1026791979 -1024717267 -1022286004 -1022186326 -1021514748 -1021006120 -1019712969 -1019581227 -1019043687 -1018941704 -1018792664 -1011034537 -1010868247 -1009421417 -1009106895 -1008716996 -1007414924 -1006534958 -1005640046 -1005131534 -1005067125 -1004060599 -1003855059 -1002825165 -1002546766 -1002260914 -1002017386 -1001580704 -1001289173 -1000685173 -1000286897 -999490637 -998367199 -996908147 -996608710 -995860678 -995570331 -994241423 -993760416 -992830515 -992329092 -991276823 -989513021 -988801660 -988674831 -988181382 -988014367 -986401020 -986397424 -986308793 -986170544 -984348479 -983758923 -983580141 -982122119 -980271181 -979648660 -978586515 -974617648 -974539555 -973975228 -973910985 -973730954 -972870662 -972404347 -971898219 -970432983 -969185973 -968645616 -967032861 -966909292 -966547859 -966020716 -965415952 -963783083 -963249591 -960001733 -959527437 -958073938 -956911572 -955793537 -955791028 -955184787 -949537046 -948925748 -947587503 -947072916 -946267308 -945328226 -945174843 -944437164 -944324046 -942568932 -942531477 -939996804 -939933131 -939528752 -937800912 -937363670 -936892445 -933304447 -932518309 -931060295 -930834880 -930468907 -930354165 -930188886 -928414676 -928144597 -926047868 -922812454 -922148720 -920639982 -920349770 -918957169 -918184795 -915245888 -914583782 -914569464 -911458464 -910906941 -910731513 -909214801 -908156477 -905843328 -905414428 -905240812 -904414118 -903829162 -902889579 -900940843 -900835603 -900529416 -899951889 -898258287 -897524460 -897242268 -895773784 -895688357 -894582112 -892856908 -892690012 -891320609 -890990643 -889784659 -889126568 -887304143 -884007278 -883991452 -883637076 -883555937 -882677791 -882625915 -880750816 -880615054 -879398718 -878989503 -877824178 -876063813 -875293371 -874405000 -872279806 -872167502 -871816119 -868676021 -868391895 -867833585 -867717290 -865942387 -863517579 -863079934 -862699734 -862559124 -862429103 -861196564 -858161440 -857630772 -855574915 -855342017 -855000999 -854414112 -852650091 -851735854 -850415807 -847880518 -847454369 -845489902 -845349297 -845252092 -843552218 -843275014 -842088491 -841619288 -840125948 -840049871 -839758155 -838407773 -838049142 -837925179 -837207200 -835751858 -835085685 -834978008 -834564681 -834413296 -832665185 -832540617 -831573184 -829632801 -829613597 -829304618 -829095449 -828635787 -828425354 -827521795 -827486816 -822664511 -821052555 -820949339 -819929365 -819333126 -817966715 -817610003 -816868559 -816677785 -816098832 -815584354 -815206337 -814562116 -812516842 -812283082 -811972312 -811294987 -809290141 -808911237 -808749521 -806950025 -804873061 -804749158 -803221051 -802508606 -802471983 -801650056 -800571761 -800234172 -799138688 -798297968 -797395682 -794416772 -793940277 -793411420 -793203040 -792572967 -791993372 -791234775 -790565352 -788007448 -786781829 -785844031 -785490441 -785330223 -784756270 -784144222 -782371992 -780491811 -778875292 -778297632 -777169213 -776655483 -776089403 -775622135 -772322302 -771191416 -770837470 -770135208 -770071320 -770020813 -769229509 -769003803 -768926909 -768521440 -764858950 -762752615 -761815239 -761808838 -761029065 -759069964 -758704288 -757220446 -756972825 -756301427 -756270300 -754468681 -753242500 -753073043 -752329723 -751703143 -751617935 -749452510 -748243420 -747987172 -747977926 -747940770 -747704616 -747252122 -746006361 -745121798 -744729998 -744716680 -743738347 -743025654 -742890750 -742475525 -742224859 -741229426 -740333913 -740122991 -738583250 -738161650 -736884231 -736682938 -736082752 -735884200 -734440969 -734405564 -732959559 -732530649 -726211569 -725900925 -723925287 -722971703 -721308688 -719897684 -719674901 -718848585 -715525307 -714813092 -714490434 -714448704 -714013687 -712491083 -711290803 -710691040 -707761721 -704974828 -704672563 -702520990 -702207512 -702200379 -702034308 -701395532 -700424871 -700152954 -698788376 -698770334 -698210451 -695946212 -694675665 -694352012 -694168812 -690719926 -690403028 -690215668 -690134900 -689763917 -688462107 -688147367 -687355462 -687037046 -687005857 -686134084 -685576383 -685257984 -684801906 -684759175 -682702449 -682290292 -681642590 -679715419 -679130456 -678205076 -677426940 -677330614 -676467622 -675942655 -675392712 -675152989 -671704006 -671641873 -669689518 -669288733 -668848878 -668548068 -667222175 -666606675 -666299114 -664638617 -664243351 -664060164 -662465881 -661799327 -660974734 -660629729 -659648702 -659478357 -659399969 -656159532 -653819053 -651512271 -650825573 -650642641 -650231888 -646930694 -646541909 -645370000 -643544962 -643268895 -642966694 -642955150 -642860254 -641476472 -640067965 -639278118 -638778168 -637749518 -635924748 -635274845 -635225469 -635143661 -634817409 -633803099 -633172788 -632512775 -631749324 -630381524 -629309559 -629036374 -627489774 -627332694 -626057232 -625019641 -624674824 -624598274 -624532963 -624210564 -622697061 -621606435 -621284975 -620362047 -619358333 -619133714 -616311929 -615574763 -615066173 -613949540 -612830696 -612448576 -611471743 -610611420 -609928386 -609545804 -609406968 -608842224 -608579429 -608264018 -607915437 -606953549 -606895658 -605907953 -605771362 -605342949 -604720029 -601935896 -601561549 -601465164 -601347540 -600787673 -599079957 -598429287 -598172584 -598165711 -595543322 -595491070 -594646411 -594632256 -594397249 -594156571 -594034889 -593245518 -592855876 -592600737 -591037725 -590532882 -590169782 -588904681 -585698635 -583554372 -582932627 -582619135 -581974411 -581888945 -581758357 -579432413 -576670393 -576134068 -575999255 -571763762 -571586001 -570215627 -569448207 -569153679 -568293250 -567427986 -563677268 -563079837 -563021792 -562487113 -562434930 -561958192 -560104803 -558503499 -558371380 -556570308 -556144486 -551677516 -551179488 -550945393 -545438319 -544080720 -543169379 -541644630 -540990253 -540498682 -538014639 -536689096 -536519855 -536341942 -534282572 -533015666 -531452593 -530500408 -530146876 -529995869 -529304944 -528928488 -528585411 -528134377 -526969290 -526911804 -526501505 -526188516 -525630080 -523980654 -523181011 -522529875 -521032319 -519788619 -518160898 -515189643 -514846590 -514504851 -512558751 -510780033 -509668199 -508422920 -506273975 -506257421 -505187521 -504664025 -503861862 -503176013 -502524331 -502418261 -502282803 -501877749 -501212999 -500756938 -500315852 -499724598 -499505941 -498766076 -498512038 -498497002 -497850251 -497540905 -496853559 -496810255 -495573404 -494806156 -494682584 -494528263 -493109466 -491895283 -491620942 -490876786 -490054070 -489907969 -489626120 -488446860 -487785288 -487702820 -486695783 -485749848 -485153738 -484925135 -483730402 -483211594 -481336380 -479163666 -478671427 -478424789 -477758094 -475489803 -475248788 -475148230 -472370336 -472102031 -471189493 -471062976 -470691795 -470104260 -469909486 -466991493 -466867989 -466619610 -466062816 -464460355 -464040852 -463339540 -463311284 -463052229 -460954458 -459757204 -457980906 -457252733 -456469925 -454573343 -452827586 -450999471 -450129733 -448850920 -448761676 -448473445 -447997648 -445916596 -444653066 -443462741 -443018822 -442427637 -442076558 -441656253 -440516736 -440300571 -439810204 -439745373 -435098084 -434669741 -433699951 -432467411 -431435585 -430967966 -430746826 -429366218 -428947906 -428067241 -427732799 -425951333 -425300184 -425274041 -425180190 -424153442 -424087954 -423638322 -422600606 -421827004 -420272683 -420073494 -419454541 -419016850 -418224195 -418070891 -415264255 -415224183 -413962067 -413682341 -413479606 -412656799 -412644037 -412030824 -410627281 -409586039 -408985068 -407993283 -407482545 -405798539 -405694103 -405549431 -401427476 -400709379 -399925330 -399559418 -397092625 -396393715 -396258891 -395562114 -395176576 -392583417 -391476156 -391156152 -390353113 -389899963 -389697864 -387908280 -386025895 -385391303 -384243620 -384180177 -382826113 -382681030 -382640170 -381540747 -379846511 -378536938 -378207096 -377119842 -375002794 -374357987 -374001535 -373215057 -373191308 -372643453 -371372204 -371333199 -369765293 -366193726 -366185524 -365964442 -363663892 -361175004 -360073709 -358705519 -358320656 -357523621 -353958457 -353222088 -352923405 -352272199 -351927146 -350187644 -349452213 -346984590 -346461025 -345129287 -343329460 -342926376 -342589061 -339521194 -339497048 -338418413 -338042495 -335796810 -334690066 -334028943 -333972375 -332994870 -331050809 -329194512 -328969610 -328863889 -328031440 -327149560 -325698412 -325079767 -324840233 -324130555 -322064206 -321728270 -320989624 -320795156 -320717559 -320578566 -319576588 -318517624 -315116749 -314823912 -314716082 -313623238 -313361168 -312185200 -310699796 -309703141 -309342463 -309307265 -308491461 -307711555 -307644009 -306854718 -305630297 -305245524 -304533205 -302041985 -300018322 -299634959 -299424004 -299305992 -298967258 -298387468 -298135759 -297020132 -296479373 -295090669 -293779456 -293740492 -292934593 -292365659 -292078276 -291969482 -291040206 -290312764 -288628599 -287812353 -287481486 -287050009 -285985584 -285571478 -285301309 -283875303 -282928484 -279634472 -277291029 -276286050 -275997995 -275339991 -273535220 -272642486 -271747186 -271246354 -270427964 -269703183 -269559630 -269414122 -266577600 -266411094 -266130390 -265714869 -265219333 -265008931 -264655106 -261155486 -260442925 -260340822 -259183532 -259159885 -257965410 -256673187 -255584099 -255247042 -254373476 -253595358 -251201030 -250377299 -248024339 -246511244 -245682699 -245344146 -245109472 -243694164 -242463465 -242145425 -241533850 -241074118 -239313348 -238625316 -238494358 -236442070 -236318453 -234110926 -233846382 -233274856 -230675690 -229363616 -228941081 -227148490 -223689632 -223652297 -221783740 -220010607 -219297900 -219104072 -217684323 -216846628 -216252259 -215639197 -211853735 -211787676 -210579763 -210082716 -209360395 -209317802 -207817820 -207707087 -207326707 -207211268 -207041224 -205895174 -204528961 -203301036 -202992313 -201068852 -199895432 -199262179 -199142117 -199138350 -198928379 -194685874 -192063546 -192021973 -191977974 -191876652 -190922346 -189654724 -188165294 -187403313 -187270704 -187176464 -185887871 -185832833 -185790988 -185074146 -182917078 -182530941 -181178352 -179869130 -178844946 -177163498 -177141115 -176924637 -176367798 -174963436 -174730341 -173538917 -172174136 -170614087 -169376929 -169312760 -168987008 -168171861 -167560606 -166074188 -165685175 -165298386 -165128262 -165021494 -162972051 -161903410 -161271761 -160902467 -160450878 -159320098 -158616817 -158056134 -157681855 -157506880 -155639837 -155553434 -154110673 -153583885 -153313346 -153219251 -152519974 -151903899 -151786795 -150153469 -149983702 -149846418 -149671673 -148963354 -146809832 -146569092 -146265900 -146160392 -145985325 -144722792 -143863113 -139016788 -138134229 -136231280 -135915258 -135759299 -135694171 -135183267 -134754664 -133404024 -132307921 -131593057 -131374164 -130976993 -130386413 -130285147 -129837891 -128386762 -128154232 -127820722 -127549245 -123235498 -122777092 -122040738 -122008250 -121061107 -120846195 -120630339 -119179546 -118677835 -117252811 -114838608 -113428991 -112229017 -111524416 -108927670 -108840118 -108330650 -107946953 -105510970 -103908713 -102519280 -102165279 -100901193 -100861982 -98046173 -94980615 -94781617 -94679353 -94655294 -93697745 -93300784 -93133883 -88692706 -88626678 -86725946 -85686315 -85240107 -84260622 -84076340 -83815571 -81680516 -77086051 -76222414 -75180483 -74896057 -74176759 -73759266 -73406614 -72935454 -71306513 -70274063 -70205819 -69789725 -69742824 -69477863 -69337277 -68045047 -67728139 -67545796 -65030525 -62204599 -58949551 -56537169 -55197222 -55161652 -54458606 -54433210 -53868223 -51972298 -51742672 -51421191 -50961382 -50071233 -49146173 -47937896 -44781684 -43495084 -41749446 -41242283 -40674084 -37343514 -35358366 -35042828 -34900885 -33882101 -31087873 -30846576 -29660359 -28962357 -28958539 -28372857 -28123055 -26753020 -23857642 -22617368 -22452288 -21704929 -20399257 -18893582 -18451542 -18312588 -17425419 -13996899 -13143244 -10931615 -10412962 -9458064 -8225195 -8043135 -7074975 -3294605 -1992316 -1285064 161410 284925 1422949 3095948 3232827 3319990 3376541 4068568 4873002 5846607 6779564 8182610 8995681 9841549 10767645 10800106 11451309 13335759 14238483 14730609 15708314 15816368 18120047 18406379 19685281 20127768 20274116 20589950 20633199 24180665 24646228 25351180 25596373 25625110 27126615 28589264 30990891 31754228 31791426 32852593 33779533 33931715 34669116 34999892 36056757 36926037 37342683 37388352 37426629 38569777 38862341 41291756 42105999 42452821 43951803 43983499 45032831 45098822 45794862 45928211 47159079 48469896 50099847 50270703 52200558 52325393 53355242 53360480 53983388 54456550 55458033 57248660 58620876 58965483 59028330 59119265 59195577 59382354 59975122 62593435 63082416 63201842 63395176 63426907 64044809 64210440 64800276 65560555 65814369 66948762 67328980 67793047 67962602 68516326 69394754 72314567 74266316 75470632 75843135 76813317 76975116 78932759 79037475 80116732 80469577 81979083 82539942 82674361 83308057 83527798 83882975 84014695 85668661 85901569 86855291 88239180 89354030 89585023 90665436 91724200 94576323 95357751 95874673 96756019 97672415 99224146 100314768 101076984 101135460 101409604 102932578 104102859 104791142 107235569 107244210 107551540 107567623 108752060 109749761 110627838 111400426 111464517 112058535 112892407 113190920 113893414 114644262 115753265 115815785 115948298 116942067 117995337 118581847 119576339 121307758 123090449 123267131 123606295 123645240 124484552 125334595 125941119 126850022 126854059 127328486 127799886 127962554 129362100 129850135 132309934 135169184 135309809 135755095 135896727 136051758 136648899 136697173 140183773 140427263 141068567 141324154 141916160 141999586 145889000 146419448 147577024 148077398 148755231 149003089 149101772 149281435 150124316 150152980 150284955 151085810 154323021 154423191 155637631 156003616 156263626 156417347 157058996 160038745 160390632 163419920 165274789 166571271 169819846 170867178 170871702 171017022 171563803 172643248 174499312 176803761 177218283 177591512 177729105 179430545 179599375 179628499 180238608 180345760 181443724 181738670 182902097 183244542 184159739 184996673 185756128 187081214 188337398 188462180 188485631 188991168 190760176 194248538 194542417 195247675 196282759 199154147 200970965 201567825 202346823 204254242 205046209 205540241 206703215 207818645 208215115 210748427 210970567 213985154 214066775 214419041 214501610 215970232 217444222 217792050 218457127 218573967 219043841 219485485 222389599 222952679 224438997 224677505 225014506 225885184 228818923 229357234 230831021 231819346 232155761 233465331 234611705 234771246 234863944 235544733 235588770 237095115 237260591 237260660 237405986 237825212 239997807 241406989 242028394 242876295 242974563 246139294 248713282 248875951 249143456 249284828 250010736 250124202 251164871 251211294 253265637 254533807 255555649 256402351 258260368 259039546 261135102 261544389 263599083 264001589 265109587 265804608 266804143 266865661 267119613 267296754 268208628 269747378 270068465 270382018 270599462 271116907 271287865 272406745 272546617 273278712 273321784 273626370 273673734 274866855 275568513 277398037 277696616 279170482 279603090 280859184 282229508 282230744 283622008 284655111 284921370 287430964 288362671 290347345 292648584 293227399 293530300 294419997 296683553 299301209 300154315 301297384 302028945 303551932 303912427 304615693 305263798 305399013 307311761 308034281 308497358 308526712 309557389 309846263 310287660 310764366 311613809 312415299 314789755 315210986 315985792 317219106 317873259 318145404 318497853 320160644 321108992 323965389 324809948 325641041 326128825 326258264 326605717 326828306 327143173 327162999 328165827 328424822 328709067 330988677 331467305 331801380 332227005 335580419 335657613 335897123 338527441 338562515 339094131 340114679 340341404 341321642 341850663 342160514 342278427 342596154 342859498 343693837 343932715 344114372 345277286 346414157 347211196 347766217 347804508 349286579 349339346 350028295 350132668 354791607 354852971 355228952 355449443 355947193 356550863 357938513 358265408 360841672 361926129 362347277 362641965 362903165 365851970 367149076 367357916 367619389 368015884 368967286 369178551 370069524 370617952 370913851 371024920 374153886 374571579 376375258 376564620 376867071 376913740 377372102 378284569 379315618 379812644 381413347 381804715 382446738 385393199 386113855 386214295 386354736 388387386 388801206 389562606 390130302 390336028 390553793 390741088 391973244 392333411 393604878 394196728 394490967 394549144 395375658 397060051 397977137 398135349 399332225 401822613 402303435 402697340 402721136 403063734 403215316 403463703 403556682 405372358 406493018 406501765 406538710 406962309 407624897 407900065 408318346 408405914 408515245 408606502 409141693 409438418 410458411 410476198 414230269 414395524 414460990 415445127 416743918 417155840 417711586 418392526 419555916 419864455 420281049 420303650 420676855 420831572 420859152 422009611 422581483 425168031 425963244 426190239 427211590 427303839 427885343 428625481 429418588 430987945 431359704 432056396 432112708 432786546 433488146 435049678 438838325 441264720 441346686 442062514 442381638 444940719 446483323 446554661 446638057 448901470 450082194 451119180 451324348 452366520 452542653 453426258 454374328 455925010 457430854 458957288 459781213 459954685 460289189 461142154 462090335 464978959 465670564 466258484 466367094 467078216 467886455 468072694 468823207 470878060 472213613 474382354 474807237 475050694 475074040 475220349 477407763 477457160 478086370 478446821 478574050 478747974 478934446 479108851 479304283 480227863 482522590 483724712 484368898 484617774 485186394 485938461 487158648 488191572 488240830 488389409 488906427 488998653 489541619 491538551 491751861 493943822 495312593 495872343 496310529 496352931 497457053 498425416 501162074 501787417 502443129 502938282 503918834 504199140 506365405 506367407 507753527 507786475 508387957 508435297 509634935 512589641 515185281 515218179 516259949 517881775 518939021 520506829 521721942 521945433 523554069 524746056 524845538 526498539 527594569 527840628 529107635 529224393 529590064 530957006 532495234 533225501 534990482 535409204 535646643 537529470 538871213 539266951 542680837 542907968 543944358 544016626 546149993 546914943 548851312 550337809 550513656 550707279 550936831 551541774 554256965 554324753 554504878 554851824 554992383 556373910 556824742 557313201 558212798 558828282 558981579 560060964 561613114 561784887 562668408 564060175 564299324 564486880 564930234 567977085 568125816 570247840 571957004 573171320 574695405 574747767 574867673 576345900 579081396 579881226 582799406 583003791 583895601 584420254 588112624 588885093 588931250 589335663 591206402 591593004 591759443 593359171 594542041 594980946 595422974 595606600 595702508 596192393 596209802 596591713 597122588 597749116 598120975 598836347 598950994 601920813 604510714 606148588 606604103 607052329 610321299 610800316 611606509 613712294 613783661 614221553 615431157 615980111 616342661 616516746 617779618 617900709 618351353 619109283 619834750 619910861 620102707 620779838 622393937 623387918 624741327 624795138 625712086 625971979 626613244 627136733 628149068 628723432 628936716 630022336 630335515 630899891 631843821 633629550 633983359 634773573 635498086 636816656 637974715 638593441 639244387 640786769 641273504 641401414 642220377 642916237 643623004 646135608 646227410 646719789 646734644 646998696 647748657 648357367 649162150 649966961 651614426 651640022 652440230 652474222 653034746 653198139 653466260 655529726 656559713 657193366 657694805 657949930 658382028 659250358 661119634 661370622 662275097 663179662 663366161 663616620 664977803 665554816 666707672 668315027 668335712 668605905 668663617 669024832 669440402 670025418 671025247 672276782 673161390 673231256 674396033 675610335 676666372 676813599 676874008 676901886 677302063 678960200 679125531 679236625 680633616 682593967 683015745 683341321 684149039 684385762 684509783 685531395 686082805 686570377 686625318 688776952 688951981 689141954 692143782 695362367 695484493 697351374 697392098 698175972 698407834 698878161 700680752 701899200 703560371 704492996 704553796 705457705 708259316 709629208 711419951 712084988 712251207 715645228 715729412 716263170 717244928 718183674 719162020 719414460 720022780 720342559 720435911 720454913 720947471 721386559 722151969 723310126 727465159 729142599 729226874 729506795 730216263 730974179 732309274 738329856 738923685 742086036 743583085 743797179 744063939 744845738 745184175 745996353 746371713 747881350 747941214 749060653 749237418 751696312 751744817 752345387 752390183 754886635 755873138 757093918 757273471 759609984 760219549 760254439 760839976 761515564 762191727 763086426 763660331 764726328 764962643 765368686 765495527 766678910 767802869 768086159 771200964 771446195 772077580 773033959 773366979 774161759 774537691 775294954 775826230 776720296 776966300 777669232 778184932 778233815 778769372 780191163 780652349 780843807 783157310 790748718 791750843 791986918 794373563 795039322 795367914 795695740 796417509 797064355 797065046 797490022 797495819 799542843 802096858 805451406 805773770 806735638 807498301 808636780 808921708 809075938 810258937 810565109 811368201 811667795 814538335 815565862 816763813 818381758 819695630 819753151 819898055 819994680 820441455 820497019 821717090 823447035 823502035 823556097 824673700 825017237 826188700 826912909 827544904 830498102 830506314 830874933 831012118 831038618 831342527 831345163 831685130 832590483 833672832 833859492 834227468 835812373 835989694 837168699 838307000 838618155 838879254 839278267 839662269 839717116 840513122 840784161 841263350 841298217 841921963 842896094 843025237 843822217 844059005 844273142 844582783 845898583 846076501 847968885 848908865 848959199 849877267 849912511 850781812 851744938 853629969 855169479 856010576 856176991 858200498 858966858 859680797 860532686 862241648 863636362 863642315 863986914 864097434 864925384 866151666 868483017 868765507 869410341 870680391 871209134 871418136 875220182 875610900 878925089 879074931 879326074 880524291 882959088 888511180 888967196 889500046 890614043 892115511 894007949 894368809 895093752 895694841 895725027 895822405 896848969 897052981 897359500 898346933 898519071 899605808 901816567 904275021 904320598 907111815 907580273 908127734 908134451 908366942 908645173 908938375 912097472 912250917 913662633 914152089 916300794 917035466 918512075 919285814 920237756 921652174 923836256 924683791 925065150 926762384 926948353 927293897 927674428 928465731 928888083 928995699 929673990 930113340 930352216 930549064 930563936 930921912 931462821 931634100 931832801 932791718 935385256 936044375 937335989 937402555 937666482 937674312 938811745 939274699 939975345 940707807 941925120 943328821 946364478 946906964 948972822 948973368 949427816 950871539 951213221 952149102 956665009 957264823 957729986 957992890 958401620 959021153 960069539 960110873 961095668 962646282 963660739 963952449 964176919 964809405 965037857 965376320 965436026 965437960 965662960 966253359 966937378 967329968 970469372 974052673 974452646 975198006 975450356 979192466 980274228 981137209 982870975 982881234 987287157 987394067 987450136 987502371 988296826 988728957 991615050 993058736 993067467 994455287 994631825 994865776 995954353 996605616 996742501 998090390 998346219 999493478 999570082 1000104672 1002426827 1002703175 1004859239 1005058833 1005563205 1006166394 1006576456 1006993206 1007240814 1008456621 1009011843 1009941037 1010037344 1010589794 1010884997 1012258670 1012409630 1014128529 1017541551 1019120051 1019522520 1020345411 1020661477 1021323206 1021687038 1021828400 1025693284 1027907515 1028621905 1028891190 1029042057 1030821031 1031264725 1031996115 1033780243 1034365864 1035073833 1035684791 1036350984 1038261752 1038500900 1038539956 1038729232 1039377664 1039889157 1041319773 1041778658 1042094625 1042502656 1044862142 1047348875 1048718856 1049727079 1049942543 1052332746 1052949509 1053405336 1054130150 1056107014 1057187178 1057309208 1057637058 1058647970 1058746699 1060862942 1061719493 1062364871 1063137569 1063398804 1063550733 1064670467 1065005945 1065936549 1067413702 1068296021 1068983475 1069598037 1071342689 1073989217 1074718914 1075328235 1075775895 1075924149 1076989421 1078184959 1079613177 1079762471 1080922474 1080992471 1081708266 1082024449 1082560366 1084039503 1084428156 1086801729 1087191359 1087769471 1088731453 1089911424 1090225463 1090595060 1091357408 1091733076 1092059085 1092454518 1093462209 1094132971 1094955952 1096151362 1097712962 1099188401 1099795917 1099898058 1100260994 1100540501 1100749835 1101628947 1102850515 1106962112 1107026611 1107849937 1109112148 1109908086 1110353263 1110788960 1110891042 1111100098 1111307753 1112151262 1112226708 1114406880 1115459770 1118265032 1118544615 1118623154 1119989639 1120158886 1122500827 1122562340 1122641681 1123867856 1125485802 1126755993 1127471583 1127586423 1128361341 1128628366 1128859820 1129451519 1129630482 1129815062 1131017632 1132576446 1132658215 1132729899 1133038144 1133229588 1134030010 1137557007 1138977338 1139962390 1140030965 1140669714 1141800324 1142549599 1142639700 1142891216 1142994675 1143460626 1144049528 1144446465 1144563113 1148535200 1149428926 1149574736 1149701427 1149738736 1149839910 1151658469 1153185844 1153644123 1153781427 1153788663 1155010903 1155546448 1156678453 1157054921 1157444125 1157462433 1157761805 1158013459 1159608700 1160225280 1161523411 1161684856 1161688057 1161969482 1162351320 1164682443 1165547033 1166835848 1167251586 1169242333 1171711619 1171883861 1172266913 1172457696 1174196072 1174539158 1174816434 1174972355 1176315487 1176398932 1177899611 1178476990 1179973573 1183838820 1183996833 1184003597 1184538541 1185691388 1188435265 1188584793 1188975098 1190242691 1192181704 1193238921 1193475294 1194810934 1194865744 1195662898 1196082752 1196083267 1196241731 1197501104 1197622168 1197785797 1199894017 1200037434 1200578226 1200633532 1200945361 1201625340 1202466268 1202654873 1203370261 1204119773 1206669391 1207860516 1208144896 1208476340 1209778633 1210310959 1210535325 1210757535 1210863387 1211144786 1212968689 1213329030 1214099726 1214398151 1214455888 1214830886 1215331674 1216114411 1216147679 1216279148 1216921717 1219295661 1219764306 1221225211 1221676835 1221739856 1222496121 1223610574 1223717037 1226095361 1226235622 1226784455 1226985425 1227644519 1227729721 1227772919 1230892039 1232169469 1233150383 1234421249 1236558201 1238917871 1238985982 1240207505 1240444695 1240893196 1241639017 1241706389 1243284030 1243653656 1243834077 1243877333 1244482870 1245300041 1245325334 1245979941 1246700436 1247221083 1248189122 1248535036 1248739180 1249172630 1249277466 1249377702 1250527799 1252512370 1253616403 1253750323 1254003966 1254943637 1257510017 1260962580 1261131969 1262337195 1262644528 1263077490 1264339674 1266054896 1267093926 1267196246 1268186376 1269179212 1269364845 1269779424 1269941133 1270027300 1271381527 1271773208 1276559876 1277134395 1277505390 1277945023 1278950589 1280706380 1280718879 1281238776 1281710263 1283528877 1283956339 1285504818 1288384275 1288399698 1288419660 1288462847 1289782155 1290802968 1290824408 1291721677 1291831459 1291934602 1292014862 1292225393 1293314645 1293892082 1295633036 1297650112 1297816806 1298729526 1300031910 1300221188 1300459652 1300808439 1301320343 1301850477 1302866355 1302903103 1303562932 1304409929 1305128200 1306032125 1307041335 1307965378 1308399762 1308750593 1310479058 1311450737 1312012513 1313276081 1314543079 1314550941 1315350928 1315774712 1317569081 1317774536 1318639728 1319965538 1320530966 1322928630 1323207817 1323919429 1325332436 1325423069 1326499590 1327194826 1327869403 1328565781 1334213042 1334288743 1334298641 1334550048 1336087738 1337726656 1338071277 1339865925 1340129383 1340562524 1343105386 1343435771 1344450516 1345051946 1345281035 1346021263 1346228146 1346314569 1348899694 1348944756 1351008460 1351610499 1351806170 1352378762 1353099672 1356686052 1356959196 1357569232 1357686554 1359102433 1361975233 1362381113 1363529216 1365293634 1365781704 1366258394 1366905290 1367072879 1367116827 1367294550 1367374596 1367505782 1367847241 1369227240 1372594056 1372982591 1373642812 1374327599 1375026315 1375323829 1376010616 1376081180 1376730497 1377366879 1378049459 1378077707 1378158601 1378824899 1378956859 1380846545 1381567062 1383139138 1383280109 1384181167 1384998149 1386102841 1386729955 1387121666 1387727094 1388045385 1389502918 1390599330 1391829881 1392660412 1392860558 1393594551 1396304187 1399046161 1400061764 1400978464 1401544536 1401594795 1401835972 1401930513 1402630487 1403228718 1403381922 1403550630 1404729378 1404853043 1405894418 1406316610 1407337532 1409058949 1410076859 1411214515 1411264045 1411276480 1412478161 1412565432 1413186484 1413563591 1413633909 1413637129 1415603126 1415676171 1416592731 1419940024 1420005642 1420305134 1421808039 1423103452 1423977985 1424613039 1426503174 1426784285 1427210185 1427410599 1427988611 1428164386 1431796009 1434337745 1435044829 1437089348 1437500974 1438077257 1440091705 1440708592 1440723869 1442710566 1442962523 1443307932 1443551606 1444663246 1445544015 1445700390 1446292013 1446726590 1448609646 1449164093 1449448884 1450073923 1450199994 1450534800 1451457572 1451753106 1452485705 1453918453 1454366387 1454424692 1455233506 1455607440 1456126524 1457059026 1457088476 1459369211 1461265892 1461584406 1461707957 1462007720 1463069190 1463631305 1463840105 1463957560 1465887402 1465968165 1466420689 1466695459 1466707060 1468267269 1469414771 1469898756 1471041854 1474749327 1477402918 1477490261 1478773631 1478966357 1480397253 1480696982 1481253188 1481321907 1481698952 1484023869 1485947175 1485961675 1486613331 1487750131 1487869483 1488913444 1491069002 1491469499 1492875393 1495584400 1495864345 1497750843 1499121843 1500750873 1501009113 1502700026 1504888035 1505063186 1505385219 1506109514 1506227281 1506499115 1506664582 1506876648 1508942891 1509156269 1509258472 1509503933 1510190047 1510420240 1511027509 1511190194 1511462596 1512781497 1512865382 1513009116 1514236395 1515281012 1515617569 1519119797 1520008654 1520243837 1520944665 1521779593 1522169544 1522327045 1522794180 1523780744 1523853833 1524151494 1526579988 1527481785 1527771754 1528771415 1528908350 1529007574 1529413514 1529688731 1529752880 1529772836 1529847526 1529991946 1530030603 1530087478 1531958784 1532018447 1534209061 1536277690 1537702900 1538654415 1539782388 1540166639 1542630384 1543736775 1543746965 1544193372 1544752141 1545089348 1546858767 1547443718 1547981806 1548070573 1548413302 1549091016 1549671059 1551755549 1551941824 1552402449 1553229978 1553421451 1554415096 1555256238 1555447522 1555968082 1556599943 1556739985 1556922535 1557194352 1557287147 1557480905 1559668906 1561833885 1561882881 1562481406 1563999268 1564119151 1564719458 1564922774 1565911716 1566379046 1566734293 1567601004 1571456490 1572538665 1573167676 1574190052 1574263091 1575340917 1576144074 1576514413 1576676466 1576699643 1578401232 1580958818 1582362779 1584198552 1584236708 1584755968 1585063215 1585772255 1585959100 1586618741 1587009129 1587052988 1587435236 1587572541 1588735403 1589251365 1591415692 1592595810 1593563023 1593816429 1593895908 1594075022 1594076109 1594402579 1595458520 1597346501 1597562909 1597599989 1598985555 1600325000 1602504147 1604401259 1605629157 1610941699 1611030567 1612306413 1613575830 1614790514 1615703051 1615903244 1616271888 1618602520 1618798570 1620967955 1620970007 1621427714 1622301127 1622802290 1624295505 1627649204 1628055065 1628383936 1630879955 1634424905 1634445932 1634547831 1635199786 1636276178 1636824259 1637316838 1638341605 1640108430 1640309236 1640514100 1641441212 1641509245 1642770742 1643016836 1643943441 1644724150 1645399130 1645472859 1645779462 1647732495 1648495745 1651874463 1651947608 1652263912 1654350606 1655537390 1656367215 1657217832 1657363082 1657516934 1658377719 1658458177 1661536785 1663945567 1664401445 1664406298 1664902984 1665245986 1665780856 1667353051 1669973801 1670760567 1670939179 1671104485 1672648915 1672987442 1675360328 1675664265 1677141166 1677528415 1678922848 1679709973 1679998218 1680291703 1680420591 1681396058 1683599412 1683890187 1685554451 1685675360 1686697276 1687746618 1688596062 1688968097 1690499056 1693224275 1693434451 1695010094 1695237586 1695473170 1695826913 1696569025 1697552230 1698147183 1698841424 1699960164 1701337869 1704354319 1704939562 1706989693 1707138076 1707932201 1707947079 1707983881 1708498116 1709284426 1710679907 1711417110 1713016099 1714574343 1715941806 1718640666 1718881376 1719704144 1719764113 1720094348 1720642133 1721309605 1721734653 1722113468 1722981173 1723460247 1724233189 1725503625 1726202131 1727381912 1727573932 1730886470 1734011663 1734578820 1735026046 1736016657 1736761924 1737284143 1738630982 1740471510 1740501211 1740634419 1740793818 1740938829 1741287225 1741328427 1742263961 1742628516 1742748357 1742904289 1743125387 1743612068 1743799682 1745160324 1746266259 1746811410 1747469219 1747555074 1747566274 1748092837 1748106765 1750909951 1752252562 1753996739 1754269095 1755904768 1756533542 1757572461 1757604047 1757976327 1758206681 1758627661 1759077886 1759164159 1759792592 1760260153 1760676023 1761909440 1762204463 1762564000 1763175531 1763776844 1764670102 1765571902 1765722640 1765973930 1765980753 1766599615 1767181096 1767511213 1767738072 1769450228 1770830019 1771597916 1771698090 1772584287 1772855776 1772936501 1773754996 1775021634 1775376377 1776159835 1776452675 1776488922 1776759945 1777897975 1778659252 1780145700 1780383330 1780397722 1780530644 1780838444 1781177141 1781391492 1781451315 1781774494 1781975422 1782505084 1782508837 1783259942 1783797475 1784100648 1785274194 1786504818 1787059026 1787712371 1787935957 1788153770 1788190731 1788762169 1788857673 1789110079 1789307160 1789434442 1793507122 1795884455 1796445726 1796490807 1797824116 1797987159 1803553210 1805483928 1806006441 1806057811 1806207310 1806513713 1806982832 1807927984 1808737038 1808805263 1808876762 1809148310 1809204654 1810897894 1812930908 1813184733 1813409769 1815878339 1816495416 1817599633 1817734797 1817817550 1818900886 1819477546 1820553990 1821479222 1821913839 1822045873 1823432411 1823842667 1825099581 1825167533 1825400814 1825729972 1827009058 1829636070 1829986744 1830121176 1831192246 1831514198 1831710394 1834399380 1834504406 1834948343 1835099130 1838632796 1838811153 1839978145 1840437185 1840858768 1840994727 1841362159 1841512287 1841834876 1841835341 1842093344 1844651361 1845777862 1848202015 1848786738 1849008693 1850128134 1850709196 1851735534 1854363987 1854717918 1855461836 1855889614 1857362774 1857544883 1860927366 1861646406 1862050317 1862226259 1862525326 1862685413 1863885232 1864107143 1865142148 1865631284 1867406277 1869248016 1869396821 1869492690 1869740904 1871652499 1872474083 1873205895 1873398523 1873441317 1875155669 1877179990 1878272669 1881497163 1882580095 1883693375 1884309640 1885059255 1887682330 1887783600 1887817279 1888083711 1889197153 1889575135 1890440370 1890759383 1891280024 1895700089 1896385822 1896795204 1896878073 1897074267 1899949324 1900610381 1900668886 1901124363 1901193893 1902801186 1903003515 1906011088 1906443643 1906601734 1907025178 1907453535 1912497650 1912802567 1913758901 1914499814 1914884923 1915961873 1918838652 1920141059 1921077509 1924769605 1926782067 1926927797 1928340356 1931905199 1932774924 1932924259 1933401832 1933714970 1935257256 1936877749 1937549549 1937893510 1938971916 1939150378 1939457379 1940989426 1942649832 1943870974 1943953876 1944101976 1944842282 1948462845 1949514327 1950083737 1951941054 1952086460 1952966961 1953057148 1953082584 1954880492 1955144753 1956886538 1958605934 1958679724 1960347168 1960541366 1962601540 1962990367 1963341393 1964176953 1969005940 1969717229 1969901135 1970012370 1970315873 1970655337 1971490766 1972964919 1974270483 1976814759 1979312721 1979319041 1980563180 1981236988 1982616448 1982900836 1983056571 1983623062 1983998167 1984383429 1986553566 1986782838 1987286760 1988106247 1988221608 1988374285 1989042954 1989865483 1990132035 1990265549 1990781605 1991399066 1991914430 1992189437 1992519863 1993920337 1996365877 1996507683 1997181549 1997197081 1998337549 1998644791 2001705387 2002833512 2003094417 2003278015 2003611702 2004244153 2005275062 2010015249 2010998908 2011894174 2013495301 2014098548 2014497908 2016970874 2017363667 2017576134 2018037288 2018227613 2018598233 2019523367 2019960910 2021047106 2021129514 2023185668 2023383291 2024783919 2025139330 2026033248 2027236973 2027517272 2028078816 2028589068 2029854030 2030329032 2030573433 2032891322 2033537920 2034497099 2034589384 2035196258 2036044094 2037146431 2038244587 2038678980 2038786796 2038982359 2039752134 2040424464 2040602995 2041315171 2041755313 2042269113 2042944579 2043274434 2044526060 2044942854 2048263980 2050328416 2050945670 2053833117 2054095858 2054170519 2054535117 2054616393 2054640848 2054724612 2056109649 2056915363 2057212536 2057386743 2057416833 2057425830 2057904469 2058263587 2058862908 2059210965 2059381077 2059475617 2059799200 2060045058 2061760474 2062146801 2062611563 2062752708 2064659168 2065009922 2065460602 2067846995 2069479540 2070100475 2071190007 2071436176 2072379974 2072554825 2072884426 2075628440 2076451226 2077073150 2078331154 2078358050 2078402045 2078439863 2078801070 2079992980 2081003715 2081493973 2081772939 2082426749 2085097808 2087902785 2088582293 2089334468 2089701770 2090602486 2091073907 2091707126 2092411256 2093653086 2094548946 2095635192 2097725185 2098133488 2098194883 2099478471 2099988586 2101981979 2103592078 2103919275 2106659348 2111865178 2113399638 2114238295 2115083939 2115441024 2115650325 2116674015 2116756926 2119210096 2120213918 2120258129 2122133129 2122827832 2122884653 2125625806 2126207256 2128123195 2128699463 2128807547 2129067419 2129502784 2130810928 2131626052 2132244503 2132580382 2133135753 2134533404 2134974650 2135557833 2135876707 2135950227 2136262294 2138286947 2138863652 2139262413 2139273181 2139404690 2141221454 2141829366 2143302063 2146692776 2147377044 number of comparisons: 12497500 number of Swaps: 4986 . Analyze the Big O complexity on Sorts.(Insertion Sort) . Results: | . time to sort number of comparisons number of swaps . 0.8s | 6266112 | 4999 | . 0.7s | 6258664 | 4999 | . 0.6s | 6325013 | 4999 | . 0.6s | 6128578 | 4999 | . 0.5s | 6146711 | 4999 | . 0.5s | 6172096 | 4999 | . 0.6s | 6291703 | 4999 | . 0.5s | 6198952 | 4999 | . 0.6s | 6245762 | 4999 | . 0.7s | 6167393 | 4999 | . 0.5s | 6184517 | 4999 | . 0.6s | 6281015 | 4999 | . Average Result ( throw out High and Low ) : | . time to sort number of comparisons number of swaps . 0.59s | 6221292.5 | 4999 | . Big O complexity: The worst-case (and average-case) complexity of the insertion sort algorithm is $O(n²)$ The best-case time complexity of insertion sort algorithm is $O(n)$ time complexity | . int numOfComparisons = 0; int numberOfSwaps = 0; ArrayList&lt;Integer&gt; tester = new ArrayList&lt;Integer&gt;(); Random num = new Random(); Integer[] Array = new Integer[5000]; for (int i = 0; i &lt; 5000; i++) { tester.add(num.nextInt()); // storing random integers in an ArrayList } for (int outerLoop = 1; outerLoop &lt; tester.size(); outerLoop++){ Integer tested = tester.get(outerLoop); int inner = outerLoop -1 ; while (inner &gt;= 0 &amp;&amp; tested.compareTo(tester.get(inner)) &lt; 0){ numOfComparisons++; tester.set(inner + 1, tester.get(inner)); inner--; } tester.set(inner + 1, tested); numberOfSwaps++; } for (int i = 0; i &lt; tester.size(); i++){ System.out.print(tester.get(i) + &quot; &quot;); } System.out.println(); System.out.println(&quot;number of comparisons: &quot; + numOfComparisons); System.out.println(&quot;number of Swaps: &quot; + numberOfSwaps); . -2146013278 -2145212040 -2144752142 -2144487787 -2144441396 -2143643455 -2143267636 -2143018138 -2141697342 -2140717929 -2139891775 -2139523540 -2138884447 -2137506146 -2136472247 -2135762271 -2135471884 -2132784855 -2131745433 -2131588522 -2131136472 -2130582660 -2129122084 -2125145349 -2124609482 -2120994677 -2120325287 -2118886894 -2118872790 -2116653343 -2116529468 -2116117787 -2115896577 -2115397710 -2114651746 -2113609605 -2112268618 -2111245937 -2111128191 -2110421730 -2110360424 -2109641258 -2109549715 -2108199209 -2108159034 -2108055480 -2107401370 -2104407675 -2101622654 -2099892862 -2099659107 -2098571529 -2095922525 -2095030052 -2091478105 -2089880066 -2088716418 -2087843320 -2084904108 -2084792714 -2084715885 -2084199834 -2083748327 -2082859943 -2081960881 -2079616480 -2075444532 -2072317088 -2071596964 -2071252821 -2070358830 -2070101368 -2069345588 -2069141308 -2064966719 -2064229174 -2061548039 -2061342852 -2060467649 -2058936162 -2058431487 -2056347652 -2055963298 -2054691683 -2054491463 -2054392158 -2054031888 -2052599649 -2051565268 -2049240652 -2049125694 -2049024596 -2046541215 -2046040803 -2045945772 -2045308338 -2043292071 -2041731404 -2041272278 -2040439071 -2040018113 -2039338751 -2039324882 -2036527180 -2035760345 -2035273748 -2034117591 -2033540066 -2032239211 -2030106425 -2028918017 -2028320267 -2027805261 -2026547209 -2026525760 -2026181617 -2024582303 -2023385540 -2022969563 -2022499612 -2020788895 -2018119175 -2017566218 -2015457841 -2015411113 -2015132501 -2014334898 -2012494774 -2011245009 -2011194699 -2010370292 -2010023984 -2007899015 -2006558028 -2006308115 -2005992104 -2005731310 -2005615456 -2005489631 -2005068442 -2004687245 -2004581913 -2003785380 -2003751718 -2002753949 -2001581953 -2001281106 -2000901682 -2000676828 -2000363531 -2000266465 -2000219525 -1999948064 -1999479871 -1999291545 -1998024643 -1996733675 -1996714661 -1995936257 -1994423896 -1993615756 -1991972993 -1991217202 -1990856153 -1989576729 -1988899201 -1988439684 -1988070236 -1986287993 -1985216224 -1984252737 -1984056398 -1983847669 -1981320656 -1980883628 -1980829128 -1980199325 -1979667319 -1979229905 -1979044957 -1976525703 -1975850939 -1974797200 -1974229137 -1973605283 -1972293017 -1970163114 -1968643590 -1966279711 -1964972833 -1964304872 -1963179086 -1962827225 -1962693722 -1962438311 -1962129644 -1960389391 -1958113620 -1957409693 -1956305720 -1955954973 -1955075214 -1954455175 -1954417102 -1953836668 -1953426470 -1952091227 -1952006157 -1951107702 -1948935691 -1947763097 -1945947008 -1945043971 -1942308691 -1942273388 -1942028430 -1937656716 -1936905833 -1936157875 -1936129992 -1935816419 -1933675304 -1930860630 -1929824595 -1929041246 -1928336157 -1927790539 -1927406745 -1927306438 -1925522214 -1925062629 -1924208007 -1924152232 -1924105870 -1924015403 -1922818859 -1921819297 -1919824582 -1918604242 -1917764518 -1917186748 -1916044252 -1915939275 -1914862753 -1910459633 -1910140665 -1909002081 -1908483366 -1908409621 -1905493031 -1905468975 -1903262485 -1899869636 -1899708786 -1898053246 -1897811569 -1897338435 -1897078934 -1894176789 -1892729714 -1892581402 -1892502729 -1888203437 -1888020056 -1887619083 -1886685833 -1885951768 -1884975749 -1883890745 -1882733058 -1882246193 -1879490727 -1878772634 -1876801700 -1874041327 -1873133217 -1872734263 -1869961569 -1869050711 -1868892573 -1867271166 -1867031061 -1863562427 -1862733805 -1860779745 -1860228044 -1859356614 -1859289974 -1859076848 -1858945086 -1858877064 -1858783771 -1858440560 -1857211575 -1857087216 -1857067770 -1857048020 -1856916371 -1856820395 -1856269559 -1855557842 -1853687256 -1851925465 -1851082467 -1849810908 -1849716425 -1849557182 -1848886226 -1848708280 -1848501981 -1846785065 -1846552580 -1846009833 -1843482293 -1841606325 -1840689595 -1840547731 -1838452643 -1838393304 -1838319089 -1837352684 -1837222938 -1836972095 -1836809138 -1836472304 -1834753420 -1834623914 -1834549173 -1834046793 -1833041383 -1832821286 -1832440461 -1830445811 -1829737935 -1829302628 -1827726187 -1826460122 -1824890649 -1823916949 -1823728654 -1822030133 -1821477316 -1820332793 -1819491492 -1818261406 -1816733730 -1815953052 -1815137124 -1813293448 -1813139145 -1811486887 -1810122236 -1809787358 -1809059609 -1808929627 -1808605774 -1807331780 -1806463744 -1806122813 -1805250547 -1805023479 -1804283187 -1804078912 -1803756530 -1803493422 -1803219845 -1802779970 -1802367150 -1801835441 -1801188429 -1800544368 -1798649281 -1796727466 -1796480961 -1792600197 -1791035003 -1790057261 -1789652904 -1789500165 -1788344506 -1785800790 -1785576131 -1784134843 -1782261679 -1782120059 -1781563074 -1780300912 -1779619641 -1777335127 -1774746536 -1774500752 -1774381368 -1774210061 -1772644197 -1772099155 -1771606125 -1771101382 -1769794760 -1769611277 -1769592495 -1768830303 -1768092554 -1767839722 -1767667385 -1767561452 -1767312219 -1767003182 -1766133937 -1765337786 -1765288534 -1765052771 -1765031267 -1763612532 -1760175629 -1760041373 -1758149459 -1755897578 -1754914292 -1754562509 -1753348989 -1753035690 -1752478681 -1752443229 -1750156283 -1749762053 -1749644185 -1749400289 -1748301606 -1746648356 -1745428194 -1745196105 -1745000505 -1744914869 -1743599056 -1743453161 -1741184121 -1740395837 -1739679582 -1739273821 -1738525932 -1737558595 -1737253700 -1736850710 -1735286111 -1735107977 -1732741133 -1732548833 -1732522482 -1731730148 -1731503411 -1729913675 -1729498871 -1729210298 -1728471466 -1728439204 -1727512850 -1726109245 -1725760975 -1725201930 -1724437251 -1722837614 -1722741466 -1722422194 -1722322994 -1722086070 -1721341479 -1720842273 -1719648314 -1718407004 -1718351851 -1718283667 -1717604566 -1717587359 -1716418514 -1716284258 -1711877420 -1711220590 -1710687813 -1710661160 -1710127761 -1709599323 -1709581678 -1707605004 -1707053844 -1706881418 -1706372125 -1705708680 -1704891379 -1703791536 -1703761674 -1703437685 -1700580924 -1699314581 -1698335879 -1696947529 -1696908799 -1696509171 -1696214958 -1694577426 -1694185421 -1692401199 -1691797226 -1689819068 -1689406291 -1688350019 -1688305594 -1688168096 -1687319366 -1686540517 -1684792225 -1683878218 -1683661017 -1683298232 -1683012380 -1682039280 -1680665703 -1679866956 -1678807332 -1677757493 -1677197426 -1676387828 -1675638928 -1675426148 -1673175429 -1672173745 -1672128068 -1671201226 -1670435943 -1670192585 -1668474543 -1668395423 -1667463955 -1667413709 -1667237167 -1664297146 -1664237560 -1664135906 -1663584685 -1663220877 -1662722049 -1661072750 -1660582408 -1660102969 -1659760094 -1658175803 -1657997493 -1657791593 -1657470829 -1657296028 -1656460420 -1655866650 -1653629660 -1653577344 -1653456794 -1652872876 -1649025337 -1647441257 -1646819046 -1646038737 -1642093630 -1641564528 -1640977438 -1640695877 -1639078935 -1638161423 -1638013458 -1637310996 -1636559673 -1636293186 -1635878224 -1635493727 -1634559849 -1632424401 -1632028820 -1630027768 -1629755852 -1629660319 -1629382470 -1629103473 -1627886042 -1626128781 -1625440467 -1625139739 -1624471909 -1622571488 -1619661465 -1618123474 -1617626094 -1617546290 -1617529953 -1616573030 -1615032525 -1614973429 -1614451418 -1613907750 -1613581167 -1612407218 -1612265655 -1612183615 -1611762900 -1609864981 -1609760473 -1609480760 -1608295998 -1607057519 -1606403023 -1605732259 -1601765603 -1601474735 -1600397401 -1598955852 -1598923135 -1597774448 -1596982521 -1596575668 -1596121288 -1594620037 -1594429503 -1593752541 -1593572129 -1592559660 -1591787415 -1591028376 -1589508929 -1589435296 -1589232538 -1588928708 -1588525566 -1587931945 -1586658925 -1586037027 -1585849425 -1585680318 -1584742673 -1583775467 -1582919362 -1582781848 -1582559812 -1582432337 -1580741635 -1580058658 -1579999546 -1579694568 -1579607058 -1579521867 -1578562144 -1577221914 -1575833756 -1571798361 -1571706272 -1569380946 -1568118217 -1567922737 -1566242112 -1564249250 -1563723875 -1563325920 -1562881937 -1562593570 -1562166824 -1560130817 -1559971916 -1559303364 -1558787991 -1557749557 -1555755445 -1555614520 -1555396588 -1554837032 -1553087342 -1553006972 -1552833286 -1552620959 -1551629487 -1550237644 -1547761484 -1546546489 -1546378008 -1544743650 -1543694759 -1543507808 -1542937222 -1542605018 -1541920069 -1540684952 -1540409098 -1540027211 -1539862012 -1536916366 -1536410128 -1536258813 -1535910502 -1535676424 -1534341698 -1534318810 -1533431920 -1532278076 -1532127704 -1531811765 -1531430589 -1530861947 -1530433990 -1530147879 -1529161896 -1529116837 -1524906778 -1524545070 -1524167221 -1523898958 -1523554129 -1523359258 -1522966381 -1520346098 -1520291236 -1520273105 -1519475202 -1519117205 -1518850048 -1518777255 -1518496023 -1518340765 -1517952913 -1517611485 -1517545291 -1517524292 -1515800262 -1513603791 -1513569597 -1513086948 -1512061257 -1511356090 -1511080390 -1511006598 -1510890924 -1509954321 -1509272499 -1508925984 -1508610184 -1507606213 -1507010524 -1505915466 -1505366923 -1503118985 -1502888098 -1502261225 -1501629702 -1501123479 -1500934983 -1499423573 -1499396056 -1497871100 -1497779911 -1496614868 -1494925193 -1494517822 -1493949257 -1492176735 -1492104976 -1491601300 -1491121156 -1489925532 -1488730985 -1488052655 -1487843122 -1487653381 -1487186573 -1486696675 -1486240329 -1485106284 -1482536838 -1481855615 -1481139058 -1479718265 -1479210491 -1479128366 -1478837222 -1478819395 -1478004583 -1477599679 -1476623310 -1473676059 -1473553987 -1472421426 -1471662777 -1470948699 -1470683336 -1470543796 -1469705581 -1469297924 -1467257202 -1466810727 -1466559699 -1465596773 -1463937365 -1462553601 -1459547521 -1459367870 -1457998496 -1457979618 -1457404878 -1457006545 -1456422679 -1454652452 -1453227359 -1453215627 -1452871988 -1451832579 -1450912324 -1450494691 -1446345680 -1445929794 -1445612798 -1445137832 -1444388614 -1444292043 -1443865352 -1441454269 -1441398564 -1439405470 -1437643801 -1437045238 -1436526806 -1433992678 -1433304064 -1431948348 -1431760972 -1431674187 -1429616382 -1429495799 -1429276022 -1428375303 -1426905715 -1426873166 -1426690444 -1426663477 -1425794544 -1424355220 -1423404742 -1421091088 -1420020536 -1419966504 -1419007592 -1418191172 -1418058028 -1417846280 -1417637788 -1415752774 -1414453123 -1413795595 -1412032320 -1411828641 -1411295237 -1411154747 -1409741502 -1408830278 -1408107516 -1407541016 -1407232543 -1407180709 -1407020637 -1406688500 -1399572173 -1397820459 -1396308323 -1396292144 -1396220688 -1395964866 -1393618837 -1392074494 -1391874798 -1391739991 -1390696891 -1390634854 -1390228355 -1390150770 -1390035237 -1389706915 -1387159988 -1385776485 -1385656537 -1385255192 -1384344277 -1382129432 -1381713073 -1381513599 -1381372886 -1380776896 -1380081765 -1379795536 -1379668070 -1379214368 -1378499988 -1377751142 -1376856077 -1376726535 -1375749448 -1375534458 -1375509722 -1374252185 -1373635304 -1373442605 -1369019330 -1368613862 -1368346379 -1367355627 -1364930640 -1364075154 -1363374757 -1363363273 -1361989209 -1361711938 -1360436365 -1359142551 -1358437200 -1357703664 -1356675785 -1356600918 -1355821211 -1355151502 -1353990516 -1346277539 -1346234154 -1345929152 -1345735327 -1345365191 -1344742872 -1344160228 -1343685441 -1343677121 -1343197280 -1343176304 -1342936551 -1342304098 -1341472426 -1340910230 -1340720037 -1340074081 -1339625743 -1339398571 -1337597617 -1336501744 -1336266156 -1332239706 -1330867951 -1330274512 -1329323501 -1327261259 -1325273075 -1322519701 -1319357021 -1319283223 -1317407592 -1317102107 -1317040575 -1316364900 -1315166285 -1312243691 -1311984740 -1311802615 -1311696898 -1311171032 -1311079003 -1309522602 -1309314062 -1309160556 -1308367550 -1307817328 -1306278552 -1301894997 -1301736940 -1301415859 -1299596060 -1297570042 -1297528796 -1296421545 -1295615884 -1295471818 -1295029120 -1294568207 -1292689857 -1291500263 -1290741470 -1289101896 -1288568103 -1288559443 -1288144994 -1287330768 -1287267444 -1282128009 -1280457364 -1279882287 -1278802357 -1277480044 -1277314816 -1276853329 -1275892723 -1275548679 -1275163720 -1274270120 -1274146651 -1274106469 -1274105452 -1273412985 -1272879693 -1271855583 -1270657258 -1270216606 -1267642027 -1267116108 -1265334617 -1265279130 -1265270589 -1264979471 -1264456166 -1264358348 -1264002929 -1261452421 -1259452168 -1259216903 -1259175821 -1258701883 -1257979011 -1257855124 -1257524871 -1257185488 -1256636839 -1256150511 -1255529635 -1254271940 -1253912249 -1252292715 -1251811091 -1251413606 -1251342607 -1250938101 -1250857236 -1249941908 -1249190700 -1248447294 -1245984603 -1245928882 -1245881461 -1240635947 -1240367509 -1238385673 -1238098696 -1236957097 -1236470336 -1235680486 -1235369324 -1235076386 -1234578605 -1234453775 -1232094543 -1231688167 -1230205727 -1229817584 -1229681638 -1228878131 -1228676282 -1228374221 -1228041512 -1227232185 -1227153211 -1226213388 -1224644542 -1223853209 -1223241723 -1222789735 -1222548116 -1222515851 -1221758508 -1218052298 -1216795448 -1216011202 -1215944748 -1215720015 -1215685947 -1214594635 -1213596757 -1213444155 -1211918147 -1211145535 -1206829424 -1205810241 -1204564156 -1202171882 -1201578361 -1201292934 -1198180829 -1197902610 -1197477855 -1196876780 -1196181371 -1195731059 -1195270550 -1194962153 -1193849331 -1193480424 -1193443544 -1193228700 -1193038985 -1192893068 -1192262269 -1191404875 -1191213299 -1189985745 -1189576788 -1189165320 -1188370032 -1187331705 -1186603760 -1186540975 -1186530421 -1186331301 -1185199775 -1185050360 -1183451268 -1183382121 -1182776708 -1182110703 -1180531645 -1177729552 -1177417756 -1176193188 -1176095112 -1175564425 -1174091204 -1171546428 -1171052692 -1170985732 -1170390270 -1170347359 -1169782819 -1169071150 -1168229129 -1167676311 -1167418799 -1165878239 -1165509156 -1165169852 -1163130050 -1161586900 -1158973003 -1158948573 -1157205213 -1156255247 -1156228382 -1155033569 -1154927258 -1154418747 -1154337059 -1153457547 -1152626638 -1148738122 -1147804426 -1146879827 -1146049188 -1143499872 -1142243062 -1142151728 -1142126009 -1139806967 -1139304883 -1137396783 -1135876020 -1133702871 -1132011068 -1131554099 -1130926945 -1128532667 -1128256219 -1128016719 -1126916219 -1126808662 -1126052134 -1125961414 -1125385040 -1123295970 -1122698510 -1122009458 -1121413534 -1120266824 -1119011785 -1118864069 -1118447866 -1118043928 -1115370808 -1115279392 -1114341566 -1112435727 -1111321185 -1111037085 -1108654459 -1107109753 -1106868055 -1104738003 -1104124536 -1102080810 -1101700521 -1101133701 -1100026918 -1097643183 -1097232910 -1096977295 -1096873688 -1095807108 -1095581624 -1094251603 -1093695019 -1092161716 -1089357815 -1088106041 -1087969605 -1087943807 -1084878245 -1082505706 -1082479582 -1082238205 -1081732451 -1079848059 -1078494210 -1078476399 -1078382423 -1078343299 -1077856264 -1077056347 -1076521985 -1075226877 -1075132823 -1074879612 -1071978986 -1069282036 -1068974283 -1067515023 -1067463396 -1067031639 -1065058071 -1064971605 -1064867552 -1064126447 -1062177014 -1061123950 -1060399529 -1059609238 -1058962387 -1058912769 -1056352805 -1056346403 -1055364457 -1054909707 -1054238638 -1050950256 -1049361579 -1049178022 -1048278879 -1046487472 -1046453214 -1046097351 -1046056083 -1045677103 -1045167608 -1044898689 -1043312186 -1043088094 -1042785007 -1042728249 -1041670368 -1040700973 -1039683634 -1039674285 -1039244288 -1038314587 -1038116454 -1036189454 -1035891018 -1033717313 -1033277026 -1032598332 -1030037532 -1028646790 -1028340472 -1026774012 -1026753857 -1026190506 -1024585261 -1024578078 -1024061225 -1021556759 -1021240147 -1020762752 -1020041861 -1018636204 -1018341872 -1018138979 -1017997323 -1016747467 -1015865106 -1015310041 -1015010993 -1014691913 -1014272438 -1013669749 -1012567316 -1010510274 -1009909011 -1008947468 -1007703358 -1007687401 -1006794965 -1006618347 -1005113807 -1004710966 -1003662406 -1002479090 -1002379525 -1002162110 -1001940752 -1001727108 -1001407202 -998811528 -998761627 -997723170 -996999298 -996180379 -996001901 -990902548 -989693431 -989582046 -989389790 -989279115 -987428799 -985020875 -984859923 -982930835 -981311604 -980265376 -978415103 -978013300 -977934113 -977114648 -976793885 -976601859 -972097678 -971012789 -970778250 -970195168 -967370354 -967173949 -965770705 -965333748 -964477875 -963779745 -963741332 -963210166 -962972481 -961196180 -960849160 -959312895 -956907465 -956242626 -955674618 -953810823 -953238469 -952420542 -952273500 -951756506 -951500773 -950723018 -950640176 -949650474 -948995576 -948979562 -948463763 -947837502 -947506439 -947313549 -945344815 -944786745 -944205451 -944090707 -943761569 -942873169 -942735157 -942597942 -942473327 -942081681 -941433904 -941408588 -941037207 -941008504 -940327364 -939688605 -939265510 -937914109 -937588006 -936709659 -936212873 -935787840 -934750356 -934340114 -933987364 -933793964 -933148330 -932647019 -932160872 -932131958 -929986126 -929506557 -929337874 -927678956 -926362797 -926057641 -925266385 -924974298 -924794061 -924784264 -924654817 -924528993 -923733404 -922483835 -921798453 -921403824 -920186335 -919833998 -919664269 -917451523 -915806942 -915488186 -914293903 -913690501 -913498609 -913166566 -913128099 -912704637 -912698643 -912569198 -912261569 -910746987 -910309160 -910245192 -910019402 -908610444 -907630276 -907294919 -906546224 -905589783 -905416218 -905213376 -904834669 -904597765 -904322464 -904058415 -903615931 -903507083 -903359815 -902945743 -902155335 -900631356 -900497289 -899651814 -899247439 -899151743 -898020428 -897911750 -896904951 -896579506 -896384324 -894996090 -894869209 -894856534 -893815685 -890087599 -889676118 -889146443 -889095663 -888516794 -887190473 -886314574 -885643539 -884918726 -882643883 -882390599 -880915798 -880259946 -879443210 -877135952 -876907730 -876523739 -876414799 -874475903 -874262367 -872510575 -872191344 -869821247 -868995735 -868049857 -864933379 -864724813 -864205366 -863607483 -862026038 -859491563 -858990195 -858181653 -858119527 -856653683 -856327691 -855979325 -855349950 -854699924 -854430291 -854103360 -853242107 -851234464 -849894520 -849875480 -849578459 -849572352 -848857019 -848729218 -848545669 -848369566 -848302650 -848200019 -846694359 -846112040 -845408635 -844964221 -843494590 -841008960 -840553102 -840506551 -839973843 -839151274 -837960282 -837387087 -836778428 -836757166 -836671631 -835431915 -834897089 -833115415 -832824488 -832403305 -831431665 -831038182 -829899988 -829787600 -828369258 -828078234 -827373919 -827069221 -824297179 -821749570 -820423280 -818517918 -818452870 -818129597 -817514362 -817070309 -815621758 -815373791 -815373757 -814818325 -814668336 -813951239 -813141041 -811431379 -810879188 -810609947 -810543867 -810533437 -810347854 -810147818 -809790558 -807081900 -806844568 -806496712 -806206275 -805567374 -805474864 -805345823 -803184803 -802550793 -802251938 -801987156 -801568787 -801342684 -800661009 -799419282 -796649623 -795937133 -795554580 -794946858 -794342675 -794154235 -791503169 -791501928 -791235908 -791182923 -790864189 -790016667 -789229670 -788953624 -787985779 -787050244 -785419084 -785411179 -784202766 -783032029 -781207797 -778829461 -778655005 -778078950 -777911471 -775085450 -774452722 -769908753 -769315815 -768984414 -765960685 -765731938 -763621340 -763023111 -762816824 -762490298 -761594637 -761391091 -760392865 -760233769 -760177331 -760052343 -759712894 -759147067 -758421196 -757356479 -756941251 -756928628 -753337093 -751403548 -751092772 -750778571 -750699024 -750408225 -750270715 -748124293 -747115978 -747048953 -747011301 -746658641 -745894756 -745868813 -745805056 -745492684 -744707411 -743729020 -742631530 -742280534 -741682053 -740481045 -737025770 -736865286 -736239308 -735874610 -735240767 -734458885 -733396711 -733383748 -733115661 -733099134 -732629323 -731776303 -731772943 -730905539 -730508329 -729566003 -729090268 -728413157 -725379972 -724761808 -724152574 -722598478 -722449294 -721464860 -721431735 -720082290 -720007371 -719500490 -719243199 -718742318 -718374787 -718289334 -716752309 -715381469 -712242655 -711711729 -707630890 -705317666 -704226097 -702908865 -700582070 -700326269 -699322946 -697062506 -695270453 -695181980 -694191548 -693744017 -691490720 -689072100 -686365081 -685066362 -684246170 -683349118 -683301704 -682671633 -681904100 -679815744 -679777519 -679622179 -679113737 -676884374 -676013735 -675434958 -675212992 -674077579 -673140247 -672869661 -672691344 -671087903 -671012926 -670497856 -669348295 -667496787 -666749927 -665361674 -665123202 -663748613 -663497824 -663370039 -662343801 -661918376 -661190041 -659478502 -658893418 -658547759 -658301895 -658135006 -657396322 -656951723 -656736568 -656559813 -656278985 -656044044 -654419071 -653067350 -652496880 -651497439 -651218571 -650965125 -649802885 -648775690 -648314063 -648034629 -646219986 -645177754 -645090633 -643522840 -639971922 -639317419 -639222612 -638616407 -636556064 -635102059 -634384420 -633307075 -632528844 -632501290 -631748205 -631395319 -628373711 -628185621 -627425448 -626688004 -626421195 -625698779 -624791774 -623381992 -623235715 -622712035 -621867992 -619790920 -617620033 -617340197 -615304108 -614518465 -614257748 -613355497 -611869965 -611049383 -610695787 -610210183 -609081918 -608774937 -608363979 -607521895 -607106100 -606986398 -606744091 -604453279 -604215055 -604183899 -604172669 -603467760 -602386115 -601471933 -597899798 -596297481 -595650981 -594170595 -592980380 -592768252 -592368314 -592324419 -592236775 -590208479 -589259047 -589020864 -588136239 -587751223 -587119959 -586963709 -585340845 -582895969 -581060743 -581060423 -581021414 -580393982 -578742155 -578201927 -578140565 -574728481 -572468470 -571595876 -571227314 -570993750 -570889399 -568624532 -567892811 -567744564 -565752108 -563891173 -563338679 -562248927 -562248386 -561474049 -560616503 -560436517 -560208676 -559957929 -559764356 -559163098 -557734305 -555500280 -555462489 -555365791 -555172146 -553920302 -552523053 -551004156 -550449051 -547550028 -547297698 -547065247 -546646558 -545342824 -543686643 -542696655 -540748103 -540612676 -540455195 -538160480 -537660072 -537323882 -536546098 -535705490 -535691768 -535555685 -535267074 -533894807 -533010802 -532144404 -530010919 -529337304 -528912844 -528532631 -527941669 -527681332 -527647575 -526421100 -526003574 -523548860 -523271349 -523074257 -522969143 -520303444 -519691150 -519073436 -518983212 -518911324 -516978325 -514515632 -513481785 -512924468 -512307630 -510407181 -509708369 -509380073 -508426052 -506812394 -506300715 -506191460 -504183710 -500463354 -500216085 -498870520 -498133838 -496523590 -493474402 -492131256 -491865531 -491536818 -491397031 -490629150 -490623797 -490220170 -489532018 -488157401 -488130468 -488080334 -487958338 -487393571 -487079582 -484416580 -484397121 -481914835 -481894738 -481682294 -480658920 -479636608 -478293795 -477647299 -475729305 -475389221 -475013344 -474514198 -473721300 -473154271 -472385654 -472193972 -472140486 -471511958 -469426039 -469115885 -468535185 -468175866 -467816505 -465204773 -463588060 -461475724 -459372162 -459028200 -458105420 -458063975 -458054937 -457301403 -455591362 -455396486 -455276308 -453464819 -451201825 -450619224 -450538909 -450368212 -449935382 -449596199 -449464002 -449251385 -448569597 -447618054 -447166221 -446526411 -444336401 -442484713 -442196183 -441021677 -439608267 -439083944 -438028695 -437349033 -436190791 -435326933 -434432953 -433101063 -431806628 -431728330 -430110682 -430042912 -429787839 -427085972 -426559299 -423644298 -423326820 -422306240 -422212240 -421107155 -417115472 -416070354 -416029775 -415428322 -413705271 -412159302 -412071742 -411547987 -410625335 -410535525 -409952629 -409616886 -406713853 -406693355 -406011509 -405615266 -403727835 -403531988 -403236654 -403193955 -401653368 -401338274 -400472811 -400096113 -400041655 -399627820 -398991682 -398371076 -397994923 -397984041 -397327173 -396658905 -396269832 -395885445 -393542142 -392479014 -392310621 -392301719 -391575116 -391493882 -391434523 -389494054 -389296792 -388614771 -388507215 -386431850 -385965854 -384307564 -383676267 -383548995 -382274151 -380167192 -379897387 -377680296 -377579099 -376885158 -374559882 -374540222 -373962396 -373449408 -372250415 -372154388 -372009229 -370692293 -369792890 -368848552 -368537233 -367895910 -367217922 -366545221 -366399758 -364394925 -363925890 -362507190 -362061981 -360145918 -359469605 -356993363 -356351392 -353770504 -353390122 -353350951 -353248737 -351068816 -349507144 -348269084 -347204164 -347009152 -341475244 -339564970 -339039197 -338875350 -338038898 -337357273 -336340474 -333366949 -332145313 -332033105 -330967047 -329667181 -329580403 -327203267 -326745127 -325709917 -325682538 -324195685 -322543397 -319869930 -319810448 -318827048 -318810284 -318017447 -317742509 -317639479 -317477090 -317341107 -316836699 -316688092 -315201326 -315169557 -314968979 -314901154 -313442761 -310420343 -309613928 -308326035 -308014262 -307290920 -306405224 -306306881 -305546107 -305393588 -304683941 -303847100 -302171198 -301498770 -301448639 -301198637 -299979051 -299455489 -299269604 -297800866 -297464234 -295498726 -295300048 -294164226 -294063397 -293378182 -293089942 -293083446 -290246928 -289035759 -288744836 -287966420 -287378140 -285736150 -285633474 -285590490 -285419092 -284891574 -284854589 -283853130 -282826906 -281978704 -281313476 -281236342 -281094568 -280673012 -279519077 -279453966 -279335299 -278593785 -278272873 -277038698 -276689079 -274951715 -274464991 -273706089 -272836798 -272132622 -271953541 -271902770 -269793412 -268067526 -267288710 -266518923 -266046825 -264407550 -264256831 -264205993 -263794444 -263651534 -263558085 -263022319 -261484959 -260730625 -260572469 -258154195 -257709978 -256523633 -256004599 -255928250 -253996300 -252875056 -252805482 -252362746 -252146572 -251623011 -251386874 -249339236 -248038464 -247729204 -247185773 -244054405 -243990031 -242917791 -242567334 -240191113 -240178259 -239248922 -239038218 -237596597 -237541720 -237519868 -237080334 -236994999 -234600566 -234564811 -233750347 -232964717 -232256286 -229877572 -229545052 -229272875 -228365923 -228260677 -227351929 -227338660 -227031715 -226625159 -224830118 -224616788 -224162906 -224112427 -223350439 -222673731 -222575739 -222276785 -221365392 -220173641 -219409005 -218962534 -218486335 -218025690 -216644276 -216594700 -216309562 -215196310 -213882040 -213736587 -213386462 -212429815 -209292734 -209225725 -208075902 -207078104 -206859133 -205256143 -204761173 -202756968 -202748132 -201830177 -200904610 -200217128 -198758685 -198656394 -197802432 -196873233 -196289239 -195807523 -194827177 -194463132 -194307577 -194217176 -193352351 -192896413 -192480056 -191052501 -190316448 -189540663 -189283511 -188886556 -187348911 -186566020 -186009325 -185638600 -182111804 -182090946 -180604654 -179991791 -179392955 -179147063 -178983244 -177850148 -176277126 -176154533 -175448756 -174521306 -174081783 -173467123 -171332854 -167797666 -166812026 -166009825 -161470260 -160967945 -160489004 -159528969 -159073474 -158456925 -158206716 -157688423 -157504649 -157368919 -156365542 -155017926 -154845170 -154212210 -153436836 -151342664 -149774892 -149605180 -149405127 -149054275 -148167589 -147923856 -147305545 -147246301 -146956542 -146797898 -145266182 -144660218 -144591993 -144418360 -143836899 -143801621 -143442574 -143437364 -141876917 -141259232 -141210451 -140633711 -140405935 -140328562 -139587513 -138535397 -136297445 -135790756 -135751532 -134419170 -133678690 -133030603 -132223846 -131545135 -130821092 -130794079 -129482761 -129270691 -128320704 -127102355 -126856023 -126555756 -125294122 -124158965 -122941426 -122452928 -121494990 -121189479 -121179955 -119862967 -118784871 -118575891 -117841773 -116621850 -116343082 -116099545 -115432226 -115225820 -114802853 -114068111 -113787450 -113428157 -112360774 -111217779 -108985506 -105512355 -104957404 -104722056 -104192984 -103735076 -103623969 -103238642 -102122053 -99191342 -98844629 -98021643 -97825199 -97662325 -97429555 -97209414 -97196585 -97172323 -96467816 -95203759 -94388030 -93801686 -93258168 -91354703 -88682129 -86919012 -84815677 -84675449 -83764674 -82567679 -81455358 -79866859 -79080666 -75136357 -74402272 -73709660 -73677812 -72763100 -70518988 -70419232 -70061760 -69792971 -69133687 -68326716 -67386391 -66577374 -66240259 -65989799 -62390468 -58678981 -58512182 -58453738 -57336587 -56262146 -56230362 -55604178 -53986067 -53806844 -53634398 -53622302 -53158773 -52963485 -51685868 -50332427 -49694717 -48201722 -47852445 -46226933 -43575799 -41346699 -37049558 -36279972 -34163703 -33377461 -33267218 -33246998 -31339658 -31258749 -31202180 -30587471 -29158887 -27882190 -27120665 -26426347 -26367630 -23876428 -23671448 -23314148 -22416523 -22413933 -18686841 -18131864 -16242578 -15138803 -14510271 -13584217 -13406427 -12481113 -12211065 -11809287 -10766737 -10369424 -9083868 -9065424 -8149134 -7433925 -6822022 -6517876 -5299100 -5004213 -4489305 -4089644 -4077777 -3214569 -3035376 -2741383 -2048823 -1364175 753215 1105633 2295529 3188535 4132083 5320853 5726623 6711640 7415487 7732457 11031289 11588274 12888918 13321469 13454119 16400637 16927751 18029004 19274946 20120934 20137032 20652559 20944107 23590161 23907052 24375698 25132810 25462388 25552516 27234845 29134845 29631621 31080933 31156235 31653818 32254790 35821922 37110103 37611133 39351888 40850535 42741957 43176763 43211494 43667027 44217105 44590345 48443664 50289943 50732074 52171293 52455462 52708617 54004658 54236542 54520721 57531247 60070242 63592949 63731061 63732006 65678320 68149510 68173826 68713233 69385604 70070363 70958497 71329941 72082103 73812518 74376699 74814818 74932436 76148353 77331080 77618655 77772897 77995496 79953451 80175387 80227036 81039975 81185393 81861756 82897482 83472640 83649750 84522851 86015105 87971479 88815748 88830122 89441512 89657361 91375473 91499674 91947072 93092932 94191339 95881913 96155981 96581820 96591881 96625611 98562150 100577502 100847156 101677744 101720254 101768417 102054878 102596229 103193820 103944390 104198223 104829566 106373491 106940576 106985333 107219915 108038015 108129573 108316454 109010823 109328392 110102223 112644642 112678541 112789655 113342004 113388201 114295887 117618787 118185288 118434768 120542876 121523158 121782963 123086090 123394449 123623050 124948705 125215207 128164275 128828727 129232092 129277060 131047356 131110605 131242110 132668242 132807847 133350577 133926588 135581680 135742726 137378253 137708153 138916501 138998228 139006470 139167586 139930157 141488674 142157775 142615345 144413086 144796845 144813141 145662551 148438380 148673015 149639334 150163082 152011987 152394995 153200144 155894005 156267036 157432796 158206070 159221014 160124808 160556378 161746949 161785802 162028739 162169511 162200183 163131373 165137954 165197808 165759381 166950792 169109535 169869324 170560728 174420803 175013578 175111095 176707683 182533440 183999332 184283100 185710435 185833479 186259792 187146628 189537579 189603779 189620346 190602154 190668116 190697879 197832504 197990843 200612502 203304748 204595578 206395352 207137694 207723037 208475480 208493371 209336334 209426591 211888358 213965702 215071463 215903568 216335944 218454219 218964359 219016063 219202843 219228188 220872729 222611829 224877638 225898934 227038926 227930949 228840354 229664377 230305847 230918573 232441393 232653977 233509364 234692396 234965500 235606197 236529570 237185335 238938522 240785375 241616952 241694010 243360780 243819282 244105209 246086255 246330232 249490742 249685294 250036067 250359316 251520705 251710362 252665678 254314633 257131948 259609660 259655459 260780248 263491468 263990444 264091279 265149672 265755773 267403514 268025040 269509494 269789703 269873580 270049644 272125611 272855536 273993359 277613183 277723230 278055272 279579815 279620556 280330616 280603068 280997920 283075254 283188592 283264920 283270704 283446985 283948191 283974160 284259781 284342846 286727590 287474521 287822701 288871328 289451726 290005008 290107772 290755489 291217189 291572782 292191010 292294523 293448146 294887616 297004737 298950430 299811019 300239185 301501352 301732129 302322254 302506004 302870488 304133394 305159082 305628035 305762772 306066899 310146452 313177589 314103383 314599802 314882270 316988394 318324904 318784724 320264604 322193474 322482656 322798919 323174352 324187618 324412590 324696816 325261508 325329843 326240794 326289265 326422758 326508794 327183360 328840184 329104382 332289477 333017229 336091438 338345383 340284816 340321623 340774513 341556712 341595016 341713934 341917036 342249337 342617201 342950004 343684833 344388278 346604648 346713651 346831735 347173855 347609245 348373669 349328762 350018657 350431481 350926482 351183395 352003856 352082059 352275797 353576582 353947609 354279313 357090022 357115432 359946124 361205653 361826850 362190439 362329196 367227068 368825837 369348177 370849721 371470434 371649948 372866950 375252635 375460973 377026404 377944567 378109151 378863938 379274112 379978479 380376451 380935853 383960047 385528307 385636917 385711795 387159849 387826805 388436029 388465095 389383209 389410098 389911741 391040385 391624901 391698478 392438989 393771380 394882846 395252845 395329395 395861094 396915406 397946776 398568172 398942668 400031319 400442377 400699754 402487798 403782270 405462465 406178129 406202550 407042871 407200238 407244091 408140597 408472004 408923239 409553865 409711822 409853291 410033364 412669563 413530290 413676540 413826716 414282108 414986358 415173114 415388627 416588834 416889100 418279280 418463704 419746726 420130350 421913236 423320980 424717521 424856588 424950016 426324620 426365659 426682467 427080198 427566622 428549111 429887796 429916472 429982942 430732521 432873700 436512829 436540209 437176442 437278505 437406979 440328848 441874182 443077189 443252166 447043506 447055175 449914344 449965384 451512847 452241925 452662916 452798026 453763260 454475587 455225232 455442141 456810717 456986892 457100220 457307657 457532867 458828644 459389853 459671831 459746811 460282345 462795820 464088420 464778289 465132067 465617569 465876304 466088429 466967345 467336341 468240241 468297020 469553981 470488838 470779440 471217037 471680224 472784510 472939455 473042954 473070996 473128311 475585614 475824109 476124444 476557302 477180377 478575411 482231473 483139723 483301822 483663254 486110593 486142502 486150862 489430493 490340053 493256085 493641907 493738436 494069766 494145849 494514745 496938498 497121702 497563454 499093119 500635639 501043567 502100429 502376304 503448533 503453578 503677307 504071036 504146960 504308651 504538573 504890957 506931027 509310835 510344386 511228197 512802370 512949023 513433966 513851130 514244871 514261568 514401585 515841184 516405966 517323135 518548934 520651045 520805177 520904010 521918291 522356685 522486533 523972593 524474821 524513077 525895851 526012475 526295307 526328704 531310712 534010912 536163145 536209944 537519941 538028009 538967273 539154953 539365640 541893523 542540778 545236385 547854068 548874332 550504863 550673083 551302889 552200311 553407866 553588894 553852356 555086351 555199025 555752609 556797183 556937599 557442699 558954468 560690821 562109729 562124430 562618000 563141483 563451286 563754905 565263775 565921001 565945294 566469013 569259589 570287318 571105927 572891659 573405774 574221972 574520153 574851835 575478138 576565656 577499829 577829033 577875981 578153605 580147483 581259741 581612808 583099636 583162200 583739723 584036763 584185541 585470892 585644192 586053954 586437206 587545093 588936150 589161304 589742251 589809629 591674871 594699815 595299025 596235533 599100320 599777408 600933177 602007645 602162410 602505974 603550445 604762872 606318105 606938594 607262186 609025981 610720565 611098220 611940789 612342678 613192844 614055756 614677276 616343985 617846506 618341973 619917091 620215473 620314250 621036056 621455854 621899984 621900374 621944551 622471395 626162128 626388988 629346478 630024684 630644520 632975839 637678558 639124538 639457019 640234495 640698525 640784848 641798733 642330665 646400939 646951923 648677556 650965310 651606993 651864809 652236798 652628512 654005001 656429767 657498733 659704816 660417424 660755013 661397820 662740776 663312126 664209084 665059075 666544239 666918700 667889196 668729204 670713140 670798724 671723661 671800818 671845478 672613156 672787510 673084029 673432432 673806536 673919573 674416085 674821253 678122135 678611760 678884964 678906047 679519173 679823315 680144204 680661813 681438339 682453580 682814562 683172499 683381242 685536809 685813384 686179063 688597941 689636950 690292084 692466853 692521162 693029007 696429363 696874476 697681183 698804571 698987079 699187241 699438845 699491891 699690635 700205290 701758742 702213042 703385034 703464209 704942744 705524579 707080990 707211070 707381910 707935550 710153220 711200160 711215213 712057369 712142727 712858359 713103747 713171486 715381578 718744263 719026337 719312532 719911116 719959748 720989244 722132370 723523545 723884819 726016493 726133460 726525114 726878208 726931944 727140975 728340742 730174584 730307987 731699957 732085820 732320550 732940319 734878219 735382216 736092827 737441426 738659460 738953509 739433895 740239172 741015956 742642776 743298083 743493201 743550864 744027711 745373021 745462340 745922726 747510000 748740680 749139748 751445990 751644474 751658179 751977548 752800104 754145429 754780749 756816596 756883512 757529803 758068925 758979275 759508022 759617570 759710863 759756321 759790181 759987436 760216600 760238205 761475173 762047448 762794947 762885897 765265299 765425264 765725636 766106816 766465770 767769835 770018845 773424258 774581791 777276818 777880469 779143582 780117320 780495028 780503587 780606289 781424076 781839630 782805047 782922465 785605764 785799715 786081660 787081916 788180005 788958052 788972434 789628634 789934459 790573268 790720115 791169329 791778777 792397812 793070131 793510316 795093410 795290952 795727646 797391014 797685555 798645520 798786438 798798315 799519512 802735499 806028676 806511116 806801313 807352016 809001777 810126179 810975047 811267130 813128250 815558162 817061750 817922729 818402908 818962178 820148380 822893626 825782667 826736918 826932669 826939008 826998562 827969919 829312891 830474816 831628435 832462409 832792782 833519751 833975460 835853202 836009427 836854771 837165069 837887353 838630630 839040706 839077603 839873630 840043236 841199436 844526086 845276154 846102126 846995803 847440754 850477480 850805296 850805410 851144818 851497360 852215335 852503739 852628226 852907289 853289729 854324316 855304040 855489466 856931646 857245464 857396253 857813792 857842336 858433104 859201018 859624301 860649319 860722318 861223075 861639200 863244855 864218401 864488975 864597687 866892982 867019163 867409370 868330228 868643927 868697815 869328550 869522062 869564643 869687167 871362216 871390827 872202044 873374780 874437469 875759612 876108493 876170194 877049083 879830264 880766808 883263631 884676782 887377112 887960443 888298683 888851055 890203584 891153329 891351498 892123399 892973438 893784780 894644279 895212743 896367038 896923528 896947447 897916720 900416289 900475556 901460447 901890869 903220586 903769924 903781723 903959814 904406332 905180582 905663167 905859474 906337103 906814704 907238028 909594398 912216965 915103595 916351001 917649472 919131970 919383170 919502411 919772261 919907427 920531121 920725657 923638257 924235332 924547085 925484137 925880689 927385848 927484761 927908687 929197488 929701709 931075741 931986585 932197355 932585704 932769080 933329491 933834734 935180912 936379387 937341371 939391769 939659488 942276812 943806308 944714273 945430240 945755512 946274618 946420922 946476606 946598056 946802076 946907337 947576806 947848880 948365891 948681025 948740396 948854349 949345618 950197119 951825879 952143630 954183688 954226247 954433041 954479294 956280692 957414602 957806043 959321083 959598707 963655818 964119664 964254468 964261747 964770321 964885381 966043338 966612634 968874173 969497396 973186863 973656944 973969928 973970939 974923072 975202401 975673207 976843738 979218112 979540695 982307798 983885409 984819232 984934328 985080633 988053978 988944440 989118517 989402872 989551771 990351922 990629155 990986132 991273974 994515529 997109067 997674802 997681504 1001158016 1001702519 1001866233 1003289393 1005252472 1005571685 1006050179 1006080549 1007800346 1008163754 1008925485 1009965261 1010287003 1011304728 1011925071 1012862111 1015488940 1018021931 1018194103 1018317953 1020392263 1020472831 1021152400 1021625085 1021710232 1021874133 1022321274 1022400543 1022687053 1023640332 1023732701 1023752518 1025801675 1025818977 1027286939 1028522361 1030356913 1031241031 1031401520 1031714595 1031803471 1032547899 1036433688 1037733687 1037773309 1040971135 1041051963 1041058040 1042372728 1043405674 1044530072 1044730849 1046433862 1047414384 1048174876 1049276133 1050283538 1050363078 1052120394 1053981218 1054167896 1055474960 1055939888 1056511825 1057242145 1057500279 1057970764 1058765516 1058776837 1058799530 1059207483 1060660630 1061916990 1063820944 1063933687 1065799830 1066028764 1066065803 1066076606 1066434236 1066924035 1067642686 1067646312 1069261308 1069376527 1069392488 1069622161 1070631307 1071561906 1072770583 1073498551 1073667424 1076836013 1077771040 1078599607 1079064231 1079767654 1079967258 1080045408 1080773555 1081875313 1082423869 1083964868 1085454974 1085898776 1086298132 1089659508 1090030511 1090313389 1090623378 1091816223 1092156226 1092689570 1094743818 1095098397 1095620281 1096554733 1097137107 1097617536 1099500667 1100721707 1101830328 1102277128 1104635364 1105020211 1105981172 1106267740 1108795175 1109330922 1110282253 1110499008 1110853381 1111777109 1113180628 1113337601 1114542720 1115120615 1117081826 1117191209 1117607182 1117776183 1120036121 1120164842 1120480230 1121228732 1121534856 1122279334 1122333531 1124315007 1124930553 1125576733 1127085792 1127232456 1127324525 1127718953 1127861898 1128865674 1129813010 1129930175 1130153966 1130894465 1131176389 1131547364 1131786390 1134219021 1136644912 1136788204 1137260029 1138540988 1139402969 1140839106 1141337157 1142081647 1143992679 1146632871 1147015858 1148317886 1152812922 1153095088 1154843768 1155052390 1155487109 1157154220 1158070620 1158559132 1160082040 1161287145 1162861813 1168006899 1168118556 1169540007 1169824912 1171148652 1171842056 1171969751 1172640517 1174155501 1175823871 1176833888 1176864435 1177004817 1178421429 1179291510 1179509779 1180121110 1180425281 1181494295 1183015428 1183647441 1183690347 1184069948 1184482235 1184576944 1184745182 1184835135 1185346629 1189956677 1190039096 1191225040 1196269770 1198591525 1200037375 1201885783 1201912173 1202025046 1203852776 1204308950 1204944147 1205857509 1205944048 1206570129 1207762244 1208067933 1208929733 1210822958 1212325070 1212609295 1213101056 1213376954 1213954097 1215460757 1216914537 1217904370 1218413986 1220062357 1220075298 1220186499 1221177817 1221479855 1223141026 1223179047 1224076616 1225286415 1227036865 1229225509 1230281770 1231013520 1231056523 1232023507 1233601346 1233680509 1234463089 1235292746 1235374932 1235845796 1240129267 1240958278 1241182518 1241344069 1244488847 1244780635 1244977933 1245122950 1245295146 1245381686 1245629689 1246167164 1247547732 1248047193 1248499521 1250552340 1251535292 1253190360 1254572918 1255048070 1255062347 1255474583 1255859383 1257150738 1257196157 1257201703 1257775877 1259550693 1259854924 1259946209 1260705599 1262245781 1262255423 1263285589 1263666177 1264913229 1267972129 1269958420 1270265734 1270836947 1271222707 1271825669 1272343454 1272586535 1273525361 1274118826 1274914754 1275256046 1275522623 1276339693 1276581477 1276909198 1277183492 1279664560 1279995266 1280504443 1281174774 1281419183 1282133773 1282881358 1284368925 1285798063 1287661036 1288359600 1290851283 1291490386 1292991200 1293041658 1295248482 1295520038 1295638872 1296647506 1296720142 1298669658 1300062154 1300245399 1300341537 1300433417 1301998234 1303562063 1305253839 1307165268 1308931211 1310954099 1311000309 1311161367 1313009429 1313666330 1315388321 1315541406 1315625314 1316741817 1317004737 1317106289 1317264442 1318691350 1318961454 1319216138 1320151433 1321448257 1321901549 1323208971 1323335791 1326384147 1326574824 1326605415 1327182709 1328179938 1328450968 1328649023 1328841990 1329352461 1331419122 1331546095 1332489284 1334167471 1334652436 1336563116 1337889164 1338728474 1338804865 1339303916 1339304831 1340578871 1340725650 1342443747 1342727460 1343353111 1343447167 1345898336 1346041748 1346268035 1346385308 1347422800 1348180931 1348196861 1349675787 1349702536 1350489891 1350668705 1350913885 1352661534 1352787008 1352945782 1353415134 1356360734 1358797830 1360043162 1361245769 1363310353 1367563217 1368288954 1369480179 1369858923 1371519270 1371720028 1372029965 1373016472 1374350812 1374403303 1375057953 1375124011 1375828690 1378610252 1379420073 1380901578 1382271695 1383301430 1383525777 1384070145 1384692048 1385490356 1386175726 1386292645 1386430065 1387769503 1387786133 1389699069 1391674862 1391870952 1392822318 1393493908 1393809285 1393928328 1395315874 1396583948 1396780215 1398155761 1398190315 1398266025 1399861104 1400175586 1400457081 1401742515 1402385295 1403251953 1403808876 1404703077 1406516573 1408693789 1409042979 1409076255 1409607849 1410177406 1411371746 1412190192 1412668452 1414468419 1415583447 1417059391 1417843720 1417963863 1419925095 1420609119 1422075515 1423541851 1424111725 1425699063 1426157780 1427327206 1429008060 1430409840 1430520969 1430838334 1432748366 1433140218 1434230770 1434600398 1435023871 1436964819 1437131563 1437630011 1437762796 1438722553 1439509459 1439885077 1440009884 1441103658 1442113595 1444011340 1445747632 1445903252 1446578934 1448841589 1450056554 1450996763 1451663195 1452127903 1452159665 1454563119 1458009108 1458108620 1458199244 1458537257 1459077615 1459194767 1459377507 1459505857 1461828987 1462772395 1464182090 1465122189 1465739755 1467163162 1469367498 1470341640 1470862982 1471846502 1472663980 1474025639 1474278856 1474667176 1475787137 1476038033 1476462094 1476920471 1477226768 1478222797 1478568323 1478576931 1479818316 1480009214 1480503859 1480721521 1482254520 1484151864 1485610533 1486049428 1486433540 1487118899 1488029389 1488140659 1488877286 1489216942 1489732089 1492436676 1493044256 1493261282 1493736414 1494187222 1494433620 1494452538 1494607233 1496710921 1498132901 1499176748 1499647254 1499858022 1500627705 1501187419 1502801056 1505525641 1505736442 1506861211 1508630821 1508695550 1509097722 1510055750 1512385388 1512580056 1512762511 1515447076 1515539084 1517081729 1518782990 1518909992 1521096373 1521222859 1521515252 1524332732 1525790392 1526357438 1526485832 1527072671 1528694292 1529466722 1530221354 1530939192 1531455779 1531519239 1531743217 1532382236 1533564475 1533762624 1534735921 1534842307 1535749713 1539924847 1541151749 1542490808 1542884108 1543011690 1545676648 1546303100 1546328316 1546761060 1547612340 1547626161 1548425314 1548562083 1548674107 1549582459 1552537753 1554496716 1555647811 1555937965 1556615965 1557272932 1558761410 1558916359 1559036730 1559864089 1560148554 1560413865 1561210706 1562966618 1563174793 1563556443 1563741457 1563895147 1564722655 1565360271 1566088188 1566312370 1566723136 1567153174 1567851892 1569114214 1570317177 1570671694 1573171802 1573418050 1574375960 1575576641 1577157575 1577313017 1577473806 1577739393 1577995409 1578062560 1579008973 1579030896 1579881226 1580238489 1580324943 1580351593 1580614725 1580938099 1582723091 1583296258 1583908197 1584526046 1585105783 1586643563 1589333295 1589357732 1590682582 1590791920 1591496090 1591534906 1591712587 1593292429 1593309753 1593441180 1595558019 1595791756 1596010634 1597573292 1601663592 1603443457 1604226014 1604742461 1604884588 1605328721 1609093462 1609316210 1609756130 1609838757 1610050737 1610349631 1611335853 1611575956 1611756010 1612843565 1612911170 1613581676 1614997649 1616408332 1616888092 1618001500 1618312016 1620270183 1621810928 1621950077 1622413998 1623345825 1623975576 1624972170 1625267184 1625394052 1626266336 1626446291 1629353464 1631184807 1631345209 1632303086 1632890439 1633310488 1634727348 1634955412 1636466949 1636948806 1638067311 1638134454 1638434763 1640368604 1640411460 1641650940 1641996286 1642029912 1642067220 1642682985 1644995125 1645338951 1647505208 1650464115 1650716486 1651215832 1651329319 1651727781 1651926688 1652617599 1655394124 1655821201 1655895336 1655971657 1656549322 1657513690 1657958648 1659651569 1660745937 1660909587 1661319533 1661344783 1662913471 1663191624 1663872430 1664417811 1664946891 1665345672 1666392269 1667090413 1667302418 1668522860 1675230999 1676695388 1677234195 1677522107 1677723445 1678586008 1678954898 1679179917 1679752138 1680264851 1681397467 1681423100 1683715754 1684493011 1684517311 1685130557 1686742483 1687934825 1688073178 1688399817 1689358185 1690312310 1690634582 1694403001 1695733836 1697154099 1697590091 1698013848 1699033999 1699251162 1701100548 1702443859 1702609691 1703461632 1704128789 1704132688 1707083561 1708829488 1710619104 1710825713 1711147083 1714535794 1715156170 1715435112 1715501397 1715813700 1716282367 1716335988 1716575078 1716636001 1717938815 1718711797 1720136382 1721719987 1721798865 1721908400 1722528126 1722547107 1725424582 1726007288 1726269398 1726571013 1727449788 1727560740 1728108522 1728143332 1731008485 1733245093 1734946533 1735091516 1736350516 1736511143 1737067549 1737810116 1737968870 1738449531 1738558758 1739165509 1739547501 1740323818 1741110775 1741351072 1741967779 1742208031 1742242296 1743721909 1745159363 1747993734 1748025263 1749009470 1749706309 1750815964 1751118707 1751969119 1754256945 1754395968 1755593304 1757873439 1758322591 1758792052 1761356105 1761580440 1762024443 1764026813 1765992035 1767357697 1767765108 1768396531 1768915725 1769067935 1769317554 1769642898 1770427284 1771035379 1772264376 1772328366 1772740117 1773901305 1775316279 1775343430 1775542690 1776157326 1777297559 1777436134 1777619097 1777651346 1778996545 1779188726 1780142731 1781072440 1781119805 1781168801 1781196601 1781865542 1783107681 1783907326 1784134434 1784194138 1784405491 1784682460 1784702282 1785609685 1786836859 1788039921 1788340258 1788506879 1788846843 1791334423 1791350588 1791548078 1792884140 1793014228 1793692145 1795352283 1795957878 1796020547 1796166256 1797709169 1798825618 1799081529 1799198768 1799885045 1801030018 1801052373 1801507986 1801530091 1802636980 1802702118 1802784539 1803228973 1803253055 1804119746 1804156306 1804592742 1805006865 1806275061 1807340617 1807358893 1808146706 1810497917 1811143555 1812629419 1812742002 1814346103 1815211740 1815938773 1816197981 1818026785 1818209190 1818221292 1819674588 1820537341 1821316574 1821339972 1822343933 1822460548 1822631869 1823753766 1824017998 1824146894 1824791320 1826322562 1827734748 1828320705 1829813616 1830820091 1831187526 1831681955 1831754788 1831992831 1832305563 1832980033 1835802420 1836991634 1837091769 1837804391 1838499669 1839754109 1840000349 1840077369 1840854571 1842414090 1842830575 1844914859 1845240208 1845668650 1846051866 1846644877 1846939446 1847460730 1848719499 1849644598 1850171049 1850778960 1850986411 1852720449 1853385812 1853776142 1854307730 1854614637 1856812184 1858712817 1860696432 1861009905 1861280640 1861987844 1862226752 1866227980 1866773439 1866936087 1867630366 1869406713 1869906005 1871397805 1872938158 1873694501 1874378673 1877203630 1880991799 1882430816 1884077793 1884693101 1885276584 1886543512 1887184535 1888074358 1889251813 1889595818 1889659731 1889954675 1891557046 1891769672 1892468099 1894017154 1894411138 1895635567 1895671104 1896119354 1896690784 1897435065 1897766918 1898079881 1898176356 1898714997 1899488138 1902060562 1902779489 1903896093 1907024712 1907208608 1907594314 1910959127 1911174411 1911233593 1912352941 1912722554 1913048843 1914661347 1917853506 1918253653 1918581651 1919365311 1919481495 1920712698 1920969492 1922614554 1923066838 1923706971 1924533524 1925176185 1925376392 1926669925 1927172714 1927905665 1928234608 1929357691 1930889974 1932145487 1932358067 1933383865 1935534267 1935940507 1936357595 1937703799 1938217869 1939381562 1940915346 1942392213 1943589452 1944045639 1944169897 1945604130 1946765566 1947866872 1948175114 1948357158 1948638137 1949389595 1950842145 1951969761 1953707388 1953739106 1953826022 1954786803 1956502604 1960098313 1961102636 1962866618 1965013678 1965560729 1967670504 1968944055 1969028618 1970123530 1970277280 1970451336 1970570938 1970720645 1970958555 1972696614 1974486192 1975628379 1975787468 1976713509 1976888390 1977017670 1977314573 1977871757 1979867819 1980670888 1983300031 1986272328 1986681533 1986836578 1987007395 1987194158 1987436095 1988932421 1990004805 1990484998 1992032404 1992044489 1993725153 1995713940 1999063687 1999443744 1999810113 2000808988 2001174932 2002846524 2003389516 2003741359 2005204298 2005694369 2008013010 2008274570 2011607440 2011626622 2011806822 2012810437 2014778187 2015256537 2016911152 2018707466 2018721902 2024126610 2024613020 2025607335 2026136277 2026875449 2029981708 2030298194 2030818736 2032410120 2033572615 2034524337 2034564677 2034969859 2043505780 2044337092 2044609771 2044684842 2046116930 2048709082 2049061735 2049635434 2054345824 2054623853 2055631128 2057401173 2058496059 2059381140 2060272148 2061242503 2062887686 2064562056 2064878564 2064994081 2065302322 2065919364 2066257509 2066478556 2068616108 2069052131 2069688731 2070105984 2070277496 2072430635 2072962517 2075094216 2080187243 2080653184 2080718620 2080891502 2081347655 2082262170 2083608713 2083685589 2084942558 2087471034 2087753894 2088806652 2089278079 2090326568 2094795049 2095468599 2095665903 2096741733 2097138124 2097893721 2099095781 2099525502 2099714964 2099896500 2101372965 2101590659 2101806319 2102231276 2102745347 2102993555 2103596550 2105292165 2105873271 2106345801 2106859733 2108702545 2110113118 2110517560 2110910534 2111308339 2111915328 2112019959 2113177546 2113529436 2114286379 2114382114 2115127239 2115310326 2116086578 2118044592 2118351377 2118581751 2118858138 2119179560 2119450079 2119724025 2125581299 2126774143 2127386556 2127420090 2127492504 2127590450 2130340961 2130448458 2131035514 2131127794 2131332005 2131598405 2133179868 2134494269 2135693162 2136397164 2138031716 2138938211 2139370163 2139453700 2139461799 2140105053 2140332595 2140601740 2141065921 2141096469 2141213585 2142633112 2146540120 2146781081 2147251138 2147310763 number of comparisons: 6281015 number of Swaps: 4999 . Analyze the Big O complexity on Sorts.(Merge Sort) . Results: | . time to sort number of comparisons number of swaps . 0.5s | 55255 | 61808 | . 0.5s | 55295 | 61808 | . 0.5s | 55229 | 61808 | . 0.6s | 55181 | 61808 | . 0.7s | 55241 | 61808 | . 0.5s | 55275 | 61808 | . 0.5s | 55187 | 61808 | . 0.6s | 55197 | 61808 | . 0.5s | 55204 | 61808 | . 0.5s | 55211 | 61808 | . 0.5s | 55271 | 61808 | . 0.5s | 55228 | 61808 | . Average Result ( throw out High and Low ) : | . time to sort number of comparisons number of swaps . 0.52s | 55229.8 | 61808 | . Big O complexity: Overall time complexity of Merge sort is $O(nLogn)$. It is more efficient as it is in worst case also the runtime is $O(nlogn)$ The space complexity of Merge sort is $O(n)$. This means that this algorithm takes a lot of space and may slower down operations for the last data sets | . int numOfComparisons = 0; int numberOfSwaps = 0; public static void merge(int[] a, int[] l, int[] r, int left, int right) { int i = 0, j = 0, k = 0; while (i &lt; left &amp;&amp; j &lt; right) { if (l[i] &lt;= r[j]) { numOfComparisons++; a[k++] = l[i++]; numberOfSwaps++; } else { numOfComparisons++; a[k++] = r[j++]; numberOfSwaps++; } } while (i &lt; left) { a[k++] = l[i++]; numberOfSwaps++; } while (j &lt; right) { a[k++] = r[j++]; numberOfSwaps++; } } public static void mergeSort(int[]myArray, int index){ if (index &lt; 2){ return; } int middle = (index)/2; int[] leftArray = new int[middle]; int[] rightArray = new int[index - middle]; for (int i = 0; i &lt; middle; i++) { leftArray[i] = myArray[i]; } for (int i = middle; i &lt; index; i++) { rightArray[i - middle] = myArray[i]; } mergeSort(leftArray, middle); mergeSort(rightArray, index - middle); merge(myArray, leftArray, rightArray, middle, index-middle); } Random num = new Random(); int[] tester = new int[5000]; for (int i = 0; i &lt; tester.length; i++) { tester[i] = num.nextInt(); // storing random integers in an ArrayList } mergeSort(tester, tester.length); for (int i = 0; i &lt; tester.length; i++){ System.out.print(tester[i] + &quot; &quot;); } System.out.println(); System.out.println(&quot;number of comparisons: &quot; + numOfComparisons); System.out.println(&quot;number of Swaps: &quot; + numberOfSwaps); . -2147312540 -2146493879 -2143269551 -2141937829 -2141060602 -2139151251 -2138889600 -2138707903 -2138354207 -2137564423 -2137326742 -2136966890 -2134791589 -2134052372 -2131866611 -2131616308 -2130565670 -2129288269 -2129284631 -2129116031 -2128418210 -2126730376 -2125828661 -2124288493 -2122826835 -2121943438 -2118844742 -2118068191 -2117369658 -2116871156 -2116376453 -2115682473 -2115677669 -2113436100 -2112008098 -2111714239 -2111703005 -2111066967 -2111009790 -2107978611 -2107436741 -2106319290 -2106184170 -2105878247 -2105401664 -2104733690 -2104651142 -2104086009 -2104083945 -2103881704 -2101942936 -2100655466 -2099642503 -2099187529 -2098122839 -2097042205 -2095783100 -2095697789 -2094993476 -2093553331 -2093401254 -2092309062 -2092129887 -2091073323 -2091060746 -2090877547 -2090482744 -2090272400 -2089220362 -2087702523 -2085883718 -2085019605 -2084310920 -2083965238 -2083587194 -2082873151 -2080678132 -2076749585 -2075611973 -2075139776 -2074999203 -2073489331 -2073471473 -2070035242 -2068691918 -2068441017 -2067993306 -2067153463 -2066951641 -2066452550 -2065972620 -2065624049 -2064932997 -2064797309 -2063470184 -2062775855 -2062717877 -2062057670 -2061979166 -2061312384 -2060302116 -2059449363 -2058037915 -2057621674 -2057376745 -2056884516 -2055999555 -2055874214 -2052826472 -2050217688 -2048235702 -2047471558 -2047373363 -2046464219 -2046310004 -2045934218 -2045555353 -2042604861 -2040323113 -2038843978 -2037717375 -2037097412 -2036812049 -2036159401 -2035907699 -2035219425 -2035184118 -2035018706 -2034243406 -2034088793 -2033143071 -2030232400 -2029426686 -2029355073 -2027777373 -2027430162 -2025821035 -2025155527 -2025130753 -2025007551 -2024336950 -2023562338 -2020877101 -2019722856 -2019581149 -2017175503 -2015384851 -2014958281 -2014535848 -2014274046 -2012945371 -2012182271 -2011327190 -2010529159 -2009718693 -2009656377 -2006772137 -2006474073 -2006149226 -2004262062 -2003529032 -2002348289 -2001420122 -1999132570 -1998415290 -1998394012 -1998358679 -1998216460 -1996247279 -1995090640 -1993004762 -1992897177 -1991247150 -1991113883 -1990122922 -1989591236 -1989321202 -1989014058 -1986954980 -1985991380 -1985284357 -1984645413 -1984488122 -1984265398 -1982135165 -1981235213 -1981217347 -1980508034 -1979205014 -1978123946 -1977945095 -1975320691 -1975201634 -1974867623 -1974785649 -1974224337 -1974127810 -1973882942 -1972741380 -1972156538 -1970568697 -1969856465 -1968938914 -1966972039 -1966087815 -1964900265 -1964549552 -1964252231 -1963349102 -1960406386 -1959681136 -1959275573 -1958034280 -1957776495 -1956567298 -1955918620 -1955740861 -1955661431 -1955429761 -1954296439 -1953585135 -1952525099 -1952053880 -1950896889 -1949328000 -1948785137 -1946802168 -1946160319 -1944262477 -1944159006 -1943863407 -1940884636 -1940237530 -1938532916 -1937867479 -1937824244 -1936215602 -1934859098 -1934845631 -1934839223 -1934818918 -1934186646 -1934155016 -1932904566 -1932694664 -1932493470 -1931955248 -1931692015 -1930356554 -1928103488 -1927348744 -1926893209 -1926473192 -1926277458 -1925276838 -1923547579 -1922400187 -1921829627 -1920761805 -1919244553 -1918367507 -1918001411 -1916429776 -1916005528 -1915159005 -1914047405 -1913942883 -1912502904 -1911220937 -1908514365 -1906501770 -1905744816 -1904001769 -1902405063 -1901897753 -1901295991 -1901155354 -1900666978 -1899329661 -1898424485 -1897508905 -1897421478 -1896995475 -1896681746 -1895776410 -1895579066 -1895012814 -1894362711 -1892874660 -1892746066 -1889514597 -1888171979 -1887995819 -1887107634 -1884645312 -1884558540 -1883864506 -1883408308 -1883352546 -1883235443 -1882516579 -1882510435 -1881002086 -1878558635 -1877527145 -1877496323 -1877356496 -1876888594 -1876684289 -1875922849 -1875472041 -1875307318 -1875111002 -1875005443 -1874905946 -1874355549 -1873953941 -1872825697 -1870327399 -1869783693 -1868705640 -1868066150 -1868039442 -1868034423 -1867886154 -1865910475 -1865885901 -1864928222 -1864509580 -1864311499 -1859445104 -1859061651 -1854358405 -1853110580 -1850659774 -1850336158 -1849554199 -1848872165 -1848822247 -1846152997 -1846065836 -1845852944 -1843539969 -1843123322 -1842871374 -1839473308 -1837975034 -1836921600 -1836380461 -1832719151 -1832230341 -1832056287 -1830742964 -1830366211 -1825945473 -1824629860 -1823246424 -1823201017 -1822776754 -1821753556 -1819926984 -1817778873 -1816992625 -1816174171 -1815469055 -1815131408 -1814873512 -1812474230 -1812091964 -1810314352 -1808527821 -1807700300 -1806906958 -1804903021 -1804790208 -1804743077 -1804446290 -1803875110 -1803712700 -1803686161 -1802899620 -1802534959 -1801992260 -1801626821 -1800042853 -1798943707 -1797210510 -1797063932 -1794897965 -1794327792 -1794141616 -1792924942 -1792438075 -1790499977 -1790301376 -1789790396 -1789523254 -1787907298 -1787447537 -1784934413 -1783759687 -1783657990 -1782395664 -1782329795 -1782042714 -1781465040 -1780544168 -1780520696 -1778473309 -1778290902 -1777446629 -1776779011 -1776439574 -1776045852 -1775140990 -1774981704 -1773704710 -1773039484 -1772109372 -1771887284 -1769750163 -1769469247 -1767251602 -1765674531 -1765378029 -1765336802 -1764770799 -1763892090 -1763573833 -1763487673 -1760915866 -1759392967 -1759022824 -1757843180 -1756343779 -1755952883 -1755488573 -1753834179 -1753801676 -1753780678 -1752897852 -1751778322 -1751615355 -1751044176 -1749851798 -1749568432 -1749143643 -1749061032 -1747849613 -1747798863 -1747145824 -1747019137 -1746984103 -1745956586 -1745955511 -1745714103 -1743961707 -1743198988 -1742051273 -1741267533 -1740232193 -1739766074 -1739739686 -1739362521 -1738916384 -1737261611 -1736398371 -1735047017 -1734675518 -1734389935 -1734154931 -1733975244 -1732955115 -1732443149 -1729947234 -1729472870 -1728721075 -1728399342 -1727947560 -1727708868 -1727582119 -1726966236 -1726868122 -1726574710 -1724732619 -1724342241 -1723327211 -1723175610 -1721672184 -1721444205 -1721372394 -1720870433 -1720606290 -1719964902 -1718701620 -1717313446 -1716347109 -1716004292 -1713843926 -1713386546 -1711588637 -1709656851 -1709315063 -1707202167 -1706812090 -1705486955 -1704461396 -1702843081 -1702231912 -1702035501 -1701990810 -1701845517 -1701680058 -1701446449 -1700946703 -1700721541 -1699667643 -1699450479 -1698855019 -1698437851 -1697761421 -1697017480 -1696433688 -1696130336 -1694557054 -1693879986 -1693493024 -1693093675 -1691987964 -1691827646 -1690168136 -1688589784 -1688148384 -1687416814 -1686331761 -1684868719 -1684517275 -1684112757 -1682682785 -1682627177 -1682315740 -1682313620 -1682258225 -1678891665 -1678463208 -1678219998 -1676267690 -1675250941 -1672193512 -1670063265 -1669534433 -1669019518 -1668977592 -1667805525 -1665637027 -1665516753 -1665228141 -1664247095 -1663515351 -1662714677 -1662468275 -1662159211 -1660850031 -1660519800 -1660504698 -1659201790 -1658088873 -1657417904 -1655934368 -1655887739 -1655755808 -1654428694 -1653227281 -1653075398 -1652996157 -1652893245 -1651991254 -1650711866 -1650362321 -1648316810 -1647545531 -1647075446 -1646884089 -1646170163 -1645934018 -1644004573 -1642325051 -1641379582 -1638647741 -1637646996 -1636857328 -1636442110 -1635514686 -1634294340 -1632850120 -1632021771 -1631396481 -1628705723 -1628163274 -1627898725 -1626739608 -1626353332 -1624695991 -1623889268 -1622807757 -1622693462 -1619370197 -1616539175 -1616243587 -1616047728 -1615914646 -1614758965 -1611106733 -1610811798 -1610353429 -1607726637 -1607350148 -1605700320 -1604763576 -1604364441 -1602787802 -1602752169 -1602720469 -1602700064 -1602026536 -1600804329 -1600669617 -1600543965 -1600057364 -1599693402 -1599506071 -1599247810 -1598679588 -1598061885 -1597593523 -1597169296 -1596965187 -1596661159 -1596299012 -1593061148 -1592583330 -1589295200 -1588355464 -1588198069 -1588096043 -1586806496 -1586804233 -1586755550 -1584918615 -1583801013 -1583597151 -1581779444 -1581663489 -1581300045 -1580891367 -1580506176 -1580332195 -1579905349 -1578626885 -1575330433 -1575163579 -1574003698 -1573546675 -1571361416 -1570833464 -1569956068 -1569496392 -1569431406 -1567821960 -1566516229 -1565234744 -1565023000 -1564943387 -1564451012 -1562853081 -1561404566 -1560365593 -1559914912 -1559894786 -1559804754 -1556325269 -1555512930 -1554614847 -1553683948 -1553325525 -1552568466 -1551882220 -1550979075 -1550368826 -1549812637 -1548892515 -1547569780 -1547259708 -1546392174 -1541887934 -1541362013 -1541204288 -1540583654 -1539354784 -1538428848 -1538040167 -1537511063 -1535451599 -1533415145 -1531938087 -1531709536 -1525536994 -1525450225 -1521123020 -1520228489 -1520121774 -1519828724 -1518016520 -1516192247 -1513435352 -1511889816 -1511303222 -1510816286 -1510333637 -1508653162 -1507406063 -1506348533 -1506255355 -1504717928 -1502503043 -1502010520 -1501681118 -1500819735 -1500758551 -1495247273 -1493762018 -1492352896 -1492244542 -1491293342 -1491170725 -1491072973 -1490798839 -1490650527 -1490364321 -1487475849 -1486771062 -1486146566 -1485817562 -1484797714 -1484778378 -1484050702 -1481349415 -1480267578 -1480037531 -1479597283 -1479028023 -1478892509 -1478788875 -1478635761 -1478496750 -1478361910 -1476737059 -1474597321 -1474520636 -1473917950 -1473056306 -1471639266 -1470699574 -1470576754 -1470150656 -1468291110 -1468003227 -1467158154 -1466460105 -1466411676 -1465870944 -1465748448 -1465493017 -1464375055 -1463484600 -1462900539 -1461587468 -1461498624 -1460832367 -1460445204 -1459417932 -1459179228 -1458154149 -1458046623 -1457807834 -1457269045 -1457086393 -1456779838 -1456332029 -1455414824 -1454742212 -1453228198 -1452634004 -1451647168 -1448545810 -1446069406 -1444303465 -1444054913 -1443534631 -1441935447 -1441801443 -1441794955 -1441777520 -1441598698 -1438876176 -1437995591 -1437612480 -1437274377 -1437210776 -1436209647 -1435315159 -1434616357 -1434461303 -1433520725 -1433463197 -1431380048 -1429841193 -1429616657 -1428843634 -1427999605 -1427846672 -1427632682 -1426869708 -1426306867 -1425909843 -1425682864 -1425480082 -1423934489 -1422963348 -1421218909 -1420737261 -1420254863 -1420221449 -1419542039 -1419174278 -1418738182 -1417052445 -1416543065 -1416188499 -1414927890 -1413683698 -1412591955 -1412213985 -1410052563 -1408518984 -1408265680 -1408167298 -1407964176 -1405747883 -1405556071 -1404472860 -1404342329 -1403694966 -1402055911 -1401570167 -1400266814 -1399587261 -1397640270 -1396866624 -1396846722 -1395376460 -1395144246 -1394696948 -1394634381 -1394569204 -1393522980 -1392750874 -1391484457 -1389337929 -1389036129 -1388426473 -1388318299 -1386778452 -1384809675 -1384771894 -1384406514 -1383301047 -1382965441 -1381819307 -1381029850 -1380266954 -1379296711 -1379034763 -1377952201 -1377104340 -1376638122 -1375830550 -1374542136 -1373143254 -1371901359 -1371873668 -1370545321 -1369208189 -1367907421 -1367241648 -1367233462 -1364986522 -1364677741 -1363932228 -1362265128 -1362125290 -1361778477 -1360934593 -1358265599 -1358107768 -1356527173 -1355175421 -1354765937 -1352139806 -1351245175 -1350606705 -1350589986 -1350349854 -1349652466 -1346637191 -1346559875 -1346285756 -1345690426 -1344733605 -1344396872 -1340990651 -1340558120 -1340492735 -1340201058 -1338909911 -1337998607 -1337332556 -1336318855 -1335806937 -1335525813 -1333875197 -1333223257 -1333115426 -1332512699 -1329786411 -1329520692 -1329454753 -1329175223 -1328479117 -1327757279 -1327280222 -1327123772 -1326449259 -1325608533 -1325533969 -1323141195 -1322018039 -1320468141 -1320157584 -1319766804 -1319199362 -1319062934 -1317637804 -1316707731 -1314533215 -1314312110 -1314184292 -1313887593 -1313771655 -1313097798 -1311967901 -1308505470 -1307664644 -1306467059 -1305310826 -1304918300 -1304854910 -1304577007 -1301480234 -1299415728 -1297444096 -1297117946 -1296993301 -1296507651 -1294983912 -1294838009 -1294404363 -1293604631 -1292977876 -1292119382 -1290550203 -1289492330 -1288814157 -1287913725 -1285844502 -1284212128 -1283732118 -1281360164 -1281298605 -1280550921 -1276992484 -1276551153 -1275076647 -1273322647 -1272464046 -1272459370 -1272410350 -1272370418 -1271430718 -1271298194 -1271045891 -1270737162 -1269773184 -1269614026 -1267791188 -1267617514 -1266964063 -1266406189 -1264601445 -1263664528 -1263439517 -1263121460 -1261418323 -1260797621 -1260706982 -1259322196 -1258597010 -1257906040 -1256073336 -1255271612 -1254362086 -1253793601 -1253717727 -1252603020 -1250670602 -1249662568 -1249367121 -1248848820 -1248493152 -1248079342 -1247762388 -1247491852 -1246327885 -1246223933 -1246153220 -1245665215 -1244927632 -1241025450 -1240938774 -1240841939 -1240782236 -1239064004 -1238551973 -1237531133 -1235354443 -1235107456 -1234593879 -1233420460 -1233178801 -1232478216 -1230733949 -1230295721 -1229626253 -1229353812 -1228775220 -1228764958 -1228700679 -1228336517 -1228239530 -1226756408 -1226736119 -1224424005 -1220326138 -1220231276 -1220032368 -1219796929 -1218848272 -1218563029 -1217762808 -1216419339 -1216406645 -1215952632 -1215649676 -1215412163 -1214050334 -1214017464 -1213914536 -1213691814 -1212369690 -1211920140 -1210704022 -1210419111 -1210350102 -1210056146 -1209593253 -1208578711 -1208353610 -1207811854 -1207156886 -1205788531 -1205367620 -1204631735 -1203481391 -1203274385 -1203117639 -1202970229 -1202922162 -1202907558 -1202766804 -1202758847 -1202743303 -1202614166 -1201616512 -1200410081 -1200232150 -1199388275 -1198772951 -1198737941 -1198722609 -1196979381 -1196234440 -1195047131 -1194734108 -1194159121 -1193410469 -1193196777 -1192456334 -1192316997 -1189720543 -1189164550 -1186626885 -1186076529 -1184731622 -1184607452 -1182681745 -1182656097 -1182579601 -1181900076 -1180883613 -1180410985 -1178732091 -1178190851 -1177466924 -1177448101 -1177437475 -1175541024 -1174066767 -1173363513 -1173055241 -1172760737 -1170632084 -1169812628 -1168151876 -1167740634 -1167681587 -1167007981 -1166809307 -1166473691 -1165958756 -1164154112 -1163526485 -1161311686 -1161226419 -1161127255 -1160408274 -1158850541 -1157517289 -1156804519 -1156365607 -1155486625 -1153697984 -1153545267 -1153391137 -1151157386 -1150590527 -1149674699 -1149153328 -1148874747 -1147135270 -1146999708 -1146688466 -1143179009 -1140983465 -1140207454 -1140120268 -1139942033 -1138979173 -1137833394 -1136653862 -1135007731 -1134523963 -1133874309 -1133393992 -1132964766 -1132717592 -1131841020 -1130576668 -1130441107 -1130256993 -1129348654 -1127477619 -1126819108 -1125710453 -1124563950 -1123649567 -1121810753 -1121746755 -1118780365 -1118544415 -1116849352 -1112930336 -1112835825 -1112799326 -1112686431 -1112487097 -1111889144 -1111708837 -1109817977 -1109325788 -1108102606 -1107575008 -1106327934 -1106295527 -1106235728 -1104761225 -1102927059 -1100953485 -1100269078 -1099945099 -1098837587 -1098570271 -1097937923 -1097077513 -1097040037 -1097010598 -1095044409 -1092517355 -1092240256 -1088952373 -1088127100 -1086661376 -1086125954 -1085667373 -1084401123 -1084204482 -1084162635 -1082672538 -1081756684 -1081489893 -1081393084 -1081261249 -1080609258 -1077459161 -1076980829 -1076224938 -1076126688 -1075269569 -1073114983 -1072042997 -1071843682 -1071409472 -1071008705 -1070967070 -1070538382 -1069512886 -1069180053 -1068715253 -1068079247 -1068023777 -1067154857 -1066963543 -1066778955 -1066332954 -1065754648 -1065329643 -1061959204 -1060808390 -1060280947 -1060214717 -1059593401 -1058666828 -1058198136 -1056685086 -1053763302 -1052619880 -1051985787 -1051962284 -1050524844 -1047335953 -1046491375 -1045680597 -1044738282 -1044563227 -1044165353 -1043641973 -1043116754 -1042946355 -1042112742 -1042074157 -1041875320 -1038655697 -1038314851 -1037798808 -1036862820 -1035216995 -1035035148 -1029914627 -1029729742 -1029469335 -1029454017 -1027492789 -1026718479 -1026697903 -1025826492 -1025024669 -1024946071 -1024671206 -1024122006 -1022196669 -1021089491 -1020740073 -1019512272 -1018985432 -1016073446 -1015153797 -1013687837 -1012309878 -1011685578 -1011592505 -1011161781 -1010100589 -1006614647 -1005628401 -1003486342 -1003405433 -1002725405 -1001902161 -1001565716 -999561245 -999535843 -999496052 -999350804 -998992223 -998396169 -998362004 -994616462 -990009582 -989780847 -989754639 -989501775 -989397199 -988802821 -986821840 -985034586 -984119567 -982589179 -981094662 -980998192 -979590173 -976335215 -975997643 -975537896 -972821539 -971380806 -968261895 -966825068 -966792376 -966673377 -963852615 -962104195 -960691279 -960558399 -959750902 -959058470 -958195809 -955558549 -954118388 -953303184 -952775993 -950670791 -950469283 -950191029 -949750582 -949541726 -949495319 -949096502 -948885638 -948638321 -948299274 -947852320 -947461888 -945389749 -944872532 -944268867 -944206037 -943947930 -943002909 -942475280 -939509648 -938700613 -938160664 -936433580 -935576987 -935377290 -933608563 -933383946 -933362313 -933313814 -932353339 -932119758 -930730288 -929823612 -928901874 -928346989 -928138907 -927464964 -927297229 -926402217 -920650478 -920400465 -918698679 -918472576 -918265264 -917533993 -916664327 -916227532 -914367891 -911663111 -911543728 -909418341 -908150863 -907506960 -905353585 -904702928 -903364935 -902841433 -902807027 -900313349 -899236513 -899057235 -894155087 -893828427 -893580667 -893331096 -892679244 -892094492 -891530554 -890917637 -890808014 -890312107 -889367260 -888357753 -886834754 -886070163 -884812059 -883819073 -882976656 -882171778 -881979329 -881521760 -880845653 -880653437 -879825067 -879524669 -879190569 -876341085 -872793777 -872275773 -871439082 -870665184 -870180939 -866864416 -864837394 -864741478 -863919658 -862887831 -862827192 -861306311 -860451073 -858998090 -858313841 -858273156 -857475804 -856016177 -855146708 -853513108 -852985846 -852001783 -851859876 -851403525 -851259175 -851049710 -849700848 -848119238 -847183232 -845760921 -844764376 -844735584 -843011246 -841891634 -841728653 -840674206 -839487075 -838268442 -837989320 -837112198 -837047723 -836886757 -836227160 -835753437 -834928802 -832943508 -830194925 -827642621 -827086220 -826922333 -826835623 -826048988 -825368805 -824996058 -824889439 -824166274 -823985492 -823772918 -823355758 -822368672 -821693997 -821581162 -821435889 -821298175 -820519618 -818981733 -818884974 -818262526 -817769268 -817605772 -816190481 -815802661 -814264478 -813941842 -812321234 -807977874 -805762321 -805097097 -803478060 -800641661 -800247153 -798994729 -797584797 -797142367 -795287586 -794092100 -793842105 -793178306 -791867757 -791812178 -791675736 -791510687 -791300505 -790697855 -790368579 -790304374 -790165360 -789889642 -789336690 -788870301 -787698423 -786174423 -785579335 -785415067 -784837656 -784399138 -783182763 -782791061 -781756910 -781530234 -779386602 -778057466 -777563687 -777217287 -774806939 -774226351 -773880261 -771806953 -769732949 -767382880 -766691912 -765761298 -764844844 -764720240 -764564879 -763783115 -763551303 -763243881 -758535594 -757435156 -757206898 -757198520 -757033333 -755435692 -755009570 -753736664 -753371834 -753073997 -751557134 -750912554 -750703165 -749066254 -748917407 -748113028 -747040932 -745267058 -744988058 -744285443 -743435071 -743233996 -742001825 -740376636 -738935964 -738414068 -738093998 -736473730 -735811231 -732398276 -729017387 -728053615 -727118644 -726852778 -726440374 -725680830 -725359912 -724397313 -724255839 -723441668 -721477023 -721299469 -721036226 -720946160 -719757197 -719499469 -718801981 -717583212 -717198572 -716220986 -716111896 -715845392 -715730345 -715296479 -714854188 -713708305 -707678123 -707508530 -706490693 -706372953 -703066323 -702663376 -700600086 -699653742 -699024159 -699013558 -698979038 -698134216 -697562038 -697225430 -696470580 -696413288 -694932030 -694323194 -694091174 -693446805 -691937490 -691497848 -690503372 -688851240 -687656317 -687467038 -687464595 -686593189 -686357728 -685249402 -684363572 -684288379 -684192713 -684188130 -683712799 -682582275 -678836914 -677223935 -675091465 -674331372 -673538783 -673296954 -672518131 -670885278 -669465406 -669092501 -668526482 -668315460 -667312355 -664513593 -663410585 -661424452 -659757259 -659419095 -658664659 -658055338 -656660342 -656532894 -656474531 -656100801 -655948271 -654119006 -653903910 -653607025 -652529487 -652300308 -652132955 -651800286 -650654593 -650261097 -650071349 -649969746 -648412669 -648218090 -647556984 -646373565 -645998433 -644716070 -643199225 -642392574 -641507032 -641480872 -641081358 -640888740 -638996267 -638766315 -637056634 -635440376 -635373789 -634989092 -634549241 -634339549 -633952622 -632938869 -632469440 -628309875 -627761203 -626713462 -625758091 -625300034 -624923919 -624595257 -624331262 -624153744 -624004020 -622033291 -621025929 -618722898 -618643239 -618538260 -618397022 -616630847 -616466218 -614793990 -613796901 -612433753 -611663382 -611591245 -610940045 -610760422 -609850629 -609636717 -609618659 -602319953 -601836237 -600042715 -598644286 -597072922 -597012380 -595383314 -595359990 -594077744 -592935885 -592597906 -591921010 -589139484 -588404284 -587725731 -587541669 -585137144 -583199391 -582684745 -580674054 -579424946 -579165579 -578942895 -573369637 -573242363 -572633901 -572297072 -571801634 -571373792 -571247611 -570216562 -569461692 -569333394 -568500174 -567709210 -566961921 -566484751 -565916198 -565020495 -564388892 -564382051 -563526509 -562607504 -562140239 -560068651 -559814050 -559704147 -559145299 -557627958 -557582806 -556901501 -556126930 -555745037 -554408279 -552810107 -551228107 -548490682 -548025035 -547943905 -547274771 -546713523 -546609881 -546547582 -544909352 -544860993 -544660872 -544065534 -543890153 -543453077 -543292749 -539520561 -537217687 -535610584 -535427884 -533825286 -533488584 -533224707 -533150531 -532592307 -532068520 -531723925 -530739996 -530686932 -528160987 -524997687 -524503460 -523143039 -522996035 -522099904 -521695505 -521605926 -521422951 -520888280 -519153179 -516722992 -516445801 -516266657 -515989168 -515707352 -515628029 -515177491 -514672117 -512924603 -512871718 -512628505 -510155877 -509600697 -508252261 -507494571 -506829444 -506284108 -505472566 -505437755 -504699205 -503749152 -503268484 -502304783 -501168746 -500879653 -499618542 -499185629 -496644562 -496101189 -495427308 -494038867 -493932122 -492571435 -490999657 -490890732 -490215676 -487018950 -485322225 -484998356 -484913300 -484160929 -483541347 -483520845 -483355552 -483266896 -481988907 -481540446 -480436451 -480157242 -479450104 -478822393 -478391359 -477605090 -477121087 -476879115 -476343649 -475813203 -475299692 -474364336 -473589133 -473480851 -473259754 -471453373 -471067575 -470061345 -469929041 -469328621 -468604163 -468378273 -467705005 -467047345 -465495642 -464349803 -464251153 -463913313 -463867966 -462542631 -462266625 -460951197 -460506668 -460119097 -457811006 -457644364 -457348152 -456655135 -456425220 -456280672 -455592034 -455035748 -454687193 -451757796 -451382047 -449992001 -449468939 -449345267 -446721502 -445271891 -445134861 -444559303 -444025026 -442775914 -442523369 -442149094 -442046927 -441866668 -440997427 -440752448 -440336364 -439661875 -439653925 -439232732 -438945251 -437669217 -437114925 -436084159 -435985048 -434984674 -434938283 -433150391 -431908777 -431468261 -429441752 -429345882 -428981012 -428634441 -428473161 -427808949 -425875948 -424906324 -423447237 -422727437 -422666290 -422654886 -422495945 -421630724 -420988590 -418940003 -418516198 -415295986 -414041621 -413758304 -413464783 -413400998 -413382101 -413191470 -413098948 -412309768 -411388613 -410354268 -408660960 -408085148 -407205171 -406500998 -403666512 -403450328 -402991398 -402410827 -402202831 -400812692 -400555792 -399860255 -398369856 -397347376 -397341095 -396810921 -396133595 -395383803 -395063465 -393903261 -393221860 -392382899 -392340947 -392215107 -391724345 -391404060 -391386384 -391135379 -390979852 -390680513 -390645824 -390083176 -390044571 -389698747 -383323611 -381915398 -381840769 -381666436 -381177929 -381039472 -380942676 -380416680 -379351559 -378630413 -378124421 -374982839 -374366993 -373760187 -371789051 -371319976 -370969499 -370955733 -370579780 -370189863 -370061366 -369409188 -368870881 -368280364 -365840444 -365833076 -365074805 -363360533 -362210505 -356353157 -355564359 -354476660 -354447951 -352371133 -351185385 -350737996 -349736183 -349723853 -349564113 -348747544 -348245856 -343096491 -343042464 -342849808 -342142776 -341766115 -341146699 -336831834 -336314320 -335310386 -334406711 -331910232 -331196780 -330988762 -329383976 -327582562 -327262929 -327027264 -326986960 -326438078 -323992197 -323712671 -321719989 -321501721 -319422974 -316682212 -316032139 -312800117 -311157982 -311107406 -310751334 -310585244 -309414745 -307341048 -307276058 -307108874 -303560224 -302419330 -302304206 -300373102 -300242638 -299928922 -299791115 -299200438 -299183274 -298321356 -297280764 -297279244 -296428838 -293576089 -292280485 -291580600 -291128643 -290531602 -290440917 -289440556 -288890930 -288417062 -287574202 -287232462 -287230126 -286446899 -286340169 -286258999 -286058436 -285350307 -285252953 -285082629 -283957003 -283291058 -282334537 -281002765 -278943218 -278258155 -276116949 -275005295 -274938149 -274873796 -273802208 -272618252 -270731330 -270670020 -270580519 -270510460 -269105685 -268771875 -268301551 -268085839 -267417567 -266323768 -266318714 -265941020 -264601988 -262221938 -261522884 -261227613 -261063743 -257981593 -257659505 -257125580 -255393704 -255283435 -255142938 -254891450 -254280986 -254172089 -251705967 -250766059 -249338580 -247793889 -246624007 -245488441 -243895900 -243803737 -242979170 -242205225 -239597858 -238636586 -238523493 -238061568 -237510448 -237198810 -236454451 -235699836 -235349330 -234687832 -233071795 -233057832 -231850749 -231787337 -231420768 -229616099 -228716361 -228560804 -226425057 -225186605 -224975237 -222557104 -222175734 -220648983 -219362850 -217954183 -216918636 -216706089 -215838958 -215622114 -215321959 -213442374 -212812756 -212068218 -211535641 -210492252 -210136443 -208038991 -206611854 -205621448 -205103421 -204422153 -204417971 -203495304 -202572960 -202233406 -200577628 -199555196 -198677499 -197704457 -197649902 -197027358 -196915307 -196879181 -192710782 -191552351 -191243980 -190778700 -189900300 -189307207 -188040694 -185974591 -185380360 -184833766 -183582443 -182179816 -181409220 -177633016 -174457691 -173913889 -173568278 -172405751 -172242782 -172123150 -171813654 -171334395 -170304787 -168100502 -167676943 -167307436 -166318858 -163737641 -162769773 -160008648 -159769341 -159649462 -159418300 -157812289 -157026305 -156821966 -154706470 -154222049 -152273186 -151845736 -149454373 -149319485 -147105527 -146632790 -146409544 -145556140 -144424497 -144376149 -142696293 -142607486 -141789169 -139264785 -138430910 -136564534 -135348660 -135134288 -135096553 -134318825 -133550420 -133390260 -133364380 -131685417 -130993015 -130937119 -130865590 -130243180 -129498930 -129403968 -129213822 -128504916 -126852443 -126552930 -126322900 -126193095 -125944070 -125702323 -125382705 -123926188 -123573324 -123067100 -121722476 -120769022 -120659685 -120134440 -120064767 -116922341 -116721381 -115425996 -114371953 -114326775 -114044756 -111996737 -111687400 -111632579 -111219613 -109904482 -109493060 -108040013 -105382566 -105324555 -105025371 -104601287 -104380823 -103572875 -102317473 -101698067 -101459001 -101383020 -101282278 -101194823 -99526545 -99014363 -98477446 -97214895 -96656587 -96512056 -92299198 -91720085 -91433641 -86583752 -86388406 -86301511 -85760346 -85322824 -84173051 -82091942 -81302288 -81074279 -79634628 -79511199 -78864934 -78750119 -76928692 -76318477 -75849142 -75076824 -74610065 -73834856 -73462199 -71455864 -69545265 -68400773 -67186718 -66508758 -66368496 -65932963 -65603562 -64506973 -61793861 -59176200 -58944704 -58495875 -58424597 -57493053 -57452105 -57035901 -56152924 -55992469 -55205745 -54055125 -53858925 -53757072 -52090574 -51273568 -51158676 -50692363 -49623911 -46726825 -46692450 -46281558 -45213252 -45163809 -44334023 -44144163 -43498421 -43381193 -41760552 -41263929 -39361721 -39308735 -39033519 -38941486 -38709745 -38707038 -37892493 -36573584 -34880314 -33923598 -31339103 -31321121 -30167364 -29616592 -29301362 -29034141 -27937469 -27461429 -25654464 -25541683 -25110713 -23279185 -23037469 -19860710 -19294669 -18684817 -18195459 -17135528 -15883338 -15779514 -15259263 -14982734 -14846213 -12050448 -10483156 -10437020 -8379325 -7885819 -5104894 -1457673 -1294062 -1269838 -888399 -808980 -748456 -734506 174512 835691 964169 1254295 1507148 3090384 4604585 7469167 8151743 9706662 10150398 13765051 14132590 14334368 14648559 14918563 16305090 17052787 17176234 18212176 19716409 22418725 22932545 24477778 26268025 26688274 28490226 29503914 30299088 30709741 31203630 32143760 32297234 32444738 32556244 34217469 34663325 35298624 35494747 35628398 35795699 36216381 37582726 37601951 38196856 38703351 39799818 40647653 40713620 40851169 41192675 42205597 42738323 43440285 43554689 43607997 44253722 45996249 48218700 48354389 49166337 49637942 50101344 50758748 51814716 52066951 52197999 52371369 53240204 54648032 54825088 55525050 56198323 56508030 56561309 62150541 66718684 67128866 67302359 67532491 68251182 68402369 70079100 70607813 71925882 72747430 73943434 74302114 74331211 75013960 76234874 76815287 77828384 78258986 78783383 79688034 79844618 80189586 80600022 80677163 80786381 81290306 81398639 81476712 85840575 88528631 88891242 89206923 89845984 90363283 90463924 90690718 92294626 92515139 93007473 93306671 94851429 95923725 96076770 96170335 97487390 98832699 98903100 99157128 100489934 101329756 101831364 101900581 102757621 103633851 104087260 104106140 105252103 105302837 106077553 107251474 107289440 107628337 108988776 109855913 110062115 113782812 115225379 115437383 116148535 120509790 121382353 121519452 121611090 121616297 121658969 122075885 123485382 124826752 124882872 125587472 126136497 126176268 126634860 127292476 127780625 127902250 127939191 129151284 129217545 130311270 130353942 131777869 135275057 135905773 136846169 137126938 137185896 137476486 137922063 138195430 138262821 138952526 139114982 139141836 139976618 140315678 140906333 141790321 141973683 143258706 143684009 144455974 144883627 145714422 146424818 148067441 148206931 148995661 149264301 150976394 151130096 151794378 152397764 153291130 155048354 156544104 157489866 157588857 158572841 158767582 160760221 160870011 161677590 161954455 162638713 163173854 163657517 164958672 164995838 165100703 165555322 165670201 166092486 168888430 170020779 170673431 170674807 170754338 171092962 171852870 172362464 175495305 175689659 177308282 177830031 180053457 183912129 184682912 185428066 186184150 186185859 186227559 187125193 187754376 188301008 190196247 194773037 196899848 198101737 199092479 203669401 204029879 205206181 205492765 205912304 206462036 207262412 207603565 208090413 211388458 212218180 212602230 212749050 212786973 213497222 214042943 214050929 215120219 216097643 216633955 216674134 217364601 222115849 222496749 224097036 224478418 228105076 229837272 229918304 230180953 231641848 233646334 234632890 234841882 235081279 235337435 235417573 237222034 237510768 238487641 238808739 239325908 239405367 240586436 242590666 243512496 245128893 245156320 245222101 245256766 247670695 248381461 249175672 249687907 250133097 250149968 252019727 252538756 254794986 255506954 256094218 257882815 257883920 258602456 259791211 260320783 260505970 260613825 260695637 260976892 262022916 262779974 264253149 264799151 265620491 265627845 266100208 266809246 266836438 269653584 271480590 272958526 274928785 275053838 276029242 276096420 278362497 281775193 283468261 284954915 285120924 285295471 285919054 286358952 287278466 287501519 287660201 288360813 289093087 291681837 293255453 293337243 293355180 293843121 294329387 299252530 299879535 304692756 305048511 306217771 306278050 307457979 307572561 307640888 308185557 310050825 311962229 312285835 312709126 314061131 314498608 314916644 315339312 315995712 316107299 316796159 317009089 317461616 318766950 319623003 319632751 319875154 320755526 321020464 321030198 323947792 324758212 325139020 325473181 326176516 326409891 326559094 328969821 331110815 333559038 336163069 336277461 336677238 337070434 338103110 338907570 341102776 341876954 342217558 345162070 349560089 350627661 351560334 355690572 356767427 357014831 357107605 357829584 359131001 359457724 359562095 359928577 360060536 360066019 360256308 361049144 362584130 365116096 365407652 366799554 366838883 367765029 368388393 368508178 368630223 369180253 369563968 369631565 369899186 370190716 370364652 370968789 372160454 372346858 372564399 372804099 373199246 373654674 373719864 374055518 374120329 374499051 374817130 375602826 379549214 379954327 380874021 382603409 383002091 384107933 384261846 385383966 385676871 385715022 386098447 386331484 387021193 387065383 387958582 388163233 389285766 390579770 391815992 392383989 392715310 392818900 394495446 394839522 395742461 396263620 398055041 401779786 402572574 403135147 405052974 406303597 406589849 408122344 408555148 410086217 410180613 410872164 411738247 412281062 412470240 412916013 414246326 416278560 416285117 416766157 416968048 417793076 418597676 421661594 422148303 422658786 426525481 427242667 427730838 427819482 428345657 430585028 430678410 431589471 431927818 433510496 434139698 435142647 436104067 438936821 440016443 444300780 444568363 444573161 444837821 447464235 450030032 450443597 451592637 452660156 455039295 455751587 456093015 456341849 456350863 458527018 459347506 460481173 460992732 461133998 461598639 461787131 461798065 462324449 462916186 463686999 465629430 465787544 466652411 466681574 467277776 467623871 468559887 469664548 470728946 471444588 471803660 474227188 476751024 477251740 479764096 480331765 480670172 480854506 482009405 482210740 482937012 483470697 485433960 487552502 489407289 489642176 489689237 490323189 490911009 491424274 492158957 492247755 493515194 495441181 495602161 496668631 497945518 498517740 498804572 498921328 499543119 500145256 500546164 500619623 500757797 501086070 501355255 501502095 508937338 509090784 509571665 511595802 514617602 514636103 515321278 515783241 515902433 516939870 518122640 518622332 519700587 522009677 522104987 522417961 522837711 524908127 525190079 527230888 528849305 528886587 529704532 529802435 530459628 531382928 531609680 531613730 533021914 533106553 533329434 534608735 534798356 536853905 537438796 538186421 538861933 539552954 540009780 540332815 540639818 540686768 540988553 541751236 542045266 543321138 544146088 544727237 546344144 548480594 549552930 550001626 555842892 557095948 557174957 558261395 560564946 560722059 561018018 561587247 563233429 565006891 565326067 565338373 565670479 565983292 566070482 566852685 568010934 568469714 570036943 570306796 570422808 571641025 572088517 572312953 572943465 574511276 574902591 575144729 576830453 577519297 579278991 579440890 579772551 579972854 580056861 581759955 582884073 582905262 583260674 583816271 584440700 585748250 586294506 587105859 587541770 587644343 588507121 589229275 589308746 589497367 590016854 592285464 592562250 594264943 594594080 594629975 596084535 596168078 596224792 596592445 597078164 597974366 598370084 599899223 601422307 603684023 605137415 605224001 606832285 606916682 609822960 611600989 613482452 613639983 614110799 616516313 617494580 619809288 620887323 620925870 622882475 623966753 626143074 626583972 628002553 628346135 630216467 630472147 630518864 630544265 632059762 633023520 634378245 636738576 637484390 638214107 638647983 639520874 639587263 640135975 640233809 642743992 643444429 643595674 644266397 644376918 644388109 645817316 646013092 646133703 647449517 647931653 649078598 649752859 650205166 650374570 651052876 651544512 651904300 652437560 654913669 655289930 655849727 657166847 658042374 659334592 659887383 661277593 662039413 662042172 663343067 664080255 664413504 665430572 668072481 668548720 671399999 672831316 673395382 674105126 675699430 675737310 675883436 676322965 676670994 676893070 677131506 677806359 678682337 679183206 679336078 680218687 680511477 680974115 681347334 683396603 683485016 688990832 694240160 694980907 695339074 696350174 697124184 697441004 698859020 699513390 700191104 700194266 700951345 705821904 706134821 706902495 707010819 707166802 707242030 708282586 708828161 710280963 710421276 711251220 712318335 712318518 714029568 714216344 714758005 714965370 715938220 716054755 716250495 716356556 716937368 717883928 718268088 719526948 720770343 721896743 722574010 722739961 724370909 725219259 725451476 725570617 725981068 726324546 727137291 728627761 728672084 729193776 730903062 731139575 731414399 731681605 733052540 734055652 734742277 736376305 736903310 736908224 740152105 740364794 740455133 740735371 741841890 744506032 745236443 745499978 745808860 746049666 746823179 747523680 748104766 748509153 748853783 749655201 754278774 754335207 755335200 755338967 756040387 756443678 758484746 758654766 759450082 759574036 759853687 761449216 761655461 762690814 763567274 763745733 767073768 767244447 767435008 767704038 767978907 769109017 769816976 771766997 771803466 773696596 773912397 773923710 776905729 777277125 777922071 778551392 780984752 781547527 781661690 781746288 782733877 783039360 786394163 787595566 787602829 790081046 790267162 791588874 791971046 793205521 793259544 793998590 794025216 794128755 795242819 795874227 796321979 797147715 798014002 798400892 799010848 800837531 802773842 803856735 804390566 806256462 806509195 806698923 806777962 808520323 808654651 809864732 810783928 813188680 814315261 814747997 815796135 816618869 818969899 818989199 819867462 820620248 820680560 820701511 821387306 824184590 824311820 825399444 827962591 828256226 829892105 830124480 830596771 830995195 831789609 835058136 835256642 835825398 836156016 838432282 838713719 839573236 841197288 841885733 842260204 843873289 846513211 848384259 849291581 850818406 851021652 851619049 852613202 853986851 855328343 856384467 856387032 856694591 856798245 858339919 859364233 859970075 860608059 861761538 862360326 862843505 863147046 866393611 869490404 869861979 870263480 870449134 871588003 872292163 872903323 874422671 874437895 874683714 875510061 876063656 877702454 878918056 879855361 880637204 880875467 883164496 884150222 884735645 885591345 885944600 886569249 887315234 887632560 887914980 889202370 890995343 891327554 891787818 893027046 893278367 895573098 896727117 897725556 899316159 899503446 900485720 900519474 901108142 901915289 902133148 903003779 903560165 905162162 907059580 907842826 908049995 908262393 908644673 910260721 910543638 911756414 912396401 913668821 913762396 913960847 914312817 914403174 914649982 914699601 916585820 917979421 918501676 918915564 919780482 920321193 920435979 920888502 921988276 925319795 925352904 925384673 925921609 928270124 928559966 930631553 931267900 931786523 932661723 933051611 934058444 936039877 936077807 936501459 936523268 936705695 938129345 938989575 939456552 939461507 940798406 941172076 942978574 947884864 947978451 948206895 949036167 949370123 949399000 949600359 952885453 954107585 955092234 955537391 955851710 957286308 958218271 958977377 960069944 960133260 961764505 961825232 962986326 963301732 963804444 964053738 964854535 965027187 965461766 965747126 966109782 966666775 966786134 967541885 967679409 969223936 969653574 970457938 971569134 971590543 971941554 972903024 974118105 974279365 975309121 975338100 976481983 978047346 978302293 978345119 978644668 980658613 980842081 981305705 981430735 981745170 981895561 982256814 983095423 984182272 985158878 985317136 985672943 986192931 986712341 988490038 991159698 991208574 991255113 992290718 992883876 993960882 994411371 998254342 999768527 999935354 1000528491 1000582979 1001247866 1002743643 1003416312 1004029388 1004524596 1006245356 1006898447 1006930434 1007183075 1007970332 1008916688 1009264093 1010540420 1010681125 1012452654 1012613933 1013083600 1014027330 1014397037 1014458101 1014549360 1014650487 1015365423 1017340855 1017341063 1017515153 1017656263 1019479971 1020844977 1021682453 1024184543 1024231331 1025796587 1026878744 1027648110 1031484779 1032114055 1032315384 1032348517 1032526664 1032719646 1033031354 1033317248 1033460280 1034298686 1034615856 1034945652 1035789906 1036524420 1037760658 1037842372 1038298032 1039265024 1039374281 1039513678 1041365593 1041495902 1041587559 1042027146 1044434080 1046330743 1047004696 1049056729 1049248334 1049290685 1051133277 1051439675 1052570899 1052799605 1053653987 1053982012 1054226520 1054658720 1055179376 1056140105 1057108072 1058479297 1058909800 1061998641 1062832800 1065264022 1067672781 1067929337 1069591011 1071395549 1071808760 1072556063 1073482837 1074488520 1074947485 1075564907 1075743933 1081978445 1083239009 1083240246 1084181993 1085573765 1088463711 1089895780 1089952159 1090727435 1091841023 1092820616 1093636020 1093967657 1094279908 1095889346 1096636733 1096783007 1096978373 1097148537 1097311598 1098896460 1099258455 1099423248 1099671467 1100042176 1100566297 1101886059 1102124344 1102232648 1103266830 1103360542 1103625944 1103989339 1104423728 1105384827 1105530140 1105922168 1106068683 1106176864 1107743339 1110350320 1111432457 1111526933 1112577187 1114841726 1114915073 1115342548 1116882581 1117305868 1119882985 1122088853 1122671635 1123488218 1125911444 1126696895 1128137898 1129692541 1131413114 1131568767 1132165580 1132253903 1133227649 1136731471 1136933397 1136970670 1137430408 1138373064 1139007066 1140580914 1141477711 1141493506 1142314601 1142837429 1143447382 1143543315 1144580232 1144779283 1146300457 1147990534 1148049705 1148306903 1148606058 1149008184 1151439403 1151829013 1152253685 1153084608 1153956782 1154317986 1154517993 1156395445 1156484555 1156703672 1157228320 1157466698 1161535100 1161746452 1163064127 1163930616 1164700883 1165135282 1166135384 1166982222 1167303210 1168240600 1168359525 1169259149 1169795365 1170083625 1170531556 1171821093 1173840450 1176197618 1176354239 1176454303 1177106322 1177789971 1177991151 1179052876 1179847906 1179897144 1181878805 1183434732 1183464119 1183827973 1184140486 1184741082 1185588366 1186078383 1186453079 1188039714 1190204139 1192054163 1192417083 1194649430 1196382364 1196595850 1196827653 1197955676 1200759014 1201552655 1202508677 1203210174 1203326169 1206338583 1206515046 1207003758 1208176834 1209043130 1211919604 1212258707 1212803737 1214077963 1214687176 1215318216 1216632166 1216723344 1217586945 1219443394 1220234329 1220560449 1220782621 1222152865 1223189088 1223350026 1224936350 1225619747 1227461904 1227481948 1227893449 1231232620 1232847305 1234238542 1234278533 1234666787 1235758688 1237894550 1239308836 1240007592 1240551886 1241349811 1241925654 1243202880 1243223790 1243944534 1244748056 1245333200 1245648677 1245971599 1246863335 1247953146 1248610205 1249391452 1249717737 1252101715 1253684968 1253992168 1254317148 1254623666 1255039396 1256617534 1258766412 1258961645 1260089550 1260279508 1261461484 1262135262 1262169083 1263574095 1264357083 1264500010 1264939829 1265708620 1267311527 1268396128 1268762575 1268814283 1270157143 1270195005 1273536549 1274468358 1274589835 1274641099 1274706318 1274802180 1275489636 1275561703 1276650281 1278356704 1279283021 1279952040 1280880397 1281402033 1283230993 1283454596 1283824643 1284199089 1284600552 1284672656 1286026602 1286038205 1286685807 1287148408 1288447687 1290211522 1290251803 1290660821 1291139577 1292070475 1292147385 1292314762 1292460004 1294061709 1295770433 1296093272 1296155171 1296286015 1296618559 1299324874 1299537985 1300120882 1301083494 1304568693 1304797641 1305156884 1305259330 1306477352 1308030664 1308684568 1308901560 1309833027 1311109280 1311443613 1312413205 1312964743 1314072938 1314390444 1314596827 1314624013 1316805820 1317461177 1317545363 1317971309 1319768962 1319820658 1320320383 1320506651 1322312200 1325365473 1326824852 1327341252 1327851609 1328852905 1328941803 1329256722 1329846152 1329983331 1330066234 1330175489 1330234011 1333263192 1334434734 1335528501 1338665443 1339897650 1340109443 1340590604 1341461746 1343865532 1345627877 1345951895 1346949297 1348296978 1348834244 1348954427 1349786953 1351104964 1351706147 1351874038 1353893309 1355644803 1356038468 1357522162 1358341585 1359350634 1360814842 1361707920 1362106692 1364667274 1365284322 1366222072 1366471713 1366777244 1367020939 1370330007 1370461598 1371516357 1372141160 1372809375 1374136932 1374514468 1374705047 1375033512 1375182009 1375464824 1375924823 1376556698 1378160927 1378174614 1378821550 1381456244 1381873051 1382842699 1382943215 1383608084 1384006525 1384857906 1386076282 1386354256 1386518088 1387807726 1387825799 1388425228 1388809448 1388850401 1389949419 1390917624 1391601929 1391914001 1393748762 1393799031 1393978225 1394227888 1394468256 1394594597 1395523882 1395628196 1396137693 1396176438 1396735491 1396961533 1397288043 1399072939 1399772292 1401067358 1401295288 1401573192 1404237868 1405613728 1405622822 1406427197 1406933019 1408547722 1408859203 1408956364 1409220980 1409876149 1410243499 1410713685 1413600842 1413709131 1414558021 1415033904 1416509395 1416537489 1418960466 1419158744 1421270304 1423798145 1424521937 1429122596 1430184472 1431888288 1434039803 1438186682 1440020672 1441185411 1441360243 1442242780 1443021188 1443596388 1443987392 1444644497 1445120582 1445490008 1446964539 1447395411 1447900998 1448773653 1450134009 1452757076 1454899222 1455210210 1456249358 1456268605 1456391096 1457361248 1458197545 1458871252 1461222272 1461300644 1464011862 1464334179 1466130004 1466718985 1467051946 1470664234 1471088002 1472159204 1477230082 1478086326 1478448293 1478788536 1480887816 1482017035 1482781247 1483501633 1484358809 1485852832 1486090154 1487209941 1488113405 1488385653 1489417504 1490316230 1491135167 1492380411 1492573433 1493345279 1494969002 1496065292 1496686353 1496927894 1499331751 1499777220 1500458387 1501618774 1501988278 1502332135 1503232513 1504504890 1505669066 1506691668 1507530340 1508602997 1509274933 1509851406 1509872925 1510461819 1510463209 1510783106 1511488262 1511494848 1512548136 1513027353 1518825809 1518958958 1519111850 1520053544 1520316726 1520598708 1520943735 1521887368 1524035710 1524456959 1525113239 1525189205 1525263458 1529066010 1529242345 1529420313 1529486756 1529736243 1530299734 1530743333 1531525831 1532156524 1533190695 1536532641 1537465862 1539667038 1539831099 1540552109 1541629651 1541736727 1541877192 1542000714 1542347297 1542430879 1542499107 1544353913 1544808151 1545635640 1546510197 1547363343 1547421581 1550834591 1551631592 1552299187 1554049368 1554716793 1555356091 1556133197 1557108523 1558659818 1559003835 1559111341 1559292561 1559982772 1560203150 1561726180 1562404315 1562425344 1562789939 1566972668 1567147100 1569148108 1570194818 1570202116 1570241688 1571397775 1571871610 1573596575 1573614930 1573831225 1573943524 1574422253 1575756048 1575969669 1577341317 1578213464 1578760141 1579321607 1579845828 1581685038 1581709744 1581733267 1582768663 1583021993 1583116882 1583354279 1585899267 1586011559 1586437479 1587181594 1587666240 1587693832 1587890128 1589730403 1590934975 1592254482 1593619970 1596967365 1597825134 1598557328 1599353818 1599556814 1600168550 1600297907 1601594373 1601698725 1604145665 1604185699 1604423795 1606086315 1607784026 1609135270 1609536771 1609740450 1609924508 1609946537 1610058206 1611077358 1611145062 1611742994 1612665869 1613350122 1613374613 1614148160 1615556205 1615610718 1615788372 1616971486 1617227864 1617904513 1618065066 1619158069 1619625230 1620180444 1621853519 1622261930 1623138984 1625723046 1626269609 1628409289 1629610908 1629612706 1630558052 1631354858 1631502125 1632116061 1632899020 1633449716 1635089401 1635156648 1636742061 1636861258 1637660147 1639089786 1639485266 1641084647 1641620194 1642035380 1642037353 1642294446 1642780103 1643399570 1644474466 1645419483 1645633062 1647590564 1648681977 1649173853 1649726608 1649821623 1650413294 1650709040 1651438557 1652569019 1653571976 1654234640 1654235915 1654262668 1654484961 1654691723 1654902972 1655177976 1655423656 1655897300 1656549728 1656718355 1657435788 1657975406 1658028976 1658225613 1660441061 1661142714 1661569159 1665476093 1665584437 1666358397 1667690881 1667962775 1668820722 1670394875 1671441792 1672045841 1672582530 1672704229 1672834421 1675546848 1676186184 1676496836 1676734983 1677339393 1677952662 1678333792 1678614956 1678818917 1678953178 1679627732 1680633308 1681900684 1681918925 1682003022 1682831491 1683052619 1683145214 1684136645 1686729154 1687376076 1687525698 1688727834 1689063726 1689151822 1689703513 1689714921 1690247577 1690909624 1692948222 1693320822 1693654676 1694862052 1696420494 1696631090 1696858635 1697686022 1698790783 1699224565 1699872944 1700130512 1700760439 1700967482 1702831999 1704499628 1704591950 1705088569 1706320534 1706419132 1706662091 1707089132 1707995788 1708199991 1709856496 1710939247 1712217831 1713395440 1713409629 1714115692 1714313111 1714531520 1715082613 1715150541 1715285170 1716431612 1716453033 1717163367 1719122506 1719963343 1720982813 1722322415 1723130660 1723199174 1724414596 1724449658 1725251073 1726443670 1726801561 1727346198 1727655552 1728415577 1729510018 1731034128 1731523463 1731636878 1731796241 1731814468 1732590422 1733315274 1733689829 1735450073 1736023535 1736579982 1736792616 1737719437 1738180614 1738768488 1739249858 1739669177 1740159836 1740228442 1741283776 1741440687 1741564472 1742693872 1743239245 1743388171 1743766847 1744219990 1744326216 1745083982 1746393107 1748379401 1748423184 1750906009 1751345907 1752552429 1754600921 1757098670 1757570010 1757633159 1757902725 1759048933 1759757803 1760500753 1760749356 1760964598 1761405717 1761550796 1761661134 1764081856 1767676291 1768658683 1769063419 1769176255 1769982773 1771772250 1773457377 1774396364 1774473236 1774485260 1775719925 1776123837 1776299445 1776529662 1777326792 1777636870 1779024229 1780571035 1781382788 1782440395 1782956050 1783842663 1783851855 1784609694 1784884341 1786385598 1787029424 1789617055 1792604452 1793953715 1795351457 1796138701 1796716689 1798152382 1799409856 1800558565 1800641093 1801371015 1802224188 1804117538 1804613101 1804830811 1807845974 1808241029 1808617446 1809044756 1810096350 1811711513 1811857928 1812217884 1814046980 1815032759 1817131712 1818205691 1819662112 1819914845 1820497340 1820593865 1821069735 1822091521 1823830470 1824105033 1824787977 1825221766 1827853480 1828862227 1833279991 1833314082 1833366516 1834898590 1835515845 1835572642 1838624611 1839171437 1840631544 1840642311 1841481822 1843862544 1845531549 1847120269 1847598052 1849077967 1849363701 1849397326 1849627078 1849740593 1850482923 1851270100 1851351707 1853700706 1853917829 1853948667 1854533890 1857645323 1860685693 1861300752 1861744394 1863022304 1863572686 1863668115 1864923487 1865152772 1865490793 1866387123 1866976367 1867341757 1868290395 1868736808 1869402227 1870888587 1873521895 1875186201 1877148316 1878792361 1879911179 1880056844 1881538095 1885585392 1885697921 1885868668 1887061445 1887458619 1887849615 1888886598 1889591042 1889717715 1891616310 1891663536 1894595936 1894795455 1895669869 1896687281 1898839098 1898911928 1899301330 1900563041 1901069597 1909105840 1909844126 1910891854 1911148229 1911214996 1912476139 1912855116 1914417645 1914524897 1914688482 1915057152 1915069655 1916355318 1916371797 1916606575 1916859026 1917299454 1920765666 1921091007 1921306990 1925323548 1925673338 1926214433 1927426704 1928932498 1928998506 1929356761 1930642167 1931501609 1931714694 1932457858 1933405385 1933620298 1933858069 1934602180 1934778086 1935403626 1935587249 1935918202 1937798979 1938783827 1939661182 1940679260 1944836894 1946017178 1946303978 1947466429 1948684843 1949162771 1951263897 1951792930 1951827654 1952365582 1952914796 1953813246 1955675188 1956972771 1957343063 1962172505 1962397054 1962961936 1963669884 1963725741 1964046620 1964438269 1964752070 1965767933 1965865227 1966167828 1968328188 1968719673 1968963006 1969498934 1970424580 1970865632 1970975182 1973282435 1973717100 1974278649 1975796459 1976234508 1976430907 1976846025 1977346283 1978104961 1978258523 1979450409 1980989898 1982475917 1983175593 1983720592 1983756167 1983922621 1984127901 1986151582 1986281496 1986344929 1987207266 1987273880 1987513527 1988228932 1988915379 1988951205 1990449053 1991044307 1991380298 1992126458 1992405950 1992630446 1992848032 1994736138 1995741438 1996439539 1997580173 2000004420 2001996262 2002711850 2007676559 2008151651 2008253697 2009570920 2009731472 2010467587 2011249664 2011453745 2011686949 2012311518 2013096230 2013755412 2015136272 2017163451 2017594385 2018436812 2019451506 2019498275 2019869168 2020057000 2020617033 2022770595 2022820871 2022949813 2023264072 2023421948 2024574480 2024590962 2024972209 2025502381 2025909252 2026037503 2026337800 2026601982 2028421615 2034843146 2034977814 2035226035 2035687115 2035790295 2036485002 2036863414 2036923594 2037246028 2037407522 2039750257 2039878057 2039958463 2040248925 2041278348 2041467294 2043155428 2043687210 2044523873 2045272311 2045555073 2047477989 2047862936 2048259008 2049473177 2052494792 2054290448 2055263006 2055596336 2058177055 2058529855 2059333440 2059672735 2061387579 2061469499 2062175806 2062364361 2062494989 2063041111 2063407322 2064455114 2065707924 2065786199 2066933734 2067105384 2067186621 2068854275 2070180207 2070340010 2072193211 2073037398 2073040967 2073861311 2073871635 2073981704 2074443744 2076784210 2076934676 2079118099 2082512316 2082968544 2083387639 2083742738 2083746624 2085131142 2085960289 2086058259 2086969968 2087975480 2089154225 2089308648 2090152041 2090384525 2092002083 2093271219 2093464064 2093613676 2094670231 2095548321 2095931151 2096857585 2097346215 2098287190 2099736279 2100403651 2100710123 2100782938 2100844957 2101827204 2103473965 2103715070 2104673067 2104755579 2106219504 2107812541 2108962860 2108973949 2109925187 2111288639 2112339141 2112738421 2115454440 2116875223 2117429614 2118595588 2119130332 2120756258 2120921982 2121679841 2122005959 2122264262 2122888338 2123376224 2123491589 2124325202 2125868144 2125893179 2127142433 2127669385 2127891698 2128365734 2128369992 2128467616 2129974961 2131131228 2131438765 2131657027 2132274913 2134808746 2134999071 2135237662 2135493566 2136857177 2137682319 2138342606 2139622853 2139985108 2140966459 2141116680 2141344619 2141836419 2143385755 2145059485 2145664358 2145713800 2146719547 2147071263 2147301510 2147350161 2147359223 number of comparisons: 55228 number of Swaps: 61808 . Hashmap(Binary sort) .",
            "url": "https://tianbinliu.github.io/Fastpage/csa/2023/04/04/HasMaps-and-BigO.html",
            "relUrl": "/csa/2023/04/04/HasMaps-and-BigO.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Sorts and Algo Rythmic part 2",
            "content": "Hacks . Build your favorite sort into your custom built collection, aka LinkedList . Implement a Sort into your LL in Jupyter Notebook ... Here is concept.- Utilize Capabilities of Object overrides with toString and compareTo to Sort using Object overrides (these are built in by extending Collectable, formerly Generics). Build toString to return JSON for LinkedList, Queue and/or Stack so they could be utilized with API. . | Demostrate changing Sort keys with Tester Methods . | Look at this for FrontEnd ideas using these new Data Ops . | . public class Animal{ private String name; //ignore from here to private int age; public Animal(){ this.name = &quot;default&quot;; this.age = 0; }; public Animal(String a, int b){ name = a; age = b; }; public String getName(){ return name; }; public int getAge(){ return age; }; //here //focus on this toString method, later below we will how does the object override works public String toString(){ return &quot;Animal name: &quot; + name + &quot;, age: &quot; + age; } } //Inheritance, class Bird is a subclass to class Animal public class Bird extends Animal{ private String type; public Bird(){ //Skip here to super(); this.type = &quot;default&quot;; }; public Bird(String a, int b, String Birdtype){ super(a, b); this.type = Birdtype; }; public String getType(){ return type; }; //here //Remember this toString method, we will use it later. public String toString(){ return &quot;Bird name: &quot; + getName() + &quot;, type: &quot; + type + &quot;, age: &quot; + getAge(); } } Animal list = new Bird(&quot;Landroval&quot;, 1, &quot;sparrow&quot;); //Animal type reference refers to a Bird object System.out.println(list); //Bird&#39;s toString is called. This is called RUN TIME POLYMORPHISM. . Bird name: Landroval, type: sparrow, age: 1 [Animal name: Landroval, age: 1, Bird name: Landroval, type: sparrow, age: 1] . It is using the toString method from the subclass Bird | . Method override : When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. | . LinkedList&lt;Animal&gt; test = new LinkedList&lt;Animal&gt;(); test.add(new Animal(&quot;Landroval&quot;, 1)); test.add(new Bird(&quot;Landroval&quot;, 1, &quot;sparrow&quot;)); System.out.println(test); LinkedList&lt;Bird&gt; test2 = new LinkedList&lt;Bird&gt;(); test2.add(new Bird(&quot;Landroval&quot;, 1, &quot;sparrow&quot;)); System.out.println(test2); System.out.println(test.toString().compareTo(test2.toString())) . [Animal name: Landroval, age: 1, Bird name: Landroval, type: sparrow, age: 1] [Bird name: Landroval, type: sparrow, age: 1] -1 . return as JSON . @GetMapping(&quot;/{a}/{b}/{c}&quot;) public ResponseEntity&lt;String&gt; Bird(@PathVariable(&quot;a&quot;) String a, @PathVariable(&quot;b&quot;) int b, @PathVariable(&quot;c&quot;) String c) throws JsonMappingException, JsonProcessingException { LinkedList&lt;Animal&gt; test = new LinkedList&lt;Animal&gt;(); test.add(new Bird(&quot;Landroval&quot;, 1, &quot;sparrow&quot;)); return ResponseEntity.ok(test.toString()); // JSON response, see ExceptionHandlerAdvice for throws } . Or . @GetMapping(&quot;/{a}/{b}/{c}&quot;) public ResponseEntity&lt;String&gt; Bird(@PathVariable(&quot;a&quot;) String a, @PathVariable(&quot;b&quot;) int b, @PathVariable(&quot;c&quot;) String c) throws JsonMappingException, JsonProcessingException { LinkedList&lt;Animal&gt; test = new LinkedList&lt;Animal&gt;(); test.add(new Bird(&quot;Landroval&quot;, 1, &quot;sparrow&quot;)); ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(test.toString()); return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } .",
            "url": "https://tianbinliu.github.io/Fastpage/csa/2023/03/30/Sorts-and-Algo-Rythmic-part-2.html",
            "relUrl": "/csa/2023/03/30/Sorts-and-Algo-Rythmic-part-2.html",
            "date": " • Mar 30, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Sorts and Algo Rythmic part 1",
            "content": "Hacks . CB wants you to work with Bubble Sort, Selection Sort, Insertion Sort and Merge Sort. The material on these sorts is prevelant on the Internet and ChatGPT. . Build into this Jupyter Notebook(s) for Bubble Sort, Selection Sort, Insertion Sort and Merge Sort. . | Build into this Jupyter Notebooks Tester methods that runs each Sort . | Commit to GitHub Repository often, try to use GitHub commits to show iterations on work . | Note, build your sorts into Generic T Queue using toString and compareTo to compare keys. . | . Methods we used: . Print array - .toString() . int[] myArray = {1,2,3,4,5}; for (int i = 0; i &lt; myArray.length; i++){ System.out.print(Arrays.toString(myArray)); } . compareTo() . The compareTo() method is a method provided by the Java programming language that is used to compare two objects(wrapper class, include Integer, String, etc...). . | if it is a String object - compare alphabetically, return 0 if String is equal to its String input and return a value greater 0 if String is greater than the String it compare to, and return a value less than 0 if String is less than the String it compare to. ex. guess1.compareTo(guess2)&gt;0, if String guess1 is greater than guess2 . | . Build into this Jupyter Notebook(s) for Bubble Sort, Selection Sort, Insertion Sort and Merge Sort. . Bubble Sort . All that happens is that adjacent partners swap if they are in the wrong slot until the algorithm is complete. Notice they have to do a final pass before they can decide that it really is &quot;all sorted&quot;. | . public class BubbleSort{ static void bubbleSort(int[] arr) { int temp = 0; for(int i=0; i &lt; arr.length; i++){ for(int j=1; j &lt; (arr.length-i); j++){ if(arr[j-1] &gt; arr[j]){ temp = arr[j-1]; arr[j-1] = arr[j]; arr[j] = temp; } } } } public static void main(String[] args) { int arr[] ={1,5,4,3,2}; bubbleSort(arr); for(int i=0; i &lt; arr.length; i++){ System.out.print(arr[i] + &quot; &quot;); } } } BubbleSort.main(null); . 1 2 3 4 5 . Selection Sort . Selection sort is a linear sort algorithm as it moves from index [0] to [n-1]. In the inner loop which is a second linear loop it compares two elements (like seen in the visual below) and notes which is smallest, after cycling to the end it swaps the smallest number to beginning position in the round. | . private void swapItems(int firstIndex, int secondIndex, Object[] arrayOfStuff){ Object thirdHand = arrayOfStuff[firstIndex]; arrayOfStuff[firstIndex] = arrayOfStuff[secondIndex]; arrayOfStuff[secondIndex] = thirdHand; } . Integer[] Array = {1,5,4,3,2}; for (int outerLoop = 0; outerLoop &lt; Array.length; outerLoop++){ int minIndex = outerLoop; for (int inner = outerLoop +1; inner &lt; Array.length; inner++){ if (Array[inner].compareTo(Array[minIndex]) &lt; 0){ minIndex = inner; } } if (minIndex != outerLoop){ swapItems(minIndex, outerLoop, Array); } } for (int i = 0; i &lt; Array.length; i++){ System.out.print(Array[i] + &quot; &quot;); } . 1 2 3 4 5 . Insertion Sort . The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . ArrayList&lt;Integer&gt; tester = new ArrayList&lt;Integer&gt;(); tester.add(1); tester.add(5); tester.add(4); tester.add(3); tester.add(2); for (int outerLoop = 1; outerLoop &lt; tester.size(); outerLoop++){ Integer tested = tester.get(outerLoop); int inner = outerLoop -1 ; while (inner &gt;= 0 &amp;&amp; tested.compareTo(tester.get(inner)) &lt; 0){ tester.set(inner + 1, tester.get(inner)); inner--; } tester.set(inner + 1, tested); } for (int i = 0; i &lt; tester.size(); i++){ System.out.print(tester.get(i) + &quot; &quot;); } . 1 2 3 4 5 . Merge Sort . This algorithm uses a divide and conquer algorithm, versus linear algorithm of insertion or selection sort. Looking at it can be complicated, but it is more simple than it looks. It divides the array into two different groups recursively, until it gets only two to compare, swaps if necessary. Then it pops out of the recursion, observe the cascading and then the inverted assembly in illustration, after pop it puts each split group back together using a sorted comparison. | . public static void merge(int[] a, int[] l, int[] r, int left, int right) { int i = 0, j = 0, k = 0; while (i &lt; left &amp;&amp; j &lt; right) { if (l[i] &lt;= r[j]) { a[k++] = l[i++]; } else { a[k++] = r[j++]; } } while (i &lt; left) { a[k++] = l[i++]; } while (j &lt; right) { a[k++] = r[j++]; } } public static void mergeSort(int[]myArray, int index){ if (index &lt; 2){ return; } int middle = (index)/2; int[] leftArray = new int[middle]; int[] rightArray = new int[index - middle]; for (int i = 0; i &lt; middle; i++) { leftArray[i] = myArray[i]; } for (int i = middle; i &lt; index; i++) { rightArray[i - middle] = myArray[i]; } mergeSort(leftArray, middle); mergeSort(rightArray, index - middle); merge(myArray, leftArray, rightArray, middle, index-middle); } int[] tester = { 1,5,4,3,2 }; mergeSort(tester, tester.length); for (int i = 0; i &lt; tester.length; i++){ System.out.print(tester[i] + &quot; &quot;); } . 1 2 3 4 5 .",
            "url": "https://tianbinliu.github.io/Fastpage/csa/2023/03/26/Sorts-and-Algo-Rythmic-part-1.html",
            "relUrl": "/csa/2023/03/26/Sorts-and-Algo-Rythmic-part-1.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Generics Types and Collections",
            "content": "Hacks . Watch the college board video Classes and Objects* Blog and Define the details of a Class: Access modifier, constructor, modifiers/setters, getters, etc. | Build example code in jupyter notebook with Linked List, Queues, and Stacks. | Show familiarity with managing data (aka nodes in LL) in these structures. | Show familiarity with Generic data and ForEach loop support, similar to ArrayLists T. Here is sample Java Generic T and the Java Iterable interface by Geeks4Geeks. | . Watch the college board video Classes and Objects* Blog and Define the details of a Class: Access modifier, constructor, modifiers/setters, getters, etc. . Define vocabulary . constructor: creating class object, can have multiple constructor under a class(different argument). Usually when we use method outside the class, we first need to create a class object by calling the constructor, then use object.method(). For example we can use the static methods from the math class we import in the directory like sqrt(), random()...etc and creating Math object to do the calculation. Math.sqrt(argument), Math.random(). - all the methods are return methods. | . The collegeboard video didn&#39;t talk about Access modifier, modifiers/setters, and getters. So I find the definition online: . 1.Access modifier: Default – No keyword required Private Protected Public Default: When no access modifier is specified for a class, method, or data member – It is said to be having the default access modifier by default. . Private: . The methods or data members declared as private are accessible only within the class in which they are declared. | Any other class of the same package will not be able to access these members. | Top-level classes or interfaces can not be declared as private because | private means “only visible within the enclosing class”. | . | protected means “only visible within the enclosing class and any subclasses” | . | . Protected: The methods or data members declared as protected are accessible within the same package or subclasses in different packages. . Public: . The public access modifier has the widest scope among all other access modifiers. | Classes, methods, or data members that are declared as public are accessible from everywhere in the program. There is no restriction on the scope of public data members. | . Getters/Setters: getter - return the value, ex. accessors methods setter - sets/update the value, ex. mutators methods . Build example code in jupyter notebook with Linked List, Queues, and Stacks. . Show familiarity with managing data (aka nodes in LL) in these structures. . Show familiarity with Generic data and ForEach loop support, similar to ArrayLists T. Here is sample Java Generic T and the Java Iterable interface by Geeks4Geeks. . Hacks:Code . Challenge #1 . Add and Delete elements from Queue. Working with the code that is given, you will need to adjust Add and write Delete, to output from the Queue as follows. .",
            "url": "https://tianbinliu.github.io/Fastpage/csa/2023/03/19/Generics-Types-and-Collections-Hacks.html",
            "relUrl": "/csa/2023/03/19/Generics-Types-and-Collections-Hacks.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Type",
            "content": "Explore teacher&#39;s code: . a Jupyter Notebook that goes over key concepts in Teacher code and uses background from ChatGPT and from AP Classroom. . Answer what are Methods and Control Structures . Methods and Control Structures(AP Classroom): . Method signatures . visibility modifier | return type | name | parameter list | . Types of methods: void methods - not return a value return methods - have to have &quot;return&quot;, do return a value . Methods and Control Structures(chatGPT): . Methods are blocks of code that perform specific tasks and can be called and executed whenever necessary. They are used to organize code into reusable modules and can take in input parameters and return output values. . Control structures are used to control the flow of execution within a program. They determine when certain code blocks should be executed or skipped based on specific conditions or user input. Common control structures include conditional statements, loops, and switch statements. They are used to make decisions and repeat operations in a program. . Explore AP FRQ that teaches us about Methods and Control Structures FRQ . A FRQ usually involves a class that contains: . private instance variable | constructor | methods like return methods and void methods | preconditions which you do not need to write checks for the preconditions into your code | . Look at Diverse Arrays, Matrix in Teacher code and see if you think this is Methods and Control structures. . Diverse Arrays and Matrix are not methods and control structures. But in the code provided that contained DiverseArray and Matrix classes, it used several Methods and Control structures. Like Methods: arraySum, rowSums, isDiverse. Control Structures: for-loop and if-statement. . Look at Diverse Arrays, Matrix in Teacher code an see if you thing this fits Data Types. . In the teacher code provided, the diverse arrays and matrix are both defined as 2D Array, and array is a collection of data of the same type which is one of the reference data type. So in my case, both are fit the data type. . Math.random is covered in Number, this Teacher code associated with random is critical knowledge when taking the AP Exam. Random numbers in range like 7 to 9 is very important. . Math.random provided number between 0 and 1(not inclusive), so if we want to use it to provide a random number between 7 to 9, we can make it like that: 7 + (int)(2 * math.random()) + (int)(2 * math.random()) . Review DoNothingByValue, what is key knowledge here? . Key knowledge: . Using public instance value | Creating constructor | void Methods and return Methods | Control Structures - mainly for-loop | . It&#39;s like a completed FRQ Qs. . Review IntByReference, what is key knowledge here? . Key knowledge like DoNothingByValue: . Using public instance value | Creating constructor | void Methods and return Methods | Control Structures - mainly for-loop | . one difference: the tester method It&#39;s like a completed FRQ Qs. . Review Menu code. Try, Catch, Runnable are used to control program execution. See if there is a way to get this to work in Jupyter Notebooks. . It does not work out, I think the reason why is because we didn&#39;t have the package com.nighthawk.hacks.methodsDataTypes; in our directory which makes the whole project break down. . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . | import java.util.methodsDataTypes; cannot find symbol symbol: class methodsDataTypes . Define &quot;Method and Control Structures&quot;. To the Teacher, the Menu Code has the most work of methodDataTypes files that is related to the &quot;Methods and Control Structures&quot; topic. Such exploration would begin by asking &quot;describe Java Methods and Control structures&quot;. Are instances of MenuRow and Runnable data types, control structures? Does Driver have control structures, enumerate them. . Menu code that related to the &quot;Methods and Control Structures&quot; topic: . Are instances of MenuRow and Runnable data types, control structures? The instances of MenuRow and Runnable are data type, not control structures. | It used HashMap to define the instances of MenuRow as Integer which is a data type . Code: Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); . And for the Runnable, because it is used as an instance variable in the class and also used as input of the method, so it most likely a data type. . Code1: . String title; Runnable action; . Code2: public MenuRow(String title, Runnable action) . Does Driver have control structures, enumerate them. Yes it does have control structures: | while loop | . Explore AP Classroom: . Look at 1 unique FRQ per team member on AP Classroom that goes over Methods and Control Structures. Provide me a Jupyter Notebook, Video, and/or Code that cover key concepts. Make this better than AP Classroom, specifically trying to get these reviews to cover key parts in under Ten minutes. This option could use your PBL project and concepts if they were tailored to Teaching. . 2021 FRQ1-WordMatch . This question involves the WordMatch class, which stores a secret String and provides methods that compare other strings and provides methods that compare other strings to the secret String. You will write two methods in the WordMatch class. . Testing Requirements: . MCQ-40 questions: . Total time allotted: 90 minutes | . FRQ - 4 questions: . Total time allotted: 90 minutes | . // 2021 FRQ1 - WordMatch public class WordMatch{ // Create a class called WordMatch private String secret; // Private instance variable, always use private on AP Test; public WordMatch(String word){ //Constructor, set String secret as the input String word secret = word; } public int scoreGuess(String guess){ // part a, return method int count = 0; //Create a counter int value that stores how many times String guess appears in String secret for (int i=0; i&lt;(secret.length()-(guess.length()-1)); i++){ if (secret.substring(i, i+guess.length()).equals(guess)){ //for loop, and if-statement check how many times String guess appears in String secret count++; } } return count * guess.length() * guess.length(); } public String findBetterGuess(String guess1, String guess2){ //part2, return method String betterGuess = &quot;&quot;; //Set a String value to be returned as the method been called. if (scoreGuess(guess1) &gt; scoreGuess(guess2)){ //compare the two inputs by using if-statement and first method that we created above betterGuess += guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)){ betterGuess += guess2; } else if (scoreGuess(guess1) == scoreGuess(guess2)){ // if the two String value inputs are qual to each other, then compare them alphabetically if (guess1.compareTo(guess2)&gt;0){ betterGuess += guess1; } else{ betterGuess += guess2; } } return betterGuess; } public static void main(String[] args) { // tester method WordMatch tester = new WordMatch(&quot;Tianbin&quot;); System.out.println(tester.scoreGuess(&quot;in&quot;)); System.out.println(tester.findBetterGuess(&quot;in&quot;, &quot;i&quot;)); } } WordMatch.main(null); . 4 in . Data type we used in the FRQ: . Primitive data type: int Reference data type: String . I was confused about the data type of String and I checked Mr.M&#39;s data type lesson but it didn&#39;t talk about any of it. So I asked chatGPT, and that the result I got: . The String class is considered a reference type because it is a class that encapsulates a sequence of characters, and it is defined in the Java standard library. However, the String class is special in that it is often treated like a primitive type in Java, due to the fact that it is immutable and has some unique properties. . Methods we used: . return methods: scoreGuess and findBetterGuess, which should return a value when you called the methods. . void methods: main, the tester method . compareTo() - compare alphabetically between two Strings, return 0 if String is equal to its String input and return a value greater 0 if String is greater than the String it compare to, and return a value less than 0 if String is less than the String it compare to. ex. guess1.compareTo(guess2)&gt;0, if String guess1 is greater than guess2 . substring() - return the letters between two indexes in a String, the end index is not inclusive. .",
            "url": "https://tianbinliu.github.io/Fastpage/csa/2023/03/12/Data-Type.html",
            "relUrl": "/csa/2023/03/12/Data-Type.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "AP CSA HW",
            "content": "2D Array . . Answer: D . . Answer : B . . Answer: B . . //part (a.) int check = 0; private void fillBlock(String str){ String [][] letterBlock = new String [numRows][numCols]; for (r = 0; r &lt; letterBlock.length ; r++){ for (c = 0; c &lt; letterBlock[r].length; c++){ if (check &gt; str.length()){ letterBlock[r][c] = &quot;A&quot;; } else{ letterBlock[r][c] = str.substring(check, check + 1); } check ++; } } } . Unit1 Primitive Type / Unit2 Using Object . . Answer: D . . Answer: C . . Answer: D . . Answer : D . . Answer: C . . Answer: E . Unit2 Using Object . . System.out.println(7+8+(7+8)+&quot;Hellow&quot;+7+8+(7+8)); . 30Hellow7815 . Answer: D . . Answer: D . . String s = &quot;holy&quot;; String t = s.substring(4); if (s.equals(t)){ System.out.println(&quot;1&quot;); } . Answer: E . . Answer: C . . Answer: C . . Answer: A . . Answer: D . . public static String scrambleWord(String word){ for (i=0; i &lt; word.length(); i++){ if (word.substring(i, i+1) == &quot;A&quot; &amp;&amp; word.substring(i+1, i+2) != &quot;A&quot;){ swap(word, i, i+1); } } return word; } . Unit 3 If Statement . . Answer: D . . Answer: D . . Answer: D . . Answer: A . . Answer: C . . Answer: D . . Answer: C . . Answer: A . . Answer: B . . Answer: E . Unit 4 Iteration . . Answer: D . . Asnwer: E . . Answer: B . . Answer: D . . Answer: A . . Answer: D . . Answer: A . . Answer: C . . 0021003 . Answer: A? but why 3 mod 4 = 3? . . Answer: B . . Answer: A . . Answer: D . . // part (a) public LogMessage (String message){ this.machineID = message.substring(0, message.indexOf(&quot;:&quot;)); this.description = message.substring(message.indexOf(&quot;:&quot;) + 1, message.length()); } . //part (b) public boolean containsWord(String keyword){ boolean contain = true; if (description.indexOf(keyword) == -1){ contain = false; } return contain; } . . // part (a) public void replaceNthOccurrence(String str, int n, String repl){ } . Unit 5 Classes . . Answer: B . . Answer: C . . Answer: E . . Answer: A . . Answer: A . . . Answer: D . . Answer: D . . Answer: E . . Answer&#65306;D. n is int. . . Answer: C . . Answer: C . . Answer: B . . Answer: E . . Answer: C . Unit5 part2 HW . . Answer: D . . Answer: B . . Answer: C, reason: java &#33258;&#21160;&#35843;&#29992;toString method . . Answer: B . . Answer: C . . Answer: A . . Answer: E . . Answer: B . . Answer D . . Answer: A . Unit 5 QS 33 FRQ Part a . . public class FrogSimulation{ private int goalDistance; private int maxHops; private int hopDistance(); public boolean simulate(){ boolean reach = false; for (i=0; i&lt;maxHops &amp;&amp; reach == false; i++){ goalDistance -= hopDistance(); if (goalDistance &lt; 0){ reach = true; } } return reach; } public double runSimulations (int num) } . Unit 5 QS 33 FRQ Part b . . public double runSimulations (int num){ int count = 0; for (i=0; i &lt; num; i++){ if (simulate()){ count ++; } } return (double)count/num; } . Unit 5 QS 34 FRQ Part a . . public static int numberOfLeapYears(int year1, int year2){ int count = 0; for (i = year1; i &lt;= year2 ; i++){ if (isLeapYear(i)){ System.out.println(&quot;leap year: &quot; + i); count++ } } return count; } . Unit 5 QS 34 FRQ Part b . . public static int dayOfWeek(int month, int day, int year){ return (firstDayOfYear(year) + dayOfYear(month, day, year)-1)%7 } . Unit6 . . Answer: E . . Answer: E, reason: &#22914;&#26524;&#27809;&#26377;&#36127;&#25968;&#65292;&#26368;&#21518;return&#30340;&#26159;&#19968;&#20010;&#27491;&#25968; . . Answer: E, reason: i++&#19981;&#22312;&#32467;&#23614;&#65292;&#26368;&#21518;&#20250;out of range . . Answer: C . . Answer: C, reason: &#25913;&#21464;b&#20063;&#20250;&#25913;&#21464;arr &#22240;&#20026; arr&#20648;&#23384;&#30340;&#26159;address . . Answer: D, &#19968;&#20010;Array&#20648;&#23384;&#65292;class object&#12290; . . Answer: B, Reason: &#27809;&#26377;toString method&#25152;&#20197;III&#19981;&#34892; . . Answer: C . . Answer: E, stuArr&#20648;&#23384;&#30340;&#37117;&#26159;student object&#25152;&#20197;III&#26159;&#23545;&#30340; . . Answer: B . . Answer: D. &#20294;&#19981;&#28165;&#26970;&#20026;&#20160;&#20040;&#65292;&#21482;&#26159;&#20854;&#20182;&#22235;&#20010;&#36873;&#39033;&#37117;&#26159;&#30830;&#23450;&#26159;&#38169;&#30340;&#25152;&#20197;&#36873;&#30340;D . . Answer: C, reason: for-each loop &#22312;&#36825;&#31181;&#24773;&#20917;&#19979;&#19981;&#33021;&#20462;&#25913;card . . Answer: D . . Answer: D . Unit6 part2 HW . . Answer: A . . Answer: B . . Answer: C . . Answer: A . . Answer: B . . Answer: D . . Answer: C . . Answer: D . . Answer: A . . Answer: B . . Answer: A . . Answer: D . . Answer: D . . Answer: C . . Answer: A . . Answer: C . . Answer: B . . Answer: B . . Answer: D . . Answer: C . . Answer: E . . Answer: A . . Answer: C . . Answer: A . . Answer: A . . Answer: B . . Answer: C . . Answer: A . . Answer: C . . Answer: A . . Answer: B . . Answer: B . Unit6 FRQ 1-3 . . public boolean isLevelTrailSegment(int start, int end){ int max = markers[start]; int min = markers[start]; for (i = start; i &lt;= end; i++){ if(markers[i] &lt; min){ min = markers[i]; } else if (marker[i] &gt; max){ max = markers[i]; } } return (max - min) &lt;= 10; } . . public boolean isDifficult(){ int counter = 0; for (i = 1, i &lt; markers.length; i++){ if (math.abs(markers[i]-markers[i-1]) &gt;= 30){ counter ++; } } return counter &gt;= 3; } . . public int limitAmplitude(int limit){ int counter = 0; for (i = 0; i &lt; samples.length; i++){ if (samples[i] &gt; limit){ samples[i] = limit; counter++; } else if (samples[i] &lt; -1*limit){ samples[i] = -1*limit; counter++; } } return counter; } . . public void trimSilenceFromBeginning(){ int counter = 0; for (i=0; i &lt; samples.length &amp;&amp; (samples[i] == 0); i++){ counter++; } int[] secondArray = new int[samples.length - counter]; for (k=0; k &lt; secondArray.length; k++){ secondArray[k] = samples[counter + k]; } samples = secondArray; } . . public TokenPass(int playerCount){ board = new int[playerCount]; for (i=0, i&lt;board.length; i++){ board[i] = (int) (math.random() * 10) + 1; } currentPlayer = (int) (math.random() * playerCount); } . . public void distributeCurrentPlayerTokens(){ int counter = currentPlayer; for (i=1, i&lt;=board[currentPlayer], i++){ if ((counter)%(board.length -1) != 0){ board[currentPlayer] -= 1; counter ++; board[counter] += 1; } else if ((counter)%(board.length -1) == 0){ board[currentPlayer] -= 1; counter = 0; board[counter] += 1; } } } . Unit7 HW . . Answer: D, &#26356;&#35814;&#32454; . . Answer: A . . Answer: B, ArrayList &#26159; List &#30340;&#23376;&#31867; . . Answer: E . . Answer: C . . Answer: A . . Answer: A, &#24038;&#36793;&#30340;Object&#27809;&#26377;&#29992;&#65292;&#20294;&#21491;&#36793;&#30340;set&#36824;&#26159;&#25191;&#34892;&#20102; . . Answer: E . . Answer: D, getValue&#20986;&#26469;&#30340;&#26159;double1.&#32780;double&#21487;&#20197;&#30452;&#25509;&#29992;== . . Answer: E . . Answer: E . . Answer: C . . Answer: C, II&#20174;&#21491;&#24448;&#24038;&#25152;&#20197;remove&#19981;&#20250;&#25913;&#21464;element&#30340;index&#39034;&#24207;&#12290;&#21482;&#26377;I&#20250;skip&#19968;&#20123;element . . Answer: B . . Answer: E . . Answer: A . . Answer: E . . Answer: D . . Answer: E . . Answer: B . . Answer: D . . Answer: C . . Answer: A . . Answer: C . FRQ 29-30 . . private int getIndexForFit(NumberTile tile){ if (board.size() == 0){ return 0; } for (i=0; i&lt;board.size(); i++){ if (((board.get(i)).getRight()).equals(tile.getLeft()) &amp;&amp; ((board.get(i+1)).getLeft()).equals(tile.getRight())){ return i+1; } else if (i == board.size()-1){ if (((board.get(i)).getRight()).equals(tile.getLeft())){ return i; } } else{ return -1; } } } . . public boolean insertTile(NumberTile tile){ int index = board.getIndexForFit(tile); return board.add(index, tile); } . . public int getTotalBoxes(){ int total = 0; for (CookieOrder order : orders){ total += order.getNumBoxes(); } return total; } . . public int removeVariety(String cookieVar){ int total = 0; for (i=0; i &lt; goodies.size(); i++){ if (((goodies.get(i)).getVariety()).equals(cookieVar) &gt; -1){ total += (goodies.get(i)).getNumBoxes(); goodies.remove(i); i--; } } return total; } . ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;(1, 2, 2, 3); int val = 4; int index = 0; while(val &gt; numList.get(index)){ index++; } numList.add(index, val) System.out.println(numList); . | ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;(1, 2, 2, 3); no suitable constructor found for ArrayList(int,int,int,int) constructor java.util.ArrayList.ArrayList(int) is not applicable (actual and formal argument lists differ in length) constructor java.util.ArrayList.ArrayList() is not applicable (actual and formal argument lists differ in length) constructor java.util.ArrayList.ArrayList(java.util.Collection&lt;? extends java.lang.Integer&gt;) is not applicable (actual and formal argument lists differ in length) . Unit 9 MCQ HW . . Answer: E, &quot;.&quot;&#24182;&#19981;&#20250;&#20998;&#21106;&#65292;&#25152;&#20197;ob.compareTo(intOb)&#26159;&#19968;&#20010;&#25972;&#20307; . . Answer: A . . Answer: A . . Answer: E . . Answer: D . . Answer: C . . Answer: D . . Answer: E super&#26377;&#26102;&#19981;&#26159;&#24517;&#35201;&#30340; . . Answer: D&#65292;&#24403;&#20004;&#20010;class&#20013;&#26377;&#30456;&#21516;&#21517;&#23383;&#30340;method&#65292;&#19981;&#21152;super&#40664;&#35748;&#20351;&#29992;&#23376;&#31867;class&#30340;method . . Answer: B . . Answer: E, SavingsAccount &#20013;&#30340; addInterest method &#19981;&#33021;&#34987;&#29238;&#31867;BankAccount class&#24341;&#29992;&#12290; . . Answer: D . . Answer: C . . Answer: D . . Answer: B, private method &#19981;&#33021;&#34987;&#20854;&#20182;class&#24341;&#29992;&#12290;&#21363;&#20351;&#26377;extends&#20063;&#19981;&#34892; . . Answer: A&#65292; data&#29305;&#25351;variable . . Answer: E . . Answer: D, &#21516;&#21517;&#20989;&#25968;&#35843;&#29992;&#30340;&#26102;&#20505;&#20250;&#20808;&#35843;&#29992;&#21518;&#38754;&#30340;&#20063;&#23601;&#26159;Thing2&#20013;&#30340;cal method . . Answer: B . . Answer: B . . Answer: B . . Answer: A . . Answer: B . . Answer: D . . Answer: B, &#21516;&#21517;&#20989;&#25968;&#35843;&#29992;&#30340;&#26102;&#20505;&#20250;&#20808;&#35843;&#29992;&#21518;&#38754;&#30340;&#20063;&#23601;&#26159;Jersey&#20013;&#30340;speak method . . Answer: A . Unit 9 HW . MCQ . C Correct answer: A | B | A Correct answer: E | C | B | D | E | E | B | D or E Correct answer: D | ? Correct answer: C | A | C | B | ? Correct answer: D | E | C Correct answer: E | FRQ #44 . //part a public class RandomStringChooser{ private String[] wordArray; public int num =0; public RandomStringChooser(String[] str){ wordArray = str; } public String getNext(){ String a = &quot;&quot;; if (wordArray[num] != null){ a = wordArray[num]; num++; } else{ a = &quot;None&quot;; } return a; } } RandomStringChooser sChooser = new RandomStringChooser(wordArray); . // part b public RandomLetterChooser(String str){ super.(getSingleLetters(str)); } .",
            "url": "https://tianbinliu.github.io/Fastpage/ap/2022/12/20/APTest.html",
            "relUrl": "/ap/2022/12/20/APTest.html",
            "date": " • Dec 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "JavaScript Tutorial",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript teacher.setRole(&quot;Teacher&quot;); // set the role var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/09/25/JS.html",
            "relUrl": "/jupyter/2022/09/25/JS.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "FRQ Methods and control structures",
            "content": ". public class FRQ1 { public static int numberOfLeapYears(int year1, int year2) { //create a static method boolean isLeapYear = false; //create a boolean called isLeapYear for(int i = year1 ; i &lt;= year2 &amp;&amp; i &gt; 0; i++) { if (i % 4 ==0){ //determine if i(year) is or not a leap year if (i % 100 == 0){ if (i % 400 == 0){ isLeapYear = true; } else { isLeapYear = false; } } else isLeapYear = true; } else isLeapYear = false; if (isLeapYear){ //method that if the boolean is true(if i is a leap year), print the year System.out.println(i + &quot; is a leap year.&quot;); } } return year1; //return code (no actual use, just to make sure the class goes well) } } FRQ1.numberOfLeapYears(1900, 2000); . 1904 is a leap year. 1908 is a leap year. 1912 is a leap year. 1916 is a leap year. 1920 is a leap year. 1924 is a leap year. 1928 is a leap year. 1932 is a leap year. 1936 is a leap year. 1940 is a leap year. 1944 is a leap year. 1948 is a leap year. 1952 is a leap year. 1956 is a leap year. 1960 is a leap year. 1964 is a leap year. 1968 is a leap year. 1972 is a leap year. 1976 is a leap year. 1980 is a leap year. 1984 is a leap year. 1988 is a leap year. 1992 is a leap year. 1996 is a leap year. 2000 is a leap year. . 1900 .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/09/19/frq1.html",
            "relUrl": "/jupyter/2022/09/19/frq1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Jupyter Notebook lesson on ifs",
            "content": "Build your own Jupyter Notebook lesson on ifs . Explain if, if-else, and if-elseif-else. | Make a markdown block before you sample code | Comment in code to describe each decision | . // if, if-else, and if-elseif-else are all conditional statement and return a boolean value(true or false) //else statement does not include condition. //Example of only one if statement int a = 13; //set a value int b = 14; //set a value public ifstatement(){ if (a &lt; b){ //if the condition is true then execute the code inside the curly braces System.out.println(&quot;highest value:&quot; + b); // code that will be executed } } //Example of if-else statement public ifelsestatement(){ if (a &lt; b){ //if the condition is true then execute the code inside the curly braces System.out.println(&quot;highest value:&quot; + b); // code that will be executed } else if (a &gt; b){ //if the first if statement is not true and the condition of the else-if statement is true, then execute the code inside the curly braces System.out.println(&quot;highest value:&quot; + a); // code that will be executed } } //Example of if-elseif-else statement public ifelseifelse(){ if (a &lt; b){ //if the condition is true then execute the code inside the curly braces System.out.println(&quot;highest value:&quot; + b); // code that will be executed } else if (a &gt; b){ //if the first if statement is not true and the condition of the else-if statement is true, then execute the code inside the curly braces System.out.println(&quot;highest value:&quot; + a); // code that will be executed } else { //if all if-statement above this else-statement is not true, then execute the code inside the curly braces System.out.println(&quot;highest value: none&quot;); // code that will be executed } } . highest value:14 . Add to lesson switch-case . Create and if-elseif-elseif-elsif-else statement, 5 or more conditions. | Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. | Make a markdown block before each code example | Comment/establish a style of comments for your if-elseif and switch-case code blocks | int a = random(1,500); int b = random(1,1000); int c = 500; if(c &lt; a = b){ //if a is equal to b and greater than c, execute the code below System.out.println(&quot;two highest value a and b:&quot; + a); // code that will be executed } else if(c &gt; a = b){ //if the condition of statement above is not true, then check for this condition. System.out.println(&quot;highest value c:&quot; + c); // code that will be executed } else if(b &lt; a &lt; c){//if the condition of statement above is not true, then check for this condition. System.out.println(&quot;highest value c:&quot; + c); // code that will be executed } else if(c &lt; a &lt; b){//if the condition of statement above is not true, then check for this condition. System.out.println(&quot;highest value b:&quot; + b); // code that will be executed } else if(a = c &gt; b){//if the condition of statement above is not true, then check for this condition. System.out.println(&quot;two highest value a and c:&quot; + b); // code that will be executed } else if(a = c &lt; b){//if the condition of statement above is not true, then check for this condition. System.out.println(&quot;highest value:&quot; + b); // code that will be executed } else{//if all the conditions of statements above are not true, then execute the code below. System.out.println(&quot;Can you tell me the answer?&quot;); // code that will be executed } . | int a = random(ram1,ram3); cannot find symbol symbol: method random(int,int) . Finish lesson with De Morgan&#39;s law . Describe De Morgan&#39;s law | ex. !(A || B) = (not A) and (not B) ; !(A &amp;&amp; B) = (not A) or (not B) | . Illustrate De Morgan&#39;s law | Not (A and B) is the same as Not A or Not B. | Not (A or B) is the same as Not A and Not B. | . Show some code running that shows understanding | int a = 50; int b = 50; if (!((a &lt; b) || (a &gt; b))){ System.out.println(&quot;a and b is equal&quot;); // code that will be executed } . a and b is equal .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/09/11/lession-ifs.html",
            "relUrl": "/jupyter/2022/09/11/lession-ifs.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Code.org blog with key learnings",
            "content": "Discuss creating and Using Objects . //we can use code below to create a object with a subclass called Writer. Writer mywriter = new Writer(); //creating an object call mywriter. //and using the object like give him an order mywriter.write(); // mywriter(objectname).write(methodname in the subclass)(); . Discuss extends . //extends like: a subclass &quot;extends&quot; the super class, the subclass can inherits its attributes and behaviors from the super class //If we want to create a subclass extends a super class we can use the code below public class Writer extends Jobs { public Writter(){ //constructor super() //&quot;super&quot; means the method(attributes and behaviors) in the super class &quot;Jobs&quot; is also access to the subclass &quot;Writer&quot; } } . In code.org unit 1 lesson 14, I tried to test the code below but found an error: &quot;There is no more paint in the painter&#39;s bucket&quot;; so I can&#39;t even start to draw the pattern. . myPatternPainter.paintPattern(&quot;white&quot;); .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/09/06/Codeweb.html",
            "relUrl": "/jupyter/2022/09/06/Codeweb.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Key learning on Primitives",
            "content": "Data Types . Define in a Class the following data types | Describe in comments how each data type choice is appropriate to application | . public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; //It can be used in app that stored user information like age double aDouble = 89.9; //It like integer, but It can used to store information(number) after the decimal point boolean aBoolean = true; // It can be used to define a value is true or not which we can use it in if statement String aString = &quot;Hello, World!&quot;; //It can be used to print information in the screen for users to see String aStringFormal = new String(&quot;Greetings, World!&quot;); } } DefinePrimitives.main(null) . Perform arithmetic expressions and assignment in a program code . Perform compound assignment operator (ie +=), add comments to describe the result of operator . int a = 100; int b = 200; int c = 0; c = (a + b) * (a - b); // c is equal to (a + b) * (a - b) c += (100 * a)/b * a; // c is equal to c + (a + b) * (a - b) System.out.println(&quot;c: &quot; + c); . c: -25000 . Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) . Answer: if the result in a variable is an integer number or the expression is int, then the data type is integer. If the result include a decimal point or the expression is double, then it is double. . Input Primitive data . Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. . double a = 12.2/2; int b = (int)(a + 0.5); System.out.println(&quot;12.2/2 =&quot; + a); System.out.println(&quot;12/2 = &quot; + (int)a); System.out.println(&quot;12.2/2 rounded = &quot; + b); . 12.2/2 =6.1 12/2 = 6 12.2/2 rounded = 6 .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/08/28/Primitives.html",
            "relUrl": "/jupyter/2022/08/28/Primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "A Jupyter Notebook using Bash to show that I have all the key tools installed.",
            "content": "python --version . Python 3.9.12 . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu118.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu118.04, mixed mode, sharing) . javac --version . javac 11.0.16 . conda --version . conda 4.14.0 . npm -version . 3.10.10 . python2 --version . Python 2.7.17 . python3 --version . Python 3.9.12 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/tianbinliu/.local/share/jupyter/kernels/bash java /home/tianbinliu/.local/share/jupyter/kernels/java javascript /home/tianbinliu/.local/share/jupyter/kernels/javascript python3 /home/tianbinliu/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/tianbinliu/anaconda3/share/jupyter/kernels/python3 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . conda list . # packages in environment at /home/tianbinliu/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . conda info . active environment : base active env location : /home/tianbinliu/anaconda3 shell level : 1 user config file : /home/tianbinliu/.condarc populated config files : conda version : 4.14.0 conda-build version : 3.21.8 python version : 3.9.12.final.0 virtual packages : __cuda=11.5=0 __linux=5.10.16.3=0 __glibc=2.27=0 __unix=0=0 __archspec=1=x86_64 base environment : /home/tianbinliu/anaconda3 (writable) conda av data dir : /home/tianbinliu/anaconda3/etc/conda conda av metadata url : None channel URLs : https://repo.anaconda.com/pkgs/main/linux-64 https://repo.anaconda.com/pkgs/main/noarch https://repo.anaconda.com/pkgs/r/linux-64 https://repo.anaconda.com/pkgs/r/noarch package cache : /home/tianbinliu/anaconda3/pkgs /home/tianbinliu/.conda/pkgs envs directories : /home/tianbinliu/anaconda3/envs /home/tianbinliu/.conda/envs platform : linux-64 user-agent : conda/4.14.0 requests/2.27.1 CPython/3.9.12 Linux/5.10.16.3-microsoft-standard-WSL2 ubuntu/18.04.2 glibc/2.27 UID:GID : 1000:1000 netrc file : None offline mode : False .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/08/26/verify-tools.html",
            "relUrl": "/jupyter/2022/08/26/verify-tools.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Fastpages Java Notebook Blog Post",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! . public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;hello&quot;); } } HelloWorld.main(null); . hello . Week 2 Gui Menu . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Home&quot;, &quot;Game1&quot;, &quot;Creators&#39; interests&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(600,400); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; int highestGrade = 0; int lowestGrade = 0; int grade1 = 50; int grade2 = 100; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Mini Online Games center&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action highestGrade = Math.max(grade1, grade2); lowestGrade = Math.min(grade1, grade2); message.setText( &quot;&lt;html&gt;Let start with a warm up math game about how to calculate your average Grade&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;First we have two grades: &quot; + grade1 + &quot; and &quot; + grade2 + &quot;&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;Then find the highest Grade, using highestGrade = Math.max(grade1, grade2);&quot; + &quot;&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;Now we find the highest Grade: &quot; + highestGrade + &quot;&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;Then find the lowest Grade, using lowestGrade = Math.min(grade1, grade2);&quot; + &quot;&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;Now we find the lowest Grade: &quot; + lowestGrade + &quot;&lt;br&gt;&quot; + &quot;&lt;br&gt;&quot; + &quot;Last, average the two value, we get our average grade: &quot; + (highestGrade - lowestGrade) + &quot;&lt;/html&gt;&quot; ); } else if ( selection.equals(MENUS[2]) ) { msg = &quot;My interest: play video games and my pair&#39;s interest: dog training&quot;; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Iteration with 2D Array . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings String [][] cthulhus; //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; cthulhus = new String[][]{ { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- &quot;, &quot;⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ &quot;, &quot;⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ &quot; }, { &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡟⠀⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⡇⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡧⣅⠀⠀⠐⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣗⠢⠀⠀⠀⠹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠑⠂⠀⠀⠸⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠶⠶⠲⢶⣦⣄⠀⠀⠀⠀⢻⣤⠃⠄⠀⠴⢺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠙⢿⠷⣄⠀⠀⢸⡦⠚⣁⡀⢈⣹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣇⠀⠀⣷⡖⢐⢩⡡⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⡟⣿⡆⠀⢸⡧⠄⡄⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⠆⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡷⣳⡅⠀⠀⣷⠠⠩⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⡤⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⢨⡟⣦⡆⠀⠀⣾⣧⠄⠂⣁⡀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠣⢀⠀⠀⠀⠀⠀⠀⣠⣮⢲⣿⠇⠀⠰⣼⣿⠀⡀⣀⠀⡀⠀⣼⣷⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠒⢶⣆⢾⢿⣭⡿⠃⠀⠠⠤⠊⢽⡗⡴⢀⠁⠃⠀⣿⡼⢀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢴⣛⣿⣿⡿⢿⣳⡄⠠⠤⠬⠈⣿⣷⠄⠄⡈⠘⠣⠹⣿⣷⣄⢠⣴⣚⠟⠛⠉⠙⠳⣆⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⣆⠋⠯⡷⣾⠟⠀⠀⡃⣯⠀⠠⠐⢋⡟⢿⡁⢁⠀⢂⢔⣆⠈⢻⣿⠖⢨⣀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠈⣧⠀⢠⡋⣉⠤⠬⣽⡏⠀⠀⣢⣭⣀⡉⠄⠳⢺⡇⢸⠫⠑⠀⠄⣀⣈⣄⠾⣟⠿⡖⢘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⢸⢀⡖⠛⠂⣰⣦⣿⢀⡀⣿⣿⠛⠁⠀⠈⢒⣿⠁⢸⠗⠒⠂⢄⠁⠀⢻⣏⣮⠀⠙⣦⡄⠀⠉⠀⠀⢠⠎⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⡟⢸⡷⢾⠑⢥⣨⣿⢃⣬⠞⡿⠀⠄⠁⢀⢠⡟⠀⢸⡤⠈⠠⠀⠑⡀⠹⣷⣿⡄⠀⣷⡤⠀⠈⠘⡀⡞⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⢠⠃⣿⣬⢴⠻⣁⣛⣿⡼⠁⢰⢤⣤⠘⠀⠁⢋⡇⠀⣾⡁⠀⢀⠀⡦⢤⢴⣿⣽⣷⢀⣿⠤⠀⠈⠉⠃⣧⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⡚⠀⣿⣀⣀⡕⢧⣨⣭⣇⠀⣄⠀⡀⠔⠌⠋⠙⡇⢰⣿⠙⠋⠃⠈⡀⠀⢀⠉⣿⣻⣿⡧⠀⠀⠈⠈⠁⢸⡀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⡀⠀⠇⠀⢸⣈⠐⢀⡔⠥⣤⣽⣶⠃⠩⠁⠀⠐⠀⢲⣧⣾⠗⠄⠂⠀⠀⠈⠙⠸⠀⣿⣽⡯⠀⠀⠀⠀⠉⠃⠀⢇⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠂⠀⠰⡄⠀⣿⡿⠈⠈⣰⠂⠤⢼⠆⠒⠒⡀⠄⢀⣨⣿⣁⢀⣀⠀⠈⠢⠤⢀⡆⢠⣿⠯⢀⡀⠀⠀⠄⠘⠀⠀⢸⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠂⢼⣿⡟⡞⠉⠍⠐⠸⡄⠀⠀⠄⠈⣩⡟⠉⠡⠈⠀⢀⡀⠀⢀⣠⢃⠾⠍⠀⠀⠀⠀⠈⠁⠃⠀⠀⡈⠀⢐⠀⠀⠀&quot; }, //Cthulhu 2 { &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣶⣷⣾⣿⣾⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣄⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⢀⣴&quot;, &quot; ⠀⠀⠀⠀⠀⣰⣾⣿⣿⣿⣿⣿⣿⡟⠛⠿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠟⠁⠀⢀⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣰⣾⣾⣿&quot;, &quot; ⠀⠀⠀⠀⣼⣿⣿⠏⡿⠋⠀⠀⠉⢿⡆⠀⠈⠻⣿⣯⣿⡇⠀⠀⠀⠀⠀⣾⣿⣿⣿⣏⠀⠀⣠⣾⣿⣿⣿⣿⠋⢀⣴⣬⣿⣿⡿⡛⢿⣷&quot;, &quot; ⠀⠀⠀⠀⣿⣿⠃⠀⠁⠀⠀⠀⠀⣸⣿⠀⠀⠀⣿⣿⣿⣦⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⢀⣾⣿⣿⣿⣾⠟⣣⣴⠋⢻⣿⣏⣉⣿⣿⣿⣿&quot;, &quot; ⠀⠀⠀⠈⣿⣿⡀⠀⠀⠀⠀⢀⣰⡿⠃⠀⠀⠀⣿⣥⣟⡝⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣼⣿⣿⣾⡟⢻⣿⡿⡟⠿⣿⣿⣿⣿⣿&quot;, &quot; ⠀⠀⠀⠀⠘⠿⣿⣶⣶⣶⣶⠿⠛⠁⠀⠀⠀⣴⡿⣷⣿⣥⣴⣶⣶⣶⣤⣤⣀⣿⣿⣿⣿⣫⣿⣿⣿⡿⢛⣿⣿⠛⠟⠈⢠⣿⣿⣿⣿⣿&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ ⠀⠀⣀⡤⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢷⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣩⣿⡿⢿⣉⣽⣿⢟⠟⠉⠀⢠⣿⣿⣿⣿⣿⣿&quot;, //[2][0] &quot; _⎐_/ ⠀⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣟⣿⣿⣿⣿⢿⠾⠿⠿⢿⢿⣦⣿⣿⣿⡿⠻⣯⣼⣿⣿⡛⠁⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿ &quot;, &quot; &lt;-2-&gt; ⣸⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣟⣿⣿⣿⣅⡀⠀⣀⣀⣤⣴⡿⣿⠛⣻⣷⡾⠿⣯⡸⢿⣿⣦⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿ &quot;, &quot; 〈 〉 ⢿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⢼⣿⣯⣿⣛⣿⣿⠿⣿⣛⣿⣷⣼⣿⣿⠟⣻⡳⢖⠛⢿⣿⣟⠛⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿ &quot;, &quot; ⠘⣿⣿⣦⣤⣤⣀⣠⣤⣴⣿⡿⣿⡿⠟⠁⠀⠙⠿⢿⢿⣿⣿⣿⣿⣿⠿⣿⡯⠅⠉⠀⠙⢿⣿⣿⣿⡛⠿⣿⣿⣷⣦⣿⣿⣷⣿⣿⣿⣿&quot;, &quot; ⠀⠘⠻⢿⣿⣿⣿⣿⣿⡿⠿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠁⠈⠁⠈⠉⣽⣿⠋⠀⠀⠀⠀⣀⡤⠶⠻⠿⠛⠻⠛⠿⠛⠿⠛⠛⠛⠋⠉⠉⠁&quot;, &quot; ⠀⠀⠀⠀⠀⠉⠁⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣄⣀⣀⣤⠾⠋⠀⠀⠀⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, //Cthulhu 3 { &quot; ⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot; ⠀⠀⠀⠀⠀⠀⣼⡏⠀⠀⠀ʕ ͡° ͜ʖ ° ͡ʔ⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot; ⠀⠀⠀⠀⠀⠀⢿⣧⠀⠀⠀⠀ _⍾_/ &quot;, &quot; ⠀⠀⠀⠀⠀⠀⠈⢻⣷⡀⠀⠀⠀==3==⠀⠀⠀⠈⠢⣄⡀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄ _/ _ ⠉⠙⠻⣷⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣄⣮⠟⠀⠀&quot;, &quot; ⠀⢀⣠⣲⣶⠶⣄⠀⠀⣸⠯⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⠟⠇⠀⠀⠀&quot;, &quot; ⠀⡞⣾⡟⢻⣍⣼⠇⣰⣿⡿⠀⠀⠀⠀⠀⠀⠀⣶⠦⣀⠀⠀⠀⠀⠩⢪⢄⠀⠀&quot;, &quot; ⢸⢮⡭⡇⠀⠙⢉⣼⡿⣾⠁⠀⠀⠀⠀⠀⠀⠀⠁⠵⣦⡉⠈⠀⠀⢀⢪⡫⡄⠀&quot;, &quot; ⠘⣸⣮⣷⡀⠀⣸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣭⣆⠀⠀⡐⠗⡭⠢⠀&quot;, &quot; ⠀⠘⡽⡫⣿⡄⢿⣿⣷⣱⠀⠀⠀⠀⠀⠀⠀⠀⣠⢖⢝⣳⠞⣠⣼⣏⢏⣧⠛⠀&quot;, &quot; ⠀⠀⠰⣉⣟⣿⡘⣿⣿⣿⢵⡀⠀⠀⠀⠀⠀⠀⣟⡏⠀⠀⣾⣿⣿⡇⣠⡑⠀⠀&quot;, &quot; ⠀⠀⠀⠈⠉⠉⠁⠘⠉⠛⠈⠁⠀⠀⠀⠀⠀⠀⠈⠋⠀⠀⠉⠉⠉⠁⠉⠀⠀⠀&quot; }, //Cthulhu 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot;, &quot; &quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⣹⣿⡇⠀⠀⠀⠀⠀⠀⣴⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠈⢿⣿⡆⠀⠀⠀⠀⠀⣼⣿⡇⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⢸⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡇⠀⠀⠀⢠⣿⣿⡇⠀⠀⠀⠀⠀⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠃⠀⠀⠀⢸⣿⣿⡇⠀⠀⠀⠀⠀⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠠⣶⣾⣷⣦⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⠘⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠘⣿⡀⠈⠻⣿⣿⣆⡀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣄⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠈⠁⠀⠀⠈⢿⣿⣷⡀⠀⠀⠀⠀⠀⢸⣿⣿⣷⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⢸⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⢀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣷⡄⠀⠀⠀⠀⠈⣿⣿⣿⡦⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⣽⣿⣿⠇⠀⠀⠀⠀⢠⣾⣿⡿⠿⠿⠿⣿⣦⡀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣧⡀⠀⠀⠀⠀⢸⣿⣿⣿⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⢰⣿⣿⣿⠀⠀⠀⠀⣰⣿⣿⠏⠀⠀⠀⠸⠾⠿⠃&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣆⡀⠀⠀⠘⣿⣿⣿⡇⠀⣿⣿⣿⡇⠀⠀⠀⢀⣾⣿⣿⡏⠀⠀⠀⠀⣻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣷⡄⠀⠀⣿⣿⣿⡟⢰⣿⣿⣿⡇⠀⠀⠀⣼⣿⣿⣿⠀⠀⠀⠀⠀⣻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⢹⣿⣿⣇⢸⣿⣿⣿⡇⠀⢀⣼⣿⣿⣿⠃⠀⠀⠀⠀⢀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣧⢸⣿⣿⣿⣸⣿⣿⣿⠀⢠⣾⣿⣿⣿⠃⠀⠀⠀⠀⢀⣼⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⢀⣠⣴⣾⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣵⣾⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); System.out.println(&quot;One day, there are total of five little monkeys want to jump on the bed to sleep&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int Crow = 4; int row1 = 4; int Crow2 = 1; int Ccol2 = 0; for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //how many separate parts are there in a monkey monkey? System.out.println(&quot;000000000000000000000000000000000000000000000000000000&quot;); System.out.println(&quot;They line up and goes one by one&quot;); System.out.println(&quot;000000000000000000000000000000000000000000000000000000&quot;); for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt;= (monkeyCount - 1); col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); //this is new line between separate parts } //this new line gives separation between stanza of poem System.out.println(); } System.out.println(); System.out.println(&quot;--&quot;); System.out.println(); System.out.println(&quot;Look, one little monkeys jumping on the bed&quot;); for (int col1 = 0; col1 &lt; monkeys[row1].length; col1++) { System.out.print(monkeys[row1][col1] + &quot; &quot;); System.out.println(); } row1 -= 1; System.out.println(); System.out.println(&quot;--&quot;); System.out.println(); System.out.println(&quot;--&quot;); System.out.println(); System.out.println(&quot;jumping to the the arms of Cthulhu&quot;); System.out.println(); for (int Ccol = 0; Ccol &lt; cthulhus[Crow].length; Ccol++) { // prints specific part of the monkey from the column System.out.print(cthulhus[Crow][Ccol] + &quot; &quot;); //this is new line between separate parts System.out.println(); } System.out.println(); System.out.println(&quot;--&quot;); System.out.println(); System.out.println(&quot;Now, there are &quot; + (i-1) + &quot; little monkeys left&quot;); //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; Crow -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot;--&quot;); for (int Crow1 = 3; Crow1 != -1; Crow1--) { for (int Ccol1 = 0; Ccol1 != 5; Ccol1++) { // prints specific part of the monkey from the column System.out.print(monkeys[Ccol1][Crow1] + &quot; &quot;); //this is new line between separate parts } System.out.println(); } System.out.println(&quot;--&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢛⣛⣼⣿⣿⣿⣿⣿⣿⠟⠛⠛⠋⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣡⣈⡈⢻⣿⣿⣿⣿⡇⢰⣿⣿⣿⣿⣿⣿⣿⠋⠈⠀⣂⣐⡒⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⣚⣸⡃⢹⣿⣿⣿⣿⣷⣀⣍⡀⠑⠍⠻⣿⡏⠠⡀⢉⣉⠙⢻⣷⡄⠐⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⠘⣿⣿⣿⣿⣿⣿⣿⣿⣦⡄⠀⠀⢀⠠⠹⣿⣿⣇⢈⣿⡇⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠈⠌⠉⠉⠛⠻⣿⣿⣿⣿⡀⠁⠀⠂⠉⠈⠉⠁⣰⠟⠁⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣖⠀⠀⠀⠙⡻⣿⣿⡇⠀⠀⢔⣿⣷⡾⠋⠀⠀⠀⠀⣤⡟⠉⣠⡤⠙⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠙⠋⠙⠛⠛⠟⢻⣿⣿⣷⣄⠀⠀⠀⢜⣿⠃⠀⡀⠀⠿⠍⠀⠀⠀⣠⣶⣿⣿⣷⠜⢇⡀⣀⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⠿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠸⠟⣿⣆⡀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⢉⣾⣿⣿⣿⣿⣿⡌⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⡿⠉⠀⠀⠀⣤⣶⣤⣌⠀⠀⠀⠀⠪⠀⠀⠛⢻⠀⠀⠉⠀⠀⠀⠀⠀⡆⠀⠀⠈⠛⠿⣿⣿⣿⡿⠃⠀⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣇⠀⠀⠄⡤⠁⣽⣿⣿⣿⣄⠀⠘⣢⡀⠀⠀⠈⠡⠀⠀⢐⠈⠡⠀⠀⠁⠀⠤⠀⠠⠀⠀⢿⠉⠑⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣧⠄⠀⠀⠠⣴⣿⣿⣿⣿⣿⠆⠀⢨⣿⡄⠀⠀⠀⠀⠀⡀⠠⠀⡀⠀⠀⠀⠀⢀⡀⡀⠀⠀⠀⠀⢈⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣶⡀⠀⠀⠙⠿⠿⣿⡿⠋⠀⠀⣲⠿⠋⠀⠀⠉⠀⠠⠀⠊⠀⠀⠀⠀⠀⣠⢸⡁⠑⣀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣤⡄⠀⠀⠀⠀⠀⠀⡀⣾⣿⠀⠀⢠⡀⠁⠀⠀⠀⠀⠀⣀⣤⣶⡿⣟⡅⣢⠀⠀⠀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣴⠒⠒⠿⣿⡇⠀⢀⣗⣶⣶⢦⠖⢴⣖⡛⠉⣰⣷⠿⢫⣾⣞⣿⣿⣾⣿⣿⣯⡅⣼⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⠀⠀⣐⠀⠸⠹⠀⢸⣹⣿⢣⡏⣾⣿⣿⣡⣼⢟⡡⣴⣿⣿⣿⣮⡻⣿⣿⣿⡿⡟⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠸⡄⠉⠀⡸⡐⠀⡿⠿⠾⢸⣇⠢⠶⠛⢋⣡⣯⢾⣿⣿⣿⣿⣿⣿⢘⢿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡥⣄⠈⠙⠋⠀⢠⠌⠀⠀⠀⠀⠀⠀⢀⡴⣱⣿⣿⣏⠿⠟⢛⣛⣛⣋⣿⣷⣮⣝⢿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣶⣿⣿⣷⣼⣞⢤⡞⠀⠀⠀⠀⠀⢀⣴⡿⢱⣿⡿⣿⣿⣶⣍⡻⣿⣿⣿⣿⣿⣿⣿⣷⣌⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⣿⣿⢟⡝⣾⣿⣿⣿⣿⢋⣾⠺⠁⠀⠀⠀⣀⣴⣿⢟⣱⣿⣿⣿⣷⣯⣽⢟⣴⣿⣿⡿⢋⣽⠟⣫⣽⣿⣼⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⡿⣷⠟⣼⣿⣿⣼⣿⢃⣿⡇⠀⠀⠀⣠⣾⣿⣿⢯⣿⣿⣿⣿⣿⣿⣿⢳⣿⣿⣿⠇⣰⣿⣣⣾⣿⣿⣿⡗⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⣿⣿⢇⡟⣴⣿⣿⣿⣿⢣⣿⣿⠉⠀⣠⣾⣿⣿⡿⣣⣿⣿⡿⣿⣿⣿⡿⣱⣿⣿⣿⡟⣼⣿⢿⣿⡿⣿⣿⣿⣧⢿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⡿⣯⢞⣼⣿⣟⣵⣿⣯⣿⣿⠿⣠⣾⣿⣿⣿⡟⣱⣿⣿⣿⣿⣶⣽⢿⣾⣿⣿⣿⡿⢹⣿⣳⡿⣫⣾⣿⣿⣿⡿⣾⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⢳⣿⢸⣿⣿⣿⣿⣿⠾⠿⢏⣿⣿⣿⣿⡿⠟⣼⣿⣿⣿⣿⣿⡿⣵⣿⣿⣿⣿⣿⣇⣿⣵⣟⣾⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⡿⣼⡿⣸⣿⡿⠿⠛⠉⢀⣴⣿⣿⡿⢛⣼⠆⣾⣿⡿⣿⣿⣿⢟⣾⣿⣿⣿⣿⣿⣿⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⢯⣶⡟⣨⣥⣖⠁⠀⠀⢠⣿⡿⢟⣷⣾⣿⢏⣼⣿⣿⣿⣦⣟⣽⣿⡟⣿⣿⣿⣿⣿⣿⡇⢹⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣵⡿⢋⣴⣿⡿⠀⠀⠀⣀⣿⣭⣾⣿⣿⣿⢏⣾⣿⣿⣿⣿⢋⣽⣿⣿⣧⢹⣿⣿⢿⣡⡾⡃⣾⣿⡔⣋⣙⣟⣙⣿⣿⡇⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣷⣿⣿⡿⠃⠀⠀⠀⣟⣫⢿⣿⣿⣿⡟⣼⣿⣿⣎⡽⣵⣿⣿⣿⣿⣿⡷⣯⣾⢿⣿⣿⡧⢹⡿⣫⣥⣯⣭⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⡿⠁⠀⢤⣶⡆⣿⣿⣿⣿⣿⡿⣸⣿⣿⣿⢯⣾⣿⣿⣿⣿⣿⡿⣛⣫⣼⣿⣿⣿⠇⣼⣿⣶⣾⣿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿&quot;); System.out.println(&quot;⣿⣿⣿⡇⣨⣷⣿⣿⣿⠸⣿⣿⣿⣿⢣⣿⣶⣧⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⠛⢋⣡⣴⣽⣿⣯⣭⣭⣭⣭⣿⣿⡇⣿⣿⣿⣿⣿⣿&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy One day, there are total of five little monkeys want to jump on the bed to sleep ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ (◕‿◕✿) _⍾_/ ==4== _/ _ 000000000000000000000000000000000000000000000000000000 They line up and goes one by one 000000000000000000000000000000000000000000000000000000 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ -- Look, one little monkeys jumping on the bed (◕‿◕✿) _⍾_/ ==4== _/ _ -- -- jumping to the the arms of Cthulhu (◕‿◕✿) _⍾_/ ==4== _/ _ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⣹⣿⡇⠀⠀⠀⠀⠀⠀⣴⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠈⢿⣿⡆⠀⠀⠀⠀⠀⣼⣿⡇⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⢸⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡇⠀⠀⠀⢠⣿⣿⡇⠀⠀⠀⠀⠀⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠃⠀⠀⠀⢸⣿⣿⡇⠀⠀⠀⠀⠀⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠠⣶⣾⣷⣦⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⠘⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠘⣿⡀⠈⠻⣿⣿⣆⡀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣄⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠈⠁⠀⠀⠈⢿⣿⣷⡀⠀⠀⠀⠀⠀⢸⣿⣿⣷⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⢸⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⢀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣷⡄⠀⠀⠀⠀⠈⣿⣿⣿⡦⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⠀⣽⣿⣿⠇⠀⠀⠀⠀⢠⣾⣿⡿⠿⠿⠿⣿⣦⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣧⡀⠀⠀⠀⠀⢸⣿⣿⣿⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⢰⣿⣿⣿⠀⠀⠀⠀⣰⣿⣿⠏⠀⠀⠀⠸⠾⠿⠃ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣆⡀⠀⠀⠘⣿⣿⣿⡇⠀⣿⣿⣿⡇⠀⠀⠀⢀⣾⣿⣿⡏⠀⠀⠀⠀⣻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣷⡄⠀⠀⣿⣿⣿⡟⢰⣿⣿⣿⡇⠀⠀⠀⣼⣿⣿⣿⠀⠀⠀⠀⠀⣻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⢹⣿⣿⣇⢸⣿⣿⣿⡇⠀⢀⣼⣿⣿⣿⠃⠀⠀⠀⠀⢀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣧⢸⣿⣿⣿⣸⣿⣿⣿⠀⢠⣾⣿⣿⣿⠃⠀⠀⠀⠀⢀⣼⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⢀⣠⣴⣾⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣵⣾⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ -- Now, there are 4 little monkeys left 000000000000000000000000000000000000000000000000000000 They line up and goes one by one 000000000000000000000000000000000000000000000000000000 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ -- Look, one little monkeys jumping on the bed ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ -- -- jumping to the the arms of Cthulhu ⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⣼⡏⠀⠀⠀ʕ ͡° ͜ʖ ° ͡ʔ⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢿⣧⠀⠀⠀⠀ _⍾_/ ⠀⠀⠀⠀⠀⠀⠈⢻⣷⡀⠀⠀⠀==3==⠀⠀⠀⠈⠢⣄⡀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄ _/ _ ⠉⠙⠻⣷⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣄⣮⠟⠀⠀ ⠀⢀⣠⣲⣶⠶⣄⠀⠀⣸⠯⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⠟⠇⠀⠀⠀ ⠀⡞⣾⡟⢻⣍⣼⠇⣰⣿⡿⠀⠀⠀⠀⠀⠀⠀⣶⠦⣀⠀⠀⠀⠀⠩⢪⢄⠀⠀ ⢸⢮⡭⡇⠀⠙⢉⣼⡿⣾⠁⠀⠀⠀⠀⠀⠀⠀⠁⠵⣦⡉⠈⠀⠀⢀⢪⡫⡄⠀ ⠘⣸⣮⣷⡀⠀⣸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣭⣆⠀⠀⡐⠗⡭⠢⠀ ⠀⠘⡽⡫⣿⡄⢿⣿⣷⣱⠀⠀⠀⠀⠀⠀⠀⠀⣠⢖⢝⣳⠞⣠⣼⣏⢏⣧⠛⠀ ⠀⠀⠰⣉⣟⣿⡘⣿⣿⣿⢵⡀⠀⠀⠀⠀⠀⠀⣟⡏⠀⠀⣾⣿⣿⡇⣠⡑⠀⠀ ⠀⠀⠀⠈⠉⠉⠁⠘⠉⠛⠈⠁⠀⠀⠀⠀⠀⠀⠈⠋⠀⠀⠉⠉⠉⠁⠉⠀⠀⠀ -- Now, there are 3 little monkeys left 000000000000000000000000000000000000000000000000000000 They line up and goes one by one 000000000000000000000000000000000000000000000000000000 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 -- Look, one little monkeys jumping on the bed ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 -- -- jumping to the the arms of Cthulhu ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣶⣷⣾⣿⣾⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣄⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⢀⣴ ⠀⠀⠀⠀⠀⣰⣾⣿⣿⣿⣿⣿⣿⡟⠛⠿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠟⠁⠀⢀⣿⣿⣿⣿⣿⠋⠀⠀⢀⣠⣰⣾⣾⣿ ⠀⠀⠀⠀⣼⣿⣿⠏⡿⠋⠀⠀⠉⢿⡆⠀⠈⠻⣿⣯⣿⡇⠀⠀⠀⠀⠀⣾⣿⣿⣿⣏⠀⠀⣠⣾⣿⣿⣿⣿⠋⢀⣴⣬⣿⣿⡿⡛⢿⣷ ⠀⠀⠀⠀⣿⣿⠃⠀⠁⠀⠀⠀⠀⣸⣿⠀⠀⠀⣿⣿⣿⣦⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⢀⣾⣿⣿⣿⣾⠟⣣⣴⠋⢻⣿⣏⣉⣿⣿⣿⣿ ⠀⠀⠀⠈⣿⣿⡀⠀⠀⠀⠀⢀⣰⡿⠃⠀⠀⠀⣿⣥⣟⡝⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣼⣿⣿⣾⡟⢻⣿⡿⡟⠿⣿⣿⣿⣿⣿ ⠀⠀⠀⠀⠘⠿⣿⣶⣶⣶⣶⠿⠛⠁⠀⠀⠀⣴⡿⣷⣿⣥⣴⣶⣶⣶⣤⣤⣀⣿⣿⣿⣿⣫⣿⣿⣿⡿⢛⣿⣿⠛⠟⠈⢠⣿⣿⣿⣿⣿ ʕ(▀ ⍡ ▀)ʔ ⠀⠀⣀⡤⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢷⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣩⣿⡿⢿⣉⣽⣿⢟⠟⠉⠀⢠⣿⣿⣿⣿⣿⣿ _⎐_/ ⠀⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣟⣿⣿⣿⣿⢿⠾⠿⠿⢿⢿⣦⣿⣿⣿⡿⠻⣯⣼⣿⣿⡛⠁⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿ &lt;-2-&gt; ⣸⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣟⣿⣿⣿⣅⡀⠀⣀⣀⣤⣴⡿⣿⠛⣻⣷⡾⠿⣯⡸⢿⣿⣦⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿ 〈 〉 ⢿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⢼⣿⣯⣿⣛⣿⣿⠿⣿⣛⣿⣷⣼⣿⣿⠟⣻⡳⢖⠛⢿⣿⣟⠛⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿ ⠘⣿⣿⣦⣤⣤⣀⣠⣤⣴⣿⡿⣿⡿⠟⠁⠀⠙⠿⢿⢿⣿⣿⣿⣿⣿⠿⣿⡯⠅⠉⠀⠙⢿⣿⣿⣿⡛⠿⣿⣿⣷⣦⣿⣿⣷⣿⣿⣿⣿ ⠀⠘⠻⢿⣿⣿⣿⣿⣿⡿⠿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠁⠈⠁⠈⠉⣽⣿⠋⠀⠀⠀⠀⣀⡤⠶⠻⠿⠛⠻⠛⠿⠛⠿⠛⠛⠛⠋⠉⠉⠁ ⠀⠀⠀⠀⠀⠉⠁⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣄⣀⣀⣤⠾⠋⠀⠀⠀⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ -- Now, there are 2 little monkeys left 000000000000000000000000000000000000000000000000000000 They line up and goes one by one 000000000000000000000000000000000000000000000000000000 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ -- Look, one little monkeys jumping on the bed ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ -- -- jumping to the the arms of Cthulhu ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡟⠀⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⡇⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡧⣅⠀⠀⠐⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣗⠢⠀⠀⠀⠹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠑⠂⠀⠀⠸⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠶⠶⠲⢶⣦⣄⠀⠀⠀⠀⢻⣤⠃⠄⠀⠴⢺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠙⢿⠷⣄⠀⠀⢸⡦⠚⣁⡀⢈⣹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣇⠀⠀⣷⡖⢐⢩⡡⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⡟⣿⡆⠀⢸⡧⠄⡄⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⠆⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡷⣳⡅⠀⠀⣷⠠⠩⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⡤⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⢨⡟⣦⡆⠀⠀⣾⣧⠄⠂⣁⡀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠣⢀⠀⠀⠀⠀⠀⠀⣠⣮⢲⣿⠇⠀⠰⣼⣿⠀⡀⣀⠀⡀⠀⣼⣷⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠒⢶⣆⢾⢿⣭⡿⠃⠀⠠⠤⠊⢽⡗⡴⢀⠁⠃⠀⣿⡼⢀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢴⣛⣿⣿⡿⢿⣳⡄⠠⠤⠬⠈⣿⣷⠄⠄⡈⠘⠣⠹⣿⣷⣄⢠⣴⣚⠟⠛⠉⠙⠳⣆⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⣆⠋⠯⡷⣾⠟⠀⠀⡃⣯⠀⠠⠐⢋⡟⢿⡁⢁⠀⢂⢔⣆⠈⢻⣿⠖⢨⣀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠈⣧⠀⢠⡋⣉⠤⠬⣽⡏⠀⠀⣢⣭⣀⡉⠄⠳⢺⡇⢸⠫⠑⠀⠄⣀⣈⣄⠾⣟⠿⡖⢘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢸⢀⡖⠛⠂⣰⣦⣿⢀⡀⣿⣿⠛⠁⠀⠈⢒⣿⠁⢸⠗⠒⠂⢄⠁⠀⢻⣏⣮⠀⠙⣦⡄⠀⠉⠀⠀⢠⠎⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⡟⢸⡷⢾⠑⢥⣨⣿⢃⣬⠞⡿⠀⠄⠁⢀⢠⡟⠀⢸⡤⠈⠠⠀⠑⡀⠹⣷⣿⡄⠀⣷⡤⠀⠈⠘⡀⡞⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⢠⠃⣿⣬⢴⠻⣁⣛⣿⡼⠁⢰⢤⣤⠘⠀⠁⢋⡇⠀⣾⡁⠀⢀⠀⡦⢤⢴⣿⣽⣷⢀⣿⠤⠀⠈⠉⠃⣧⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⡚⠀⣿⣀⣀⡕⢧⣨⣭⣇⠀⣄⠀⡀⠔⠌⠋⠙⡇⢰⣿⠙⠋⠃⠈⡀⠀⢀⠉⣿⣻⣿⡧⠀⠀⠈⠈⠁⢸⡀⠀⠀⠀⠀⠀ ⠀⠀⠀⡀⠀⠇⠀⢸⣈⠐⢀⡔⠥⣤⣽⣶⠃⠩⠁⠀⠐⠀⢲⣧⣾⠗⠄⠂⠀⠀⠈⠙⠸⠀⣿⣽⡯⠀⠀⠀⠀⠉⠃⠀⢇⠀⠀⠀⠀⠀ ⠀⠀⠀⠂⠀⠰⡄⠀⣿⡿⠈⠈⣰⠂⠤⢼⠆⠒⠒⡀⠄⢀⣨⣿⣁⢀⣀⠀⠈⠢⠤⢀⡆⢠⣿⠯⢀⡀⠀⠀⠄⠘⠀⠀⢸⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠈⠂⢼⣿⡟⡞⠉⠍⠐⠸⡄⠀⠀⠄⠈⣩⡟⠉⠡⠈⠀⢀⡀⠀⢀⣠⢃⠾⠍⠀⠀⠀⠀⠈⠁⠃⠀⠀⡈⠀⢐⠀⠀⠀ -- Now, there are 1 little monkeys left 000000000000000000000000000000000000000000000000000000 They line up and goes one by one 000000000000000000000000000000000000000000000000000000 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ -- Look, one little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ -- -- jumping to the the arms of Cthulhu ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- ⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ ⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ -- Now, there are 0 little monkeys left No more monkeys jumping on the bed -- -- ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ --0-- ++1++ &lt;-2-&gt; ==3== ==4== _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) -- -- 0000000000000000000000000000000000 THE END 0000000000000000000000000000000000 ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢛⣛⣼⣿⣿⣿⣿⣿⣿⠟⠛⠛⠋⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣡⣈⡈⢻⣿⣿⣿⣿⡇⢰⣿⣿⣿⣿⣿⣿⣿⠋⠈⠀⣂⣐⡒⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⣚⣸⡃⢹⣿⣿⣿⣿⣷⣀⣍⡀⠑⠍⠻⣿⡏⠠⡀⢉⣉⠙⢻⣷⡄⠐⠀⠀⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⠘⣿⣿⣿⣿⣿⣿⣿⣿⣦⡄⠀⠀⢀⠠⠹⣿⣿⣇⢈⣿⡇⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠈⠌⠉⠉⠛⠻⣿⣿⣿⣿⡀⠁⠀⠂⠉⠈⠉⠁⣰⠟⠁⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣖⠀⠀⠀⠙⡻⣿⣿⡇⠀⠀⢔⣿⣷⡾⠋⠀⠀⠀⠀⣤⡟⠉⣠⡤⠙⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠙⠋⠙⠛⠛⠟⢻⣿⣿⣷⣄⠀⠀⠀⢜⣿⠃⠀⡀⠀⠿⠍⠀⠀⠀⣠⣶⣿⣿⣷⠜⢇⡀⣀⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⠿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠸⠟⣿⣆⡀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⢉⣾⣿⣿⣿⣿⣿⡌⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⡿⠉⠀⠀⠀⣤⣶⣤⣌⠀⠀⠀⠀⠪⠀⠀⠛⢻⠀⠀⠉⠀⠀⠀⠀⠀⡆⠀⠀⠈⠛⠿⣿⣿⣿⡿⠃⠀⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣇⠀⠀⠄⡤⠁⣽⣿⣿⣿⣄⠀⠘⣢⡀⠀⠀⠈⠡⠀⠀⢐⠈⠡⠀⠀⠁⠀⠤⠀⠠⠀⠀⢿⠉⠑⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣧⠄⠀⠀⠠⣴⣿⣿⣿⣿⣿⠆⠀⢨⣿⡄⠀⠀⠀⠀⠀⡀⠠⠀⡀⠀⠀⠀⠀⢀⡀⡀⠀⠀⠀⠀⢈⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣶⡀⠀⠀⠙⠿⠿⣿⡿⠋⠀⠀⣲⠿⠋⠀⠀⠉⠀⠠⠀⠊⠀⠀⠀⠀⠀⣠⢸⡁⠑⣀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣤⡄⠀⠀⠀⠀⠀⠀⡀⣾⣿⠀⠀⢠⡀⠁⠀⠀⠀⠀⠀⣀⣤⣶⡿⣟⡅⣢⠀⠀⠀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣴⠒⠒⠿⣿⡇⠀⢀⣗⣶⣶⢦⠖⢴⣖⡛⠉⣰⣷⠿⢫⣾⣞⣿⣿⣾⣿⣿⣯⡅⣼⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⠀⠀⣐⠀⠸⠹⠀⢸⣹⣿⢣⡏⣾⣿⣿⣡⣼⢟⡡⣴⣿⣿⣿⣮⡻⣿⣿⣿⡿⡟⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠸⡄⠉⠀⡸⡐⠀⡿⠿⠾⢸⣇⠢⠶⠛⢋⣡⣯⢾⣿⣿⣿⣿⣿⣿⢘⢿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡥⣄⠈⠙⠋⠀⢠⠌⠀⠀⠀⠀⠀⠀⢀⡴⣱⣿⣿⣏⠿⠟⢛⣛⣛⣋⣿⣷⣮⣝⢿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣶⣿⣿⣷⣼⣞⢤⡞⠀⠀⠀⠀⠀⢀⣴⡿⢱⣿⡿⣿⣿⣶⣍⡻⣿⣿⣿⣿⣿⣿⣿⣷⣌⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⢟⡝⣾⣿⣿⣿⣿⢋⣾⠺⠁⠀⠀⠀⣀⣴⣿⢟⣱⣿⣿⣿⣷⣯⣽⢟⣴⣿⣿⡿⢋⣽⠟⣫⣽⣿⣼⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⣷⠟⣼⣿⣿⣼⣿⢃⣿⡇⠀⠀⠀⣠⣾⣿⣿⢯⣿⣿⣿⣿⣿⣿⣿⢳⣿⣿⣿⠇⣰⣿⣣⣾⣿⣿⣿⡗⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⢇⡟⣴⣿⣿⣿⣿⢣⣿⣿⠉⠀⣠⣾⣿⣿⡿⣣⣿⣿⡿⣿⣿⣿⡿⣱⣿⣿⣿⡟⣼⣿⢿⣿⡿⣿⣿⣿⣧⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⡿⣯⢞⣼⣿⣟⣵⣿⣯⣿⣿⠿⣠⣾⣿⣿⣿⡟⣱⣿⣿⣿⣿⣶⣽⢿⣾⣿⣿⣿⡿⢹⣿⣳⡿⣫⣾⣿⣿⣿⡿⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⢳⣿⢸⣿⣿⣿⣿⣿⠾⠿⢏⣿⣿⣿⣿⡿⠟⣼⣿⣿⣿⣿⣿⡿⣵⣿⣿⣿⣿⣿⣇⣿⣵⣟⣾⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿ ⣿⣿⡿⣼⡿⣸⣿⡿⠿⠛⠉⢀⣴⣿⣿⡿⢛⣼⠆⣾⣿⡿⣿⣿⣿⢟⣾⣿⣿⣿⣿⣿⣿⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿ ⣿⢯⣶⡟⣨⣥⣖⠁⠀⠀⢠⣿⡿⢟⣷⣾⣿⢏⣼⣿⣿⣿⣦⣟⣽⣿⡟⣿⣿⣿⣿⣿⣿⡇⢹⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣵⡿⢋⣴⣿⡿⠀⠀⠀⣀⣿⣭⣾⣿⣿⣿⢏⣾⣿⣿⣿⣿⢋⣽⣿⣿⣧⢹⣿⣿⢿⣡⡾⡃⣾⣿⡔⣋⣙⣟⣙⣿⣿⡇⣿⣿⣿⣿⣿⣿ ⣿⣷⣿⣿⡿⠃⠀⠀⠀⣟⣫⢿⣿⣿⣿⡟⣼⣿⣿⣎⡽⣵⣿⣿⣿⣿⣿⡷⣯⣾⢿⣿⣿⡧⢹⡿⣫⣥⣯⣭⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⡿⠁⠀⢤⣶⡆⣿⣿⣿⣿⣿⡿⣸⣿⣿⣿⢯⣾⣿⣿⣿⣿⣿⡿⣛⣫⣼⣿⣿⣿⠇⣼⣿⣶⣾⣿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⡇⣨⣷⣿⣿⣿⠸⣿⣿⣿⣿⢣⣿⣶⣧⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⠛⢋⣡⣴⣽⣿⣯⣭⣭⣭⣭⣿⣿⡇⣿⣿⣿⣿⣿⣿ . Class running Fibonacci . Original Class (The class that I will use to extends for, keep not change) . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For loop Example . In the code below, I create a new class called ForFibo that extends the original Fibo class.(means it can use all attributes of Fibo class) I use super() to change this.size from 20 to 10. . Then I using super.name to change this.name to &quot;For loop example&quot; so when I print out the method name it will print out this string. . I create a new class init2(), inside the class is the for loop that use to print out the fibonacci number from 0 to 10. . public class ForFibo extends Fibo{ public ForFibo(){ super(10); } int forn1 = 0; int forn2 = 0; int forn3 = 0; protected void init2() { super.name = &quot;For loop example&quot;; System.out.println(&quot;Init method = &quot; + super.name); for (int n=0 ; n&lt;=super.size; n++ ){ forn3 = (forn1 + forn2); System.out.println(n + &quot;th fibonacci number is: &quot; + forn3); forn1 = forn2; forn2 = forn3; if (n &lt; 2){ forn2 = 1; forn1 = 0; } } } static public void main(String[] args) { ForFibo fib = new ForFibo(); fib.init2(); } } ForFibo.main(null); . Init method = For loop example 0th fibonacci number is: 0 1th fibonacci number is: 1 2th fibonacci number is: 1 3th fibonacci number is: 2 4th fibonacci number is: 3 5th fibonacci number is: 5 6th fibonacci number is: 8 7th fibonacci number is: 13 8th fibonacci number is: 21 9th fibonacci number is: 34 10th fibonacci number is: 55 . Then for the while loop, there is similar between the for loop and while loop. Both need to contain condition and both run until the condition is not true. So basically I just need to keep the main part of code and change few thing to make it work. . public class WhileFibo extends Fibo{ public WhileFibo(){ super(10); } int whilei = 0; int whilei2 = 0; int forn1 = 0; int forn2 = 0; int forn3 = 0; protected void init3() { super.name = &quot;While loop example&quot;; System.out.println(&quot;Init method = &quot; + super.name); while (whilei2&lt;=super.size){ forn3 = (forn1 + forn2); System.out.println(whilei2 + &quot;th fibonacci number is: &quot; + forn3); forn1 = forn2; forn2 = forn3; if (whilei2 &lt; 2){ forn2 = 1; forn1 = 0; } whilei2 += 1; } } static public void main(String[] args) { WhileFibo fib = new WhileFibo(); fib.init3(); } } WhileFibo.main(null); . Init method = While loop example 0th fibonacci number is: 0 1th fibonacci number is: 1 2th fibonacci number is: 1 3th fibonacci number is: 2 4th fibonacci number is: 3 5th fibonacci number is: 5 6th fibonacci number is: 8 7th fibonacci number is: 13 8th fibonacci number is: 21 9th fibonacci number is: 34 10th fibonacci number is: 55 . And also for the while loop, because it can only contain the condition inside the parenthesis(it can&#39;t create a value) So I create set a new value above the while loop. . int whilei = 0; int whilei2 = 0; int forn1 = 0; int forn2 = 0; int forn3 = 0; . Last, for the recursion, I create a new class called recu(), inside the class is the code that define the fibonacci by using recursion. . If the input number is greater and equal to 2, then it will return the fibonacci for the number. . If the number is less than 2 such as 1 and 0, it will just print out the input number which is also the same as the fibonacci It should has. . If the number is less than 0(negative), it will print out the number and also warm you that you shouldn&#39;t input a negative number. . public class ReFibo extends Fibo{ public ReFibo(){ super(20); } static long recu(long n) { if (n &gt;= 2) return recu(n - 1) + recu(n - 2); else return n; } int forn1 = 0; int forn2 = 0; int forn3 = 0; protected void init4() { super.name = &quot;Recursion example&quot;; System.out.println(&quot;Init method = &quot; + super.name); for (int n=0 ; n&lt;=super.size; n++ ) { System.out.println(n + &quot;th fibonacci number is: &quot; + recu(n)); if (n &lt; 0){ System.out.println(&quot;You shouldn&#39;t input a negative number!!&quot;); } } } static public void main(String[] args) { ReFibo fib = new ReFibo(); fib.init4(); } } ReFibo.main(null); . Init method = Recursion example 0th fibonacci number is: 0 1th fibonacci number is: 1 2th fibonacci number is: 1 3th fibonacci number is: 2 4th fibonacci number is: 3 5th fibonacci number is: 5 6th fibonacci number is: 8 7th fibonacci number is: 13 8th fibonacci number is: 21 9th fibonacci number is: 34 10th fibonacci number is: 55 11th fibonacci number is: 89 12th fibonacci number is: 144 13th fibonacci number is: 233 14th fibonacci number is: 377 15th fibonacci number is: 610 16th fibonacci number is: 987 17th fibonacci number is: 1597 18th fibonacci number is: 2584 19th fibonacci number is: 4181 20th fibonacci number is: 6765 . Fetch and Backed RapidAPI. (Pair/Individual) . Find an API and implement Fetch following Covid example. Answer these questions in implementation… . Benefit of using and API? | Benefit(s) of backend implementation? | Java RapidAPI . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/complexSearch&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;a5693b4414msh85cfb00ddeafe1cp1631ecjsnd910ff3015d0&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;spoonacular-recipe-food-nutrition-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;results&#34;:[{&#34;id&#34;:592479,&#34;title&#34;:&#34;Kale and Quinoa Salad with Black Beans&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/592479-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:547775,&#34;title&#34;:&#34;Creamy Avocado Pasta&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/547775-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:818941,&#34;title&#34;:&#34;Avocado Toast with Eggs, Spinach, and Tomatoes&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/818941-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:495111,&#34;title&#34;:&#34;Citrus Sesame Kale&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/495111-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:689502,&#34;title&#34;:&#34;Melt In Your Mouth Kale Salad&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/689502-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:582897,&#34;title&#34;:&#34;Mexican Salad with Lime Dressing&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/582897-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:777037,&#34;title&#34;:&#34;Weekly Meal Plan&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/777037-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:801710,&#34;title&#34;:&#34;Matcha Green Tea and Pineapple Smoothie&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/801710-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:695486,&#34;title&#34;:&#34;Green Smoothie&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/695486-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;},{&#34;id&#34;:812966,&#34;title&#34;:&#34;Low Carb Frosty&#34;,&#34;image&#34;:&#34;https://spoonacular.com/recipeImages/812966-312x231.jpg&#34;,&#34;imageType&#34;:&#34;jpg&#34;}],&#34;offset&#34;:0,&#34;number&#34;:10,&#34;totalResults&#34;:384161} . Q: Benefit of using and API? . A: . For me, It is easier to find and publish the information to the page. It help us to save time in finding information and coding, especially for some data that is updated all the time like the covid or airplane. . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.covid; illegal start of expression . Q: Benefit(s) of backend implementation? . A: I can&#39;t run this code in jupyter notebook so I don&#39;t exactly what the benefits. But I read the comment. It seems like the backend implementation will reload the API everyday(to get the newest information) and help to save our time and also help us to organize. . Arrays and Images . Hacks . Continue to work with Classes, Arrays, and 2D arrays. FYI, you may need to make a directory /tmp under notebook images. . Look at comments above and see if there is better conversions for ASCII to reduce elongation and distortion. . Try to convert images into Grey Scale, Red Scale, Blue Scale, and Green Scale. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir =&quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png . java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11.XToolkit at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:315) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:588) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:583) at java.base/java.security.AccessController.doPrivileged(Native Method) at java.desktop/java.awt.Toolkit.getDefaultToolkit(Toolkit.java:582) at java.desktop/java.awt.Image.getScaledInstance(Image.java:178) at Pics.resize(#32:1) at Pics.main(#32:1) at .(#34:1) . I can&#39;t run the code, but I have the idea of how to add red, green, blue scale. The key is to change the RGB value. EX. For red scale, change the R value to max ( using col.getRed() instead of using col.getRed() * 0.30 ), and change the G, B value to 0. . // gray scale Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); // red scale Color col = new Color(img.getRGB(j, i)); double pixVal = ((col.getRed() + 0 + 0)); . List and ArrayLists (Pair) . Show usage of Lists interfaces in a Jupyter Notebook example. Try using List interface and making a ArrayList object. Consider using an example that will be part of interest or final projects. This will probably become your favorite Data Structure in Java. . // Java Program to Demonstrate // Working of an ArrayList class // Importing all classes from java.util package import java.util.*; import java.lang.Math; // Main class class NBAPlayers { // Main driver method public static void main() { ArrayList&lt;String&gt; namePlayer = new ArrayList&lt;String&gt;(); ArrayList&lt;Integer&gt; CEPlayer = new ArrayList&lt;Integer&gt;(); Random random = new Random(); namePlayer.add(&quot;Boban Marjanovic&quot;); namePlayer.add(&quot;Sim Bhullar&quot;); namePlayer.add(&quot;Tacko Fall&quot;); namePlayer.add(&quot;Pavel Podkolzin&quot;); namePlayer.add(&quot;Chuck Nevitt&quot;); namePlayer.add(&quot;Yao Ming&quot;); namePlayer.add(&quot;Shawn Bradley&quot;); namePlayer.add(&quot;Manute Bol&quot;); namePlayer.add(&quot;Gheorghe Muresan&quot;); System.out.println(&quot;Top 9 tallest NBA players:&quot;); System.out.println(namePlayer); System.out.println(); int min = 0; int max= namePlayer.size(); int ranNum1 = random.nextInt(max); int ranNum2 = random.nextInt(max); int ranCE1 = random.nextInt(100); int ranCE2 = random.nextInt(100); CEPlayer.add(ranCE1); CEPlayer.add(ranCE2); System.out.println(&quot;1 vs 1 game !&quot;); System.out.println(); System.out.println(namePlayer.get(ranNum1) + &quot; vs &quot; + namePlayer.get(ranNum2)); System.out.println(); System.out.println(&quot;Their Combat Effectiveness:&quot;); System.out.println(CEPlayer); System.out.println(); if (ranCE1 &gt; ranCE2 ){ System.out.println(namePlayer.get(ranNum2) + &quot; lose the game&quot;); namePlayer.remove(ranNum2); } else if (ranCE2 &gt; ranCE1){ System.out.println(namePlayer.get(ranNum1) + &quot; lose the game&quot;); namePlayer.remove(ranNum1); } else if (ranCE2 == ranCE1){ System.out.println(&quot;Tie!&quot;); } System.out.println(); System.out.println(&quot;Now, there are only &quot; + namePlayer.size() + &quot; players&quot;); System.out.println(namePlayer); } } NBAPlayers.main(); . Top 9 tallest NBA players: [Boban Marjanovic, Sim Bhullar, Tacko Fall, Pavel Podkolzin, Chuck Nevitt, Yao Ming, Shawn Bradley, Manute Bol, Gheorghe Muresan] 1 vs 1 game ! Boban Marjanovic vs Manute Bol Their Combat Effectiveness: [18, 22] Boban Marjanovic lose the game Now, there are only 8 players [Sim Bhullar, Tacko Fall, Pavel Podkolzin, Chuck Nevitt, Yao Ming, Shawn Bradley, Manute Bol, Gheorghe Muresan] . POJO and @Entity Definition . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { private Long id; // Unique identifier private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getjoke() { return joke; } public void setjoke(String joke) { this.joke = joke; } public int gethaha() { return haha; } public void sethaha(int haha) { this.haha = haha; } public int getboohoo() { return boohoo; } public void setboohoo(int boohoo) { this.boohoo = boohoo; } } . Homework: 2006 Collegeboard FRQ parts 2a and 3a. Part 1 is optional. . . part 2a . public double purchasePrice(){ double taxableitem = getListPrice + (getListPrice * rate); // the purchase price of a taxableitem is its list price plus the tax on the item. // but because in the origin class (getListPrice()) is empty so I guess it will provide the value. return taxableitem; } . . . part 3a . Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); public int compareCustomer (Customer other){ if ( &gt; ){ // I don&#39;t know how to add the condition that shows the chosen object is greater than the input String integer = &quot;a positive integer&quot;; return integer; } else if ( &lt; ){ //same String integer = &quot;a negative integer&quot;; return integer; } else { return 0 } } . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] String [][] cthulhus; public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes }, { &quot; _⏄_/ &quot;, //[1][0] chin }, { &quot; --0-- &quot;, //[2][0] body }, { &quot; ⎛ ⎞ &quot; //[3][0] legs }, }; cthulhus = new String[][]{ { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- &quot;, &quot;⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ &quot;, &quot;⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;A story of a Monkey and Cthulhus&quot;); int Crow = 0; int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { for (int row = 0; row &lt; monkeyCount; row++) { for (int col = 0; col &lt; monkeys[row].length; col++) { System.out.print(monkeys[row][col] + &quot; &quot;); } System.out.println(); } monkeyCount = 0; } for (int Ccol = 0; Ccol &lt; cthulhus[Crow].length; Ccol++) { System.out.print(cthulhus[Crow][Ccol] + &quot; &quot;); System.out.println(); } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . A story of a Monkey and Cthulhus ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- ⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ ⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ 0000000000000000000000000000000000 THE END . 2019 FRQ1 HW . . . public class FRQ1 { public static int numberOfLeapYears(int year1, int year2) { //create a static method boolean isLeapYear = false; //create a boolean called isLeapYear for(int i = year1 ; i &lt;= year2 &amp;&amp; i &gt; 0; i++) { if (i % 4 ==0){ //determine if i(year) is or not a leap year if (i % 100 == 0){ if (i % 400 == 0){ isLeapYear = true; } else { isLeapYear = false; } } else isLeapYear = true; } else isLeapYear = false; if (isLeapYear){ //method that if the boolean is true(if i is a leap year), print the year System.out.println(i + &quot; is a leap year.&quot;); } } return year1; //return code (no actual use, just to make sure the class goes well) } } FRQ1.numberOfLeapYears(1900, 2000); . 1904 is a leap year. 1908 is a leap year. 1912 is a leap year. 1916 is a leap year. 1920 is a leap year. 1924 is a leap year. 1928 is a leap year. 1932 is a leap year. 1936 is a leap year. 1940 is a leap year. 1944 is a leap year. 1948 is a leap year. 1952 is a leap year. 1956 is a leap year. 1960 is a leap year. 1964 is a leap year. 1968 is a leap year. 1972 is a leap year. 1976 is a leap year. 1980 is a leap year. 1984 is a leap year. 1988 is a leap year. 1992 is a leap year. 1996 is a leap year. 2000 is a leap year. . 1900 . . public class FRQ1 { private static int firstDayOfYear(int year){ //helper method } public static int dayOfweek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int doy = dayOfYear(month, day, year); return (firstDay + doy - 1) % 7; } } FRQ1.dayOfweek(1, 10, 2019); . Period 1 Iteration HW . Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . import java.util.*; import java.lang.Math; public class IterationHW { public static int guess(int num) { //create a static method Random random = new Random(); int ranNum = random.nextInt(10); boolean greater; boolean less; if (num &gt; ranNum ){ System.out.println(&quot;Your Guess: &quot; + num + &quot; ,is greater than number&quot;); greater = true; less = false; } else if (num &lt; ranNum){ System.out.println(&quot;Your Guess: &quot; + num + &quot; ,is less than number&quot;); greater = false; less = true; } else if (num == ranNum){ greater = true; less = true; } if (greater &amp;&amp; less){ System.out.println(&quot;You find the number&quot;); } return ranNum; } } IterationHW.guess(1); . | if (greater &amp;&amp; less){ variable greater might not have been initialized | if (greater &amp;&amp; less){ variable less might not have been initialized . Period 1 Using Objects HW . (Goblin fight) . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 Gunther the great has perished . Unit 05 Thu - Writing Classes HW . 2021 FRQ Parts 1a &amp; 3a . 1a . . public int scoreGuess(String guess){ int result = 0; for (int i = 0; i &lt; secret.length(); i++){ if(secret.substring(i).indexOf(guess) == 0){ result++; } } return result * guess.length() * guess.length(); . 3a . . public void addMembers (String[] names, int gradYear){ for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . FRQ2 APCalendar . day of week using Math.round . public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) // math function: w=(k+[2.6m-0.2]-2c+Y+[Y/4]+[C/4])%7 double week; double c = Math.floor(year/100); double Y = year - (c * 100); int month1 = 0; double year1 = 0; if (month == 1 || month == 2){ month1 += (month + 10); year1 += (Y -1); } else { month1 += (month - 2); year1 += Y; } week = ((day + Math.floor(2.6 * month1 - 0.2) - 2*c + year1 + Math.floor(year1/4)+ Math.floor(c/4))%7); int weekday = (int) Math.round(week); return weekday; } . Unit 07 - ArrayList HW . Sort an ArrayList in descending order and swap the first and last elements Find and display the hashCode of an Arraylist before and after being sorted Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither . Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list . import java.util.*; import java.lang.Math; ArrayList&lt;Integer&gt; number = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; number2 = new ArrayList&lt;Integer&gt;(); for (int i = 0; i &lt; 5; i++){ number.add(i); } for (int i = 5; i &gt; 0; i--){ number.add(i); } System.out.println(&quot;Original: &quot; +number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); number.sort(Comparator.reverseOrder()); System.out.println(&quot;ArrayList after sort: &quot; + number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); Collections.swap(number, 4, 0); System.out.println(&quot;Swap the first and last elements: &quot; + number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); boolean a; boolean b; for (int i=0; i &lt; number.size() - 1; i++){ if (!(number.get(i) &lt;= number.get(i + 1))){ boolean a = false; } if (!(number.get(i) &gt;= number.get(i + 1))){ boolean b = false; } } if (a){ System.out.println(&quot;ascending&quot;); } if (b){ System.out.println(&quot;descending&quot;); } else{ System.out.println(&quot;neither&quot;); } . Original: [0, 1, 2, 3, 4, 5, 4, 3, 2, 1] HashCode: -1631985086 ArrayList after sort: [5, 4, 4, 3, 3, 2, 2, 1, 1, 0] HashCode: -287789284 Swap the first and last elements: [3, 4, 4, 3, 5, 2, 2, 1, 1, 0] HashCode: 162496028 neither . 2019 FRQ 4 Lightboard . public class LightBoard{ private boolean[][] lights; public LightBoard (int numRows, int numCols){ lights = new boolean [numRows][numCols]; for (int row = 0; row &lt; lights.length; row++){ for (int col = 0; col &lt; lights[row].length; col++){ if(Math.random() &lt;= 0.4){ lights[row][col] = true; } } } } public boolean evaluateLight(int row, int col){ for(int r = 0; r &lt; lights.length; r++){ for(int c = 0; col &lt; lights[row].length; col++){ if(lights[r][c] == true) { if(c % 2 == 0){ return false; } } else { if(c % 3 == 0){ return true; } } } } return lights[r][c]; } static public void main(String[] args) { // create and display LightBoard LightBoard lightBoard = new LightBoard(5, 5); System.out.println(lightBoard); // use toString() method System.out.println(lightBoard.evaluateLight(5, 5)); } } . Unit 9 HW Part1 and Part2 . public class Worldcup { private String name; public Worldcup(String name){ this.name = name; } public String toString(){ return (this.name); } } public class team1 extends Worldcup { public team1(String name){ super(name); // call superclass constructor } } public class team2 extends Worldcup { //similar code like team1 } public class team3 extends Worldcup { //similar code like team1 } public class team4 extends Worldcup { //similar code like team1 } public class team5 extends Worldcup { //similar code like team1 } public static void main(String[] args) { Team1 team1 = new Team1(&quot;I don&#39;t know any name of the Worldcup teams&quot;) System.out.println(&quot;Team name: &quot; + team1); } . constructor Worldcup in class Worldcup cannot be applied to given types; required: java.lang.String found: no arguments reason: actual and formal argument lists differ in length . public class Person { private String name; private String birthday; private int age; public Person (String name, String birthday, int age){ this.name = name; this.birthday = birthday; this.age = age; } public String getName(){ return name; } public String getBirthday(){ return birthday; } public int getAge(){ return age; } public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge()); } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa, int age) { super(name, birthday, age); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } public Double getGpa(){ return gpa; } @Override public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge() + &quot;, Grade: &quot; + this.getGrade() + &quot;, GPA: &quot; + this.getGpa()); } } public class Teacher extends Person { private String sub; public Teacher (String name, String birthday, int age, String sub) { super(name, birthday, age); this.sub = sub; } public String getSub(){ return sub; } @Override public String toString(){ return(&quot;Name: &quot; + this.getName() + &quot;, Birthday: &quot; + this.getBirthday() + &quot;, Age: &quot; + this.getAge() + &quot;, Subject: &quot; + this.getSub()); } } public class Homework{ public static void main(String[] args) { Person person = new Person(&quot;Tianbin&quot;, &quot;2018-05-05&quot;, 12); System.out.println(&quot;Person: &quot; + person); Student student = new Student(&quot;Tianbin&quot;, &quot;2005-04-28&quot;, 11, 4.9, 17); System.out.println(&quot;Student: &quot; + student); Teacher teacher = new Teacher(&quot;Mr. M&quot;, &quot;1000-10-10&quot;, 45, &quot;Computer Science A&quot;); System.out.println(&quot;Teacher: &quot; + teacher); } } Homework.main(null); . Person: Name: Tianbin, Birthday: 2018-05-05, Age: 12 Student: Name: Tianbin, Birthday: 2005-04-28, Age: 17, Grade: 11, GPA: 4.9 Teacher: Name: Mr. M, Birthday: 1000-10-10, Age: 45, Subject: Computer Science A . Unit 6 Array HW . import java.util.Arrays; public class ArrayMethods { private int[] values = {1,2,3,4,5}; public void swapFirstAndLast(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; //Resource found right herehttps://stackoverflow.com/questions/40567582/swap-first-and-last-value-in-an-array-java } public void zero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public String toString(){ return Arrays.toString(values); } public static void main(String[] args){ ArrayMethods swapFAL = new ArrayMethods(); swapFAL.swapFirstAndLast(); System.out.println(swapFAL.toString()); swapFAL.zero(); System.out.println(swapFAL.toString()); } } ArrayMethods.main(null); . [5, 2, 3, 4, 1] [0, 0, 0, 0, 0] . Tri 3 -Early seed award . Write a sample binary addition 1 + 1 = 10 . //resource come from https://www.java67.com/2018/05/coding-2-ways-to-add-binary-numbers-in-Java.html int num1 = 1; int num2 = 1; Integer num= new Integer(num1 + num2); Integer.toBinaryString(num); . 10 .",
            "url": "https://tianbinliu.github.io/Fastpage/jupyter/2022/08/22/Java-notebook.html",
            "relUrl": "/jupyter/2022/08/22/Java-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Collegeboard",
          "content": ". ` home | about me | Neight at Museum images | Collegeboard | . MCQ2014 . Q1 . Answer D Incorrect. This would be the result if k was initialized to 1 instead of 0. . Q4 . Answer B Incorrect. This would be the result if the division used was floating point division, instead of integer division. This would be the case if either x or y were of type double instead of type int or if either value was typecast as a double in the expression. . Q8 . Answer D Incorrect. Choice II will also compile as it uses the two-parameter constructor, with the parameters in the order of String then int, to create a new Student object and assign it to variable b of type Student. Choice III attempts to use the two-parameter constructor, however the order of the parameters is a String followed by a String (since both parameters are in quotations). There is no two-parameter constructor with two String parameters. This statement will cause a compile time error. . Q10 . Answer C Incorrect. Choice II will eventually cause an ArrayIndexOutOfBoundsException to be thrown when the recursive call is made with target and -1. This will happen after every valid index in data has been examined. During this call, data[-1] is out of bounds. Choice III will correctly return the index of the element closest to the end of the array with the value target, since data[last] == target will be true at some valid index value of last. . Q12 . Answer A Incorrect. This would be the return value if k started at 0 and was incremented by 1. . Q14 . Answer B Incorrect. The access being used here is what would be used if myVehicles was an array instead of an ArrayList and v was an index of the myVehicles array. However, in this case an enhanced for loop is being used, which accesses the elements of myVehicles directly and assigns v the value of the elements. Please note that interface is no longer a part of the AP CSA exam. . Q15 . Answer E Incorrect. Choice III has a loop control variable k that starts at 0, increments by 1, and will terminate the loop when k has the value data.length – 1. In each iteration, there is a check to see if the current value is larger than the subsequent value. If it is, false is returned because elements would not be nondecreasing, otherwise true is returned. As a result, only data[0] and data[1] are examined. The remaining elements in data are not checked because the method will stop once a return statement is reached. This means that the method could return true even when there are consecutive elements in data that are nondecreasing. . Q16 . Answer B Incorrect. Using the value of k will mean that some or all of the elements from a1 will not be in result as they will be replaced with a2 values. In the first for loop, result[0] was assigned a1[0]. In the second loop, when k has the value 0, result[0] will be assigned a2[0]. . Q19 . Answer D Incorrect. When you apply De Morgan’s Law the logic operator and (&amp;&amp;) becomes an or (||) and vice versa. . Q20 . Answer A Incorrect. Since the while loop terminates when j is greater than or equal to k, the first half of the elements in nums are swapped with the second half of the elements in nums. If the while condition was changed to j &lt; nums.length, then all the elements would be swapped and then swapped back to their original location and nums would be unchanged. . Q23 . `` Answer D Incorrect. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the case if the loop condition was k &gt; 1 rather than k &gt; 0. . Q25 . Answer B Incorrect. Please note that interface is no longer a part of the AP CSA exam. Choice I provides the user access to the height, width, and depth of a box through the accessor methods getHeight, getWidth, and getDepth. This allows comparisons to be made in each of the three dimensions to determine if one box can fit inside another box. . Q28 . Answer B Incorrect. If the value of n is 2 or less in the original call to the method mystery, the loop will be skipped and x will be 1 at //Point C. . Q30 . Answer E Incorrect. Since the two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1, no IndexOutOfBoundsException will be thrown. The indices 4, 7 (in the first call to substring), 0 and 2 (in the second call to substring) are all valid indices in &quot;compiler&quot;. . Q34 . Answer D Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. . Q39 . Answer B Incorrect. This is the value that is passed in the first recursive call to recur. . Collegeboard 66 Qs . Answer E Incorrect. When choice is greater than 10, code segment A will print &quot;blue&quot; and the else statements are not executed. Code segment B will print &quot;blue&quot; but will then execute the next if statement and print &quot;yellow&quot;, thereby giving different output for initial values that are greater than 10. Therefore, there are some initial values for choice that will cause the two code segments to produce different output. Correct Answer: C Reason: When choice is greater than 10, code segment A will print &quot;blue&quot; and the else statements are not executed. Code segment B will print &quot;blue&quot; but will then execute the next if statement and print &quot;yellow&quot;, thereby giving different output for initial values that are greater than 10. . Answer A Incorrect. Line 5 is intended to iterate over all columns of arr and correctly assigns to col all values from 0 to the number of columns in arr, inclusive. Correct Answer: C Reason: Two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. . Answer A Incorrect. This would result from incrementing counter when &quot;a&quot; is followed by &quot;b&quot;. This occurs one time. Correct Answer: D Reason: The expression str.substring(i, i + 1).equals(&quot;a&quot;) will evaluate to true if str contains the string &quot;a&quot; at position i. The expression !str.substring(i + 1, i + 2) will evaluate to true if str does not contain the string &quot;b&quot; at position i + 1. The variable counter is incremented when both of those expressions evaluate to true or, in other words, whenever &quot;a&quot; is not immediately followed by &quot;b&quot;. This occurs five times in the given string: &quot;a &quot;, &quot;ac&quot;, &quot;at&quot;, &quot;at&quot;, and &quot;a &quot;. . Answer A Incorrect. The variable b1 has the value false but b2 is assigned the value true since 17 % 3 == 2 evaluates to true. Correct Answer: B Reason: The expression 17 % 3 == 1 evaluates to false, and true &amp;&amp; false evaluates to false, so b1 is assigned the value false. The expression on the right-hand side of the assignment statement for b2 evaluates to false by short circuit evaluation. . Answer A Incorrect. Correct Answer: D Reason: Still don&#39;t understand. . Answer E Incorrect. Correct Answer: C Reason: Still don&#39;t understand, maybe because line 4 &quot;r&quot; has not been called in the method getDirection . Answer D Incorrect. Correct Answer: B Reason: Still don&#39;t understand . Answer C Incorrect. This change would print &quot;OneTwoThree&quot; on the first line and &quot;Four&quot; on the second line. Correct Answer: B Reason: As is, the code segment prints all four strings on the same line. Changing print to println in line 2 will move the cursor to the next line after &quot;Two&quot; is printed. . Answer B Incorrect. This method call returns false because the first character is lexicographically less than the second character of the string. Correct Answer: D Reason: If the first character of str is lexicographically greater than the second character of str, the method returns the result of the recursive call with a parameter that contains all but the first character of str. If the first character of str is lexicographically less than or equal to the second character of str, the method returns false. If no such character pair (where the first character of str is lexicographically less than or equal to the second character of str) is found, the base case is reached and the value true is returned. . Answer D Incorrect. Correct Answer: E Reason: that makes sense, only k++ when it doesn&#39;t remove the element. . Answer E Incorrect. Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. Choice III will correctly return the index of the element closest to the end of the array with the value target, since data[last] == target will be true at some valid index value of last. Correct Answer: B Reason: Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. Choice II will eventually cause an ArrayIndexOutOfBoundsException to be thrown when the recursive call is made with target and -1. This will happen after every valid index in data has been examined. During this call, data[-1] is out of bounds. Choice III will correctly return the index of the element closest to the end of the array with the value target, since data[last] == target will be true at some valid index value of last. . Answer C Incorrect. A variable of a superclass type can reference an object of the subclass. In this case, TennisPlayer is a subclass of Athlete. A variable of type Athlete can reference an object of type TennisPlayer. Please note that interface is no longer a part of the AP CSA exam. Correct Answer: D Reason: Variables of type Student need to reference objects of types that implement Student. The Athlete class does not implement the Student interface. Please note that interface is no longer a part of the AP CSA exam. . Answer E Incorrect. The code segment is intended to leave arr1 unchanged and store the smaller of two values in minArray. If lines 7–10 are removed, the code segment will store the smaller of each pair of values in arr1. Correct Answer: C Reason: Line 5 modifies an element of arr1 if that element is smaller than the corresponding element of minArray, which is NOT what is intended, since arr1 should remain unchanged. . Collegeboard 52 Qs . &lt;/h2&gt; Answer C Incorrect. This would be the result for the method call combine(&quot;10111&quot;, &quot;01101&quot;), for example. Correct Answer: B Reason: The combine method compares corresponding substrings of length 1 from input strings one and two. If the substrings are the same, the substring is appended to res; otherwise, &quot;0&quot; is appended to res. The first and second characters of res are &quot;0&quot; because the characters in position 0 and the characters in position 1 of one and two differ. The third character of res is &quot;1&quot; because the characters in position 2 of one and two are both &quot;1&quot;. The fourth character in res is &quot;0&quot; because the characters in position 3 of one and two differ. The fifth character in res is &quot;0&quot; because the last characters of one and two are both &quot;0&quot;. The value &quot;00100&quot; is returned. &lt;/h2&gt; Answer D Incorrect. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the case if the loop condition was k &gt; 1 rather than k &gt; 0. Correct Answer: B Reason: List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. In the second iteration, when k is 4, the element of animals at 4 (“cat”) does not start with a “b” and no changes are made to the list. In the third iteration, when k is 3, the element of animals at 3 (“bass”) starts with a “b”. This value is removed from the list and inserted at index 3. Since it was already at index 3, the list would not change. In the fourth iteration, when k is 2, the element of animals at 2 (“zebra”) does not start with a “b” and no changes are made to the list. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. . Answer D Incorrect. Correct Answer: A Reason: System.out.println(result.indexOf(str2)); is what it call. So it will print the index of str2 which is always 0. . Answer E Incorrect. Correct Answer: B Reason: y &lt; x.length - 1; not y &lt; x.length[0] - 1; So it will not goes through all the columns in each row. . 2015 Practice Exam MCQ . Answer C Incorrect. This would result in an integer between 0 and 10 inclusive, since (int)(Math.random() *6) generates an integer between 0 and 5 inclusive. While it does represent two independent random numbers being generated, to simulate the rolling of two number cubes, the value of each number should be between 1 and 6 inclusive to produce a sum in the range of 2 to 12. Correct Answer: E Reason: The call Math.random() will produce a double between 0 and 1, not including 1. To generate a random number in the range of 1 to 6, the call Math.random() needs to be multiplied by the number of integers you want to generate, in this case 6, giving us Math.random() * 6. This will result in a double between 0 and 6, not including 6. If we type cast this to an int, as in (int)(Math.random() * 6), the result will be an integer between 0 and 5 inclusive. Adding 1 will adjust the range to 1 to 6 inclusive, as in (int)(Math.random() * 6) + 1. This expression will simulate the rolling of one number cube. Since each roll is independent, to simulate rolling two number cubes, we need to use this expression twice which simplifies to 2 + (int)(Math.random() * 6) + (int)(Math.random() * 6). . Answer A Incorrect. This would be the result if the first line in changeIt (arr = new int[5];) was removed. Parameters are passed using call by value. Call by value initializes the formal parameters (arr, val, word) with copies of the actual parameters (nums, value, name). When the parameter is a reference variable, the method receives a reference and can mutate the object being referenced but cannot alter the reference itself. Changing the reference stored in arr in changeIt does not affect the reference stored in nums in start so subsequent changes to the elements in arr are made in the new array not in nums. Updating val to 0 will not affect value. Since String objects are immutable, the substring call would need to be made in method start if we wanted name to be “black” instead of “blackboard”. Assigning a new value to word in changeIt does not affect name in start. Correct Answer: E Reason: Parameters are passed using call by value. Call by value initializes the formal parameters (arr, val, word) with copies of the actual parameters (nums, value, name). When the parameter is a reference variable, the method receives a reference and can mutate the object being referenced but cannot alter the reference itself. Passing an object reference as a parameter will result in the formal parameter and the actual parameter being aliases. They both refer to the same object. When we call changeIt and pass the objects num and name, the formal parameters arr and word will reference these same objects. A copy of the object is not made. However, the first part of the method assigns new objects to arr and word, which means that any changes made to arr and word do not affect the actual parameters num and name. They remain unchanged. Updating val to 0 will not affect value. Therefore, the original values for num, value and name are printed. . Answer B Incorrect. This image would require loops across the entire board with alternating checks for when rows and columns were even or odd. Correct Answer: E Reason: The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. When val is even, board is not updated, so nothing happens when val is 0. When val is 1, row is assigned 1 and col is assigned 0. The boolean condition in the while loop is true, so board[1][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 0 and board[0][1] is assigned “X”. Then col is incremented to 2 and row is decremented to -1 and the while loop terminates. When val is 2, nothing changes about board. When val is 3, row is assigned 3 and col is assigned 0. The boolean condition in the while loop is true, so board[3][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 2 and board[2][1] is assigned “X”. Then col is incremented to 2 and row is decremented to 1 and board[1][2] is assigned “X”. Then col is incremented to 3 and row is decremented to 0 and board[0][3] is assigned “X”. Finally, col is incremented to 4 and row is decremented to -1 and the while loop terminates. When val is 4, nothing changes about board. . Answer C Incorrect. Choice I sets max to Integer.MIN_VALUE, which is the smallest possible integer value. Then it accesses each element in arr and assigns them value. If value is greater than max, max is assigned value since it is now the largest value so far. Choice II uses an if statement inside the for loop to check and see if value is the first element in arr or not. Once the first element is identified, max is initialized to the first element and first is set to false. For all subsequent elements in arr, if value is greater than max, max is assigned value since it is now the largest value so far. Correct Answer: E Reason: Choice I sets max to Integer.MIN_VALUE, which is the smallest possible integer value. Then it accesses each element in arr and assigns them value. If value is greater than max, max is assigned value since it is now the largest value so far. Choice II uses an if statement inside the for loop to check and see if value is the first element in arr or not. Once the first element is identified, max is initialized to the first element and first is set to false. For all subsequent elements in arr, if value is greater than max, max is assigned value since it is now the largest value so far. Choice III sets max to the first value in arr. Then it accesses each subsequent value in arr checking to see if the value is greater than max, if it is max is assigned this element since it is now the largest value so far. . Answer B Incorrect. Choice III starts by adding the elements of words to temp in reverse order. The second loop starts at the beginning of temp (which was the end of words) and adds each subsequent element to result until it reaches the element that was at startIndex and is now at temp.length – startIndex resulting in result containing the required elements in reverse order. Correct Answer: E Reason: Choice I iterates from startIndex to the end of the array words as expected, but when it adds elements to result it adds the current word followed by a second word starting at the end of the array words. This will result in duplicate words being added to result. Choice II starts at the end of the array words and adds each word to result working right to left until it reaches the startIndex. By starting at the end of the array, the elements are concatenated in reverse order. Choice III starts by adding the elements of words to temp in reverse order. The second loop starts at the beginning of temp (which was the end of words) and adds each subsequent element to result until it reaches the element that was at startIndex and is now at temp.length – startIndex resulting in result containing the required elements in reverse order. . .",
          "url": "https://tianbinliu.github.io/Fastpage/Collegeboard.html",
          "relUrl": "/Collegeboard.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About",
          "content": ". home | about me | Neight at Museum images | Collegeboard | . | . A blog about me . My interest and skills . Interest Skills . Video game | Know a little bit of Java | . Soccer | Know how to build a website with Flask | . Read fiction | know how to use Github | . Sleep | Know how to use Python | . something for the week that shows your goals, efforts, and vocab . Goals Vocab Gratitude list . Something I will put right here in the future | mental health | my parents | . Something I will put right here in the future | psychology | teachers | . Something I will put right here in the future | Something I will put right here in the future | friends | . Some notes about gratitude to someone on campus and someone at home . Someone on campus: . Someone at home: . &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
          "url": "https://tianbinliu.github.io/Fastpage/about.html",
          "relUrl": "/about.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Image",
          "content": ". home | about me | Neight at Museum images | Collegeboard | . | See commits for the project tri 1 | See commits for the project tri 2 | . Tri 1 Night of Museum capture . . Previous Next . Tri 2 Night of Museum capture . . Previous Next . .",
          "url": "https://tianbinliu.github.io/Fastpage/img.html",
          "relUrl": "/img.html",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "",
          "content": "This is my first Fastpage . home | about me | Neight at Museum images | Collegeboard | . Week Review Ticket . 0 | Tool Setup | . 1 | Innovation - Primitives | . 2 | Innovation - Using Objects | . 3 | Backend Development | . 4 | Free Response Question No. 1 | . 5 | Class running Fibonacci | . 6 | Project Approval | . 7 | Last CB Topic - ArrayList | . 8 | | . 9 | | . 10 | | . 11 | | . Final Week | | . Tri2 - 13 | FRQ1 - Methods and Control Structures | . Tri2 - 13 | FRQ2 - Classes | . Tri2 - 14 | Units 1 to 5 Blogs Review Ticket 5.6/6 | . Tri2 - 14 | FRQ3 - Array/ArrayList | . Tri2 - 15 | FRQ4 - 2D Arrays | . Tri2 - 15 | Units 6 to 10 Blogs | . Tri2 | Pair Grade | . Tri2 Final | Full Stack Individual and Final | . &lt;/div&gt;",
          "url": "https://tianbinliu.github.io/Fastpage/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tianbinliu.github.io/Fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}